{"version":3,"file":"bundle.js","sources":["../node_modules/tslib/tslib.es6.js","../node_modules/rxjs/_esm5/internal/util/isFunction.js","../node_modules/rxjs/_esm5/internal/config.js","../node_modules/rxjs/_esm5/internal/util/hostReportError.js","../node_modules/rxjs/_esm5/internal/Observer.js","../node_modules/rxjs/_esm5/internal/util/isArray.js","../node_modules/rxjs/_esm5/internal/util/isObject.js","../node_modules/rxjs/_esm5/internal/util/errorObject.js","../node_modules/rxjs/_esm5/internal/util/tryCatch.js","../node_modules/rxjs/_esm5/internal/util/UnsubscriptionError.js","../node_modules/rxjs/_esm5/internal/Subscription.js","../node_modules/rxjs/_esm5/internal/symbol/rxSubscriber.js","../node_modules/rxjs/_esm5/internal/Subscriber.js","../node_modules/rxjs/_esm5/internal/symbol/observable.js","../node_modules/rxjs/_esm5/internal/util/noop.js","../node_modules/rxjs/_esm5/internal/Observable.js","../node_modules/rxjs/_esm5/internal/util/toSubscriber.js","../node_modules/rxjs/_esm5/internal/util/pipe.js","../node_modules/rxjs/_esm5/internal/util/ObjectUnsubscribedError.js","../node_modules/rxjs/_esm5/internal/SubjectSubscription.js","../node_modules/rxjs/_esm5/internal/Subject.js","../node_modules/rxjs/_esm5/internal/operators/refCount.js","../node_modules/rxjs/_esm5/internal/observable/ConnectableObservable.js","../node_modules/rxjs/_esm5/internal/operators/groupBy.js","../node_modules/rxjs/_esm5/internal/scheduler/QueueAction.js","../node_modules/rxjs/_esm5/internal/scheduler/AsyncAction.js","../node_modules/rxjs/_esm5/internal/scheduler/Action.js","../node_modules/rxjs/_esm5/internal/Scheduler.js","../node_modules/rxjs/_esm5/internal/scheduler/queue.js","../node_modules/rxjs/_esm5/internal/scheduler/QueueScheduler.js","../node_modules/rxjs/_esm5/internal/scheduler/AsyncScheduler.js","../node_modules/rxjs/_esm5/internal/observable/empty.js","../node_modules/rxjs/_esm5/internal/util/isScheduler.js","../node_modules/rxjs/_esm5/internal/util/subscribeToArray.js","../node_modules/rxjs/_esm5/internal/observable/fromArray.js","../node_modules/rxjs/_esm5/internal/Notification.js","../node_modules/rxjs/_esm5/internal/observable/throwError.js","../node_modules/rxjs/_esm5/internal/observable/of.js","../node_modules/rxjs/_esm5/internal/observable/scalar.js","../node_modules/rxjs/_esm5/internal/operators/observeOn.js","../node_modules/rxjs/_esm5/internal/ReplaySubject.js","../node_modules/rxjs/_esm5/internal/util/identity.js","../node_modules/rxjs/_esm5/internal/util/ArgumentOutOfRangeError.js","../node_modules/rxjs/_esm5/internal/util/EmptyError.js","../node_modules/rxjs/_esm5/internal/operators/map.js","../node_modules/rxjs/_esm5/internal/OuterSubscriber.js","../node_modules/rxjs/_esm5/internal/InnerSubscriber.js","../node_modules/rxjs/_esm5/internal/util/subscribeToPromise.js","../node_modules/rxjs/_esm5/internal/symbol/iterator.js","../node_modules/rxjs/_esm5/internal/util/subscribeToIterable.js","../node_modules/rxjs/_esm5/internal/util/subscribeToObservable.js","../node_modules/rxjs/_esm5/internal/util/isArrayLike.js","../node_modules/rxjs/_esm5/internal/util/isPromise.js","../node_modules/rxjs/_esm5/internal/util/subscribeTo.js","../node_modules/rxjs/_esm5/internal/util/subscribeToResult.js","../node_modules/rxjs/_esm5/internal/observable/combineLatest.js","../node_modules/rxjs/_esm5/internal/operators/mergeMap.js","../node_modules/rxjs/_esm5/internal/observable/race.js","../node_modules/rxjs/_esm5/internal/observable/zip.js","../node_modules/rxjs/_esm5/internal/operators/bufferTime.js","../node_modules/rxjs/_esm5/internal/operators/audit.js","../node_modules/rxjs/_esm5/internal/operators/buffer.js","../node_modules/rxjs/_esm5/internal/operators/bufferCount.js","../node_modules/rxjs/_esm5/internal/operators/debounceTime.js","../node_modules/rxjs/_esm5/internal/operators/bufferToggle.js","../node_modules/rxjs/_esm5/internal/operators/bufferWhen.js","../node_modules/rxjs/_esm5/internal/operators/catchError.js","../node_modules/rxjs/_esm5/internal/operators/count.js","../node_modules/rxjs/_esm5/internal/operators/debounce.js","../node_modules/rxjs/_esm5/internal/operators/defaultIfEmpty.js","../node_modules/rxjs/_esm5/internal/operators/delay.js","../node_modules/rxjs/_esm5/internal/operators/finalize.js","../node_modules/rxjs/_esm5/internal/operators/delayWhen.js","../node_modules/rxjs/_esm5/internal/operators/sampleTime.js","../node_modules/rxjs/_esm5/internal/operators/dematerialize.js","../node_modules/rxjs/_esm5/internal/operators/distinct.js","../node_modules/rxjs/_esm5/internal/operators/distinctUntilChanged.js","../node_modules/rxjs/_esm5/internal/operators/filter.js","../node_modules/rxjs/_esm5/internal/operators/tap.js","../node_modules/rxjs/_esm5/internal/operators/take.js","../node_modules/rxjs/_esm5/internal/operators/every.js","../node_modules/rxjs/_esm5/internal/operators/exhaust.js","../node_modules/rxjs/_esm5/internal/operators/exhaustMap.js","../node_modules/rxjs/_esm5/internal/operators/expand.js","../node_modules/rxjs/_esm5/internal/operators/find.js","../node_modules/rxjs/_esm5/internal/operators/ignoreElements.js","../node_modules/rxjs/_esm5/internal/operators/isEmpty.js","../node_modules/rxjs/_esm5/internal/operators/takeLast.js","../node_modules/rxjs/_esm5/internal/operators/mapTo.js","../node_modules/rxjs/_esm5/internal/operators/materialize.js","../node_modules/rxjs/_esm5/internal/operators/scan.js","../node_modules/rxjs/_esm5/internal/operators/mergeScan.js","../node_modules/rxjs/_esm5/internal/operators/onErrorResumeNext.js","../node_modules/rxjs/_esm5/internal/operators/pairwise.js","../node_modules/rxjs/_esm5/internal/operators/repeat.js","../node_modules/rxjs/_esm5/internal/operators/repeatWhen.js","../node_modules/rxjs/_esm5/internal/operators/retry.js","../node_modules/rxjs/_esm5/internal/operators/retryWhen.js","../node_modules/rxjs/_esm5/internal/operators/sample.js","../node_modules/rxjs/_esm5/internal/operators/sequenceEqual.js","../node_modules/rxjs/_esm5/internal/operators/share.js","../node_modules/rxjs/_esm5/internal/operators/throttleTime.js","../node_modules/rxjs/_esm5/internal/operators/single.js","../node_modules/rxjs/_esm5/internal/operators/skip.js","../node_modules/rxjs/_esm5/internal/operators/skipLast.js","../node_modules/rxjs/_esm5/internal/operators/skipUntil.js","../node_modules/rxjs/_esm5/internal/operators/skipWhile.js","../node_modules/rxjs/_esm5/internal/operators/switchMap.js","../node_modules/rxjs/_esm5/internal/operators/takeUntil.js","../node_modules/rxjs/_esm5/internal/operators/takeWhile.js","../node_modules/rxjs/_esm5/internal/operators/throttle.js","../node_modules/rxjs/_esm5/internal/operators/timeoutWith.js","../node_modules/rxjs/_esm5/internal/operators/window.js","../node_modules/rxjs/_esm5/internal/operators/windowCount.js","../node_modules/rxjs/_esm5/internal/operators/windowTime.js","../node_modules/@angular/core/fesm5/core.js","../node_modules/rxjs/_esm5/internal/operators/windowToggle.js","../node_modules/rxjs/_esm5/internal/operators/windowWhen.js","../node_modules/rxjs/_esm5/internal/operators/withLatestFrom.js","../node_modules/rxjs/_esm5/internal/observable/merge.js","../node_modules/rxjs/_esm5/internal/operators/mergeAll.js","../node_modules/rxjs/_esm5/internal/observable/from.js","../node_modules/rxjs/_esm5/internal/operators/multicast.js","../lib/src/hello-world.js"],"sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = Object.setPrototypeOf ||\r\n    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = Object.assign || function __assign(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n    }\r\n    return t;\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [0, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);  }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { if (o[n]) i[n] = function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; }; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator];\r\n    return m ? m.call(o) : typeof __values === \"function\" ? __values(o) : o[Symbol.iterator]();\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","/** PURE_IMPORTS_START  PURE_IMPORTS_END */\nexport function isFunction(x) {\n    return typeof x === 'function';\n}\n//# sourceMappingURL=isFunction.js.map\n","/** PURE_IMPORTS_START  PURE_IMPORTS_END */\nvar _enable_super_gross_mode_that_will_cause_bad_things = false;\n/**\n * The global configuration object for RxJS, used to configure things\n * like what Promise contructor should used to create Promises\n */\nexport var config = {\n    /**\n     * The promise constructor used by default for methods such as\n     * {@link toPromise} and {@link forEach}\n     */\n    Promise: undefined,\n    /**\n     * If true, turns on synchronous error rethrowing, which is a deprecated behavior\n     * in v6 and higher. This behavior enables bad patterns like wrapping a subscribe\n     * call in a try/catch block. It also enables producer interference, a nasty bug\n     * where a multicast can be broken for all observers by a downstream consumer with\n     * an unhandled error. DO NOT USE THIS FLAG UNLESS IT'S NEEDED TO BY TIME\n     * FOR MIGRATION REASONS.\n     */\n    set useDeprecatedSynchronousErrorHandling(value) {\n        if (value) {\n            var error = /*@__PURE__*/ new Error();\n            /*@__PURE__*/ console.warn('DEPRECATED! RxJS was set to use deprecated synchronous error handling behavior by code at: \\n' + error.stack);\n        }\n        else if (_enable_super_gross_mode_that_will_cause_bad_things) {\n            /*@__PURE__*/ console.log('RxJS: Back to a better error behavior. Thank you. <3');\n        }\n        _enable_super_gross_mode_that_will_cause_bad_things = value;\n    },\n    get useDeprecatedSynchronousErrorHandling() {\n        return _enable_super_gross_mode_that_will_cause_bad_things;\n    },\n};\n//# sourceMappingURL=config.js.map\n","/**\n * Throws an error on another job so that it's picked up by the runtime's\n * uncaught error handling mechanism.\n * @param err the error to throw\n */\n/** PURE_IMPORTS_START  PURE_IMPORTS_END */\nexport function hostReportError(err) {\n    setTimeout(function () { throw err; });\n}\n//# sourceMappingURL=hostReportError.js.map\n","/** PURE_IMPORTS_START _config,_util_hostReportError PURE_IMPORTS_END */\nimport { config } from './config';\nimport { hostReportError } from './util/hostReportError';\nexport var empty = {\n    closed: true,\n    next: function (value) { },\n    error: function (err) {\n        if (config.useDeprecatedSynchronousErrorHandling) {\n            throw err;\n        }\n        else {\n            hostReportError(err);\n        }\n    },\n    complete: function () { }\n};\n//# sourceMappingURL=Observer.js.map\n","/** PURE_IMPORTS_START  PURE_IMPORTS_END */\nexport var isArray = Array.isArray || (function (x) { return x && typeof x.length === 'number'; });\n//# sourceMappingURL=isArray.js.map\n","/** PURE_IMPORTS_START  PURE_IMPORTS_END */\nexport function isObject(x) {\n    return x != null && typeof x === 'object';\n}\n//# sourceMappingURL=isObject.js.map\n","// typeof any so that it we don't have to cast when comparing a result to the error object\n/** PURE_IMPORTS_START  PURE_IMPORTS_END */\nexport var errorObject = { e: {} };\n//# sourceMappingURL=errorObject.js.map\n","/** PURE_IMPORTS_START _errorObject PURE_IMPORTS_END */\nimport { errorObject } from './errorObject';\nvar tryCatchTarget;\nfunction tryCatcher() {\n    try {\n        return tryCatchTarget.apply(this, arguments);\n    }\n    catch (e) {\n        errorObject.e = e;\n        return errorObject;\n    }\n}\nexport function tryCatch(fn) {\n    tryCatchTarget = fn;\n    return tryCatcher;\n}\n//# sourceMappingURL=tryCatch.js.map\n","/** PURE_IMPORTS_START tslib PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\n/**\n * An error thrown when one or more errors have occurred during the\n * `unsubscribe` of a {@link Subscription}.\n */\nvar UnsubscriptionError = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(UnsubscriptionError, _super);\n    function UnsubscriptionError(errors) {\n        var _this = _super.call(this, errors ?\n            errors.length + \" errors occurred during unsubscription:\\n  \" + errors.map(function (err, i) { return i + 1 + \") \" + err.toString(); }).join('\\n  ') : '') || this;\n        _this.errors = errors;\n        _this.name = 'UnsubscriptionError';\n        Object.setPrototypeOf(_this, UnsubscriptionError.prototype);\n        return _this;\n    }\n    return UnsubscriptionError;\n}(Error));\nexport { UnsubscriptionError };\n//# sourceMappingURL=UnsubscriptionError.js.map\n","/** PURE_IMPORTS_START _util_isArray,_util_isObject,_util_isFunction,_util_tryCatch,_util_errorObject,_util_UnsubscriptionError PURE_IMPORTS_END */\nimport { isArray } from './util/isArray';\nimport { isObject } from './util/isObject';\nimport { isFunction } from './util/isFunction';\nimport { tryCatch } from './util/tryCatch';\nimport { errorObject } from './util/errorObject';\nimport { UnsubscriptionError } from './util/UnsubscriptionError';\n/**\n * Represents a disposable resource, such as the execution of an Observable. A\n * Subscription has one important method, `unsubscribe`, that takes no argument\n * and just disposes the resource held by the subscription.\n *\n * Additionally, subscriptions may be grouped together through the `add()`\n * method, which will attach a child Subscription to the current Subscription.\n * When a Subscription is unsubscribed, all its children (and its grandchildren)\n * will be unsubscribed as well.\n *\n * @class Subscription\n */\nvar Subscription = /*@__PURE__*/ (function () {\n    /**\n     * @param {function(): void} [unsubscribe] A function describing how to\n     * perform the disposal of resources when the `unsubscribe` method is called.\n     */\n    function Subscription(unsubscribe) {\n        /**\n         * A flag to indicate whether this Subscription has already been unsubscribed.\n         * @type {boolean}\n         */\n        this.closed = false;\n        /** @internal */\n        this._parent = null;\n        /** @internal */\n        this._parents = null;\n        /** @internal */\n        this._subscriptions = null;\n        if (unsubscribe) {\n            this._unsubscribe = unsubscribe;\n        }\n    }\n    /**\n     * Disposes the resources held by the subscription. May, for instance, cancel\n     * an ongoing Observable execution or cancel any other type of work that\n     * started when the Subscription was created.\n     * @return {void}\n     */\n    Subscription.prototype.unsubscribe = function () {\n        var hasErrors = false;\n        var errors;\n        if (this.closed) {\n            return;\n        }\n        var _a = this, _parent = _a._parent, _parents = _a._parents, _unsubscribe = _a._unsubscribe, _subscriptions = _a._subscriptions;\n        this.closed = true;\n        this._parent = null;\n        this._parents = null;\n        // null out _subscriptions first so any child subscriptions that attempt\n        // to remove themselves from this subscription will noop\n        this._subscriptions = null;\n        var index = -1;\n        var len = _parents ? _parents.length : 0;\n        // if this._parent is null, then so is this._parents, and we\n        // don't have to remove ourselves from any parent subscriptions.\n        while (_parent) {\n            _parent.remove(this);\n            // if this._parents is null or index >= len,\n            // then _parent is set to null, and the loop exits\n            _parent = ++index < len && _parents[index] || null;\n        }\n        if (isFunction(_unsubscribe)) {\n            var trial = tryCatch(_unsubscribe).call(this);\n            if (trial === errorObject) {\n                hasErrors = true;\n                errors = errors || (errorObject.e instanceof UnsubscriptionError ?\n                    flattenUnsubscriptionErrors(errorObject.e.errors) : [errorObject.e]);\n            }\n        }\n        if (isArray(_subscriptions)) {\n            index = -1;\n            len = _subscriptions.length;\n            while (++index < len) {\n                var sub = _subscriptions[index];\n                if (isObject(sub)) {\n                    var trial = tryCatch(sub.unsubscribe).call(sub);\n                    if (trial === errorObject) {\n                        hasErrors = true;\n                        errors = errors || [];\n                        var err = errorObject.e;\n                        if (err instanceof UnsubscriptionError) {\n                            errors = errors.concat(flattenUnsubscriptionErrors(err.errors));\n                        }\n                        else {\n                            errors.push(err);\n                        }\n                    }\n                }\n            }\n        }\n        if (hasErrors) {\n            throw new UnsubscriptionError(errors);\n        }\n    };\n    /**\n     * Adds a tear down to be called during the unsubscribe() of this\n     * Subscription.\n     *\n     * If the tear down being added is a subscription that is already\n     * unsubscribed, is the same reference `add` is being called on, or is\n     * `Subscription.EMPTY`, it will not be added.\n     *\n     * If this subscription is already in an `closed` state, the passed\n     * tear down logic will be executed immediately.\n     *\n     * @param {TeardownLogic} teardown The additional logic to execute on\n     * teardown.\n     * @return {Subscription} Returns the Subscription used or created to be\n     * added to the inner subscriptions list. This Subscription can be used with\n     * `remove()` to remove the passed teardown logic from the inner subscriptions\n     * list.\n     */\n    Subscription.prototype.add = function (teardown) {\n        if (!teardown || (teardown === Subscription.EMPTY)) {\n            return Subscription.EMPTY;\n        }\n        if (teardown === this) {\n            return this;\n        }\n        var subscription = teardown;\n        switch (typeof teardown) {\n            case 'function':\n                subscription = new Subscription(teardown);\n            case 'object':\n                if (subscription.closed || typeof subscription.unsubscribe !== 'function') {\n                    return subscription;\n                }\n                else if (this.closed) {\n                    subscription.unsubscribe();\n                    return subscription;\n                }\n                else if (typeof subscription._addParent !== 'function' /* quack quack */) {\n                    var tmp = subscription;\n                    subscription = new Subscription();\n                    subscription._subscriptions = [tmp];\n                }\n                break;\n            default:\n                throw new Error('unrecognized teardown ' + teardown + ' added to Subscription.');\n        }\n        var subscriptions = this._subscriptions || (this._subscriptions = []);\n        subscriptions.push(subscription);\n        subscription._addParent(this);\n        return subscription;\n    };\n    /**\n     * Removes a Subscription from the internal list of subscriptions that will\n     * unsubscribe during the unsubscribe process of this Subscription.\n     * @param {Subscription} subscription The subscription to remove.\n     * @return {void}\n     */\n    Subscription.prototype.remove = function (subscription) {\n        var subscriptions = this._subscriptions;\n        if (subscriptions) {\n            var subscriptionIndex = subscriptions.indexOf(subscription);\n            if (subscriptionIndex !== -1) {\n                subscriptions.splice(subscriptionIndex, 1);\n            }\n        }\n    };\n    /** @internal */\n    Subscription.prototype._addParent = function (parent) {\n        var _a = this, _parent = _a._parent, _parents = _a._parents;\n        if (!_parent || _parent === parent) {\n            // If we don't have a parent, or the new parent is the same as the\n            // current parent, then set this._parent to the new parent.\n            this._parent = parent;\n        }\n        else if (!_parents) {\n            // If there's already one parent, but not multiple, allocate an Array to\n            // store the rest of the parent Subscriptions.\n            this._parents = [parent];\n        }\n        else if (_parents.indexOf(parent) === -1) {\n            // Only add the new parent to the _parents list if it's not already there.\n            _parents.push(parent);\n        }\n    };\n    /** @nocollapse */\n    Subscription.EMPTY = (function (empty) {\n        empty.closed = true;\n        return empty;\n    }(new Subscription()));\n    return Subscription;\n}());\nexport { Subscription };\nfunction flattenUnsubscriptionErrors(errors) {\n    return errors.reduce(function (errs, err) { return errs.concat((err instanceof UnsubscriptionError) ? err.errors : err); }, []);\n}\n//# sourceMappingURL=Subscription.js.map\n","/** PURE_IMPORTS_START  PURE_IMPORTS_END */\nexport var rxSubscriber = (typeof Symbol === 'function' && typeof Symbol.for === 'function')\n    ? /*@__PURE__*/ Symbol.for('rxSubscriber')\n    : '@@rxSubscriber';\n/**\n * @deprecated use rxSubscriber instead\n */\nexport var $$rxSubscriber = rxSubscriber;\n//# sourceMappingURL=rxSubscriber.js.map\n","/** PURE_IMPORTS_START tslib,_util_isFunction,_Observer,_Subscription,_internal_symbol_rxSubscriber,_config,_util_hostReportError PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { isFunction } from './util/isFunction';\nimport { empty as emptyObserver } from './Observer';\nimport { Subscription } from './Subscription';\nimport { rxSubscriber as rxSubscriberSymbol } from '../internal/symbol/rxSubscriber';\nimport { config } from './config';\nimport { hostReportError } from './util/hostReportError';\n/**\n * Implements the {@link Observer} interface and extends the\n * {@link Subscription} class. While the {@link Observer} is the public API for\n * consuming the values of an {@link Observable}, all Observers get converted to\n * a Subscriber, in order to provide Subscription-like capabilities such as\n * `unsubscribe`. Subscriber is a common type in RxJS, and crucial for\n * implementing operators, but it is rarely used as a public API.\n *\n * @class Subscriber<T>\n */\nvar Subscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(Subscriber, _super);\n    /**\n     * @param {Observer|function(value: T): void} [destinationOrNext] A partially\n     * defined Observer or a `next` callback function.\n     * @param {function(e: ?any): void} [error] The `error` callback of an\n     * Observer.\n     * @param {function(): void} [complete] The `complete` callback of an\n     * Observer.\n     */\n    function Subscriber(destinationOrNext, error, complete) {\n        var _this = _super.call(this) || this;\n        /** @internal */ _this.syncErrorValue = null;\n        /** @internal */ _this.syncErrorThrown = false;\n        /** @internal */ _this.syncErrorThrowable = false;\n        _this.isStopped = false;\n        switch (arguments.length) {\n            case 0:\n                _this.destination = emptyObserver;\n                break;\n            case 1:\n                if (!destinationOrNext) {\n                    _this.destination = emptyObserver;\n                    break;\n                }\n                if (typeof destinationOrNext === 'object') {\n                    // HACK(benlesh): For situations where Node has multiple copies of rxjs in\n                    // node_modules, we cannot rely on `instanceof` checks\n                    if (isTrustedSubscriber(destinationOrNext)) {\n                        var trustedSubscriber = destinationOrNext[rxSubscriberSymbol]();\n                        _this.syncErrorThrowable = trustedSubscriber.syncErrorThrowable;\n                        _this.destination = trustedSubscriber;\n                        trustedSubscriber.add(_this);\n                    }\n                    else {\n                        _this.syncErrorThrowable = true;\n                        _this.destination = new SafeSubscriber(_this, destinationOrNext);\n                    }\n                    break;\n                }\n            default:\n                _this.syncErrorThrowable = true;\n                _this.destination = new SafeSubscriber(_this, destinationOrNext, error, complete);\n                break;\n        }\n        return _this;\n    }\n    Subscriber.prototype[rxSubscriberSymbol] = function () { return this; };\n    /**\n     * A static factory for a Subscriber, given a (potentially partial) definition\n     * of an Observer.\n     * @param {function(x: ?T): void} [next] The `next` callback of an Observer.\n     * @param {function(e: ?any): void} [error] The `error` callback of an\n     * Observer.\n     * @param {function(): void} [complete] The `complete` callback of an\n     * Observer.\n     * @return {Subscriber<T>} A Subscriber wrapping the (partially defined)\n     * Observer represented by the given arguments.\n     * @nocollapse\n     */\n    Subscriber.create = function (next, error, complete) {\n        var subscriber = new Subscriber(next, error, complete);\n        subscriber.syncErrorThrowable = false;\n        return subscriber;\n    };\n    /**\n     * The {@link Observer} callback to receive notifications of type `next` from\n     * the Observable, with a value. The Observable may call this method 0 or more\n     * times.\n     * @param {T} [value] The `next` value.\n     * @return {void}\n     */\n    Subscriber.prototype.next = function (value) {\n        if (!this.isStopped) {\n            this._next(value);\n        }\n    };\n    /**\n     * The {@link Observer} callback to receive notifications of type `error` from\n     * the Observable, with an attached {@link Error}. Notifies the Observer that\n     * the Observable has experienced an error condition.\n     * @param {any} [err] The `error` exception.\n     * @return {void}\n     */\n    Subscriber.prototype.error = function (err) {\n        if (!this.isStopped) {\n            this.isStopped = true;\n            this._error(err);\n        }\n    };\n    /**\n     * The {@link Observer} callback to receive a valueless notification of type\n     * `complete` from the Observable. Notifies the Observer that the Observable\n     * has finished sending push-based notifications.\n     * @return {void}\n     */\n    Subscriber.prototype.complete = function () {\n        if (!this.isStopped) {\n            this.isStopped = true;\n            this._complete();\n        }\n    };\n    Subscriber.prototype.unsubscribe = function () {\n        if (this.closed) {\n            return;\n        }\n        this.isStopped = true;\n        _super.prototype.unsubscribe.call(this);\n    };\n    Subscriber.prototype._next = function (value) {\n        this.destination.next(value);\n    };\n    Subscriber.prototype._error = function (err) {\n        this.destination.error(err);\n        this.unsubscribe();\n    };\n    Subscriber.prototype._complete = function () {\n        this.destination.complete();\n        this.unsubscribe();\n    };\n    /** @deprecated This is an internal implementation detail, do not use. */\n    Subscriber.prototype._unsubscribeAndRecycle = function () {\n        var _a = this, _parent = _a._parent, _parents = _a._parents;\n        this._parent = null;\n        this._parents = null;\n        this.unsubscribe();\n        this.closed = false;\n        this.isStopped = false;\n        this._parent = _parent;\n        this._parents = _parents;\n        return this;\n    };\n    return Subscriber;\n}(Subscription));\nexport { Subscriber };\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SafeSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(SafeSubscriber, _super);\n    function SafeSubscriber(_parentSubscriber, observerOrNext, error, complete) {\n        var _this = _super.call(this) || this;\n        _this._parentSubscriber = _parentSubscriber;\n        var next;\n        var context = _this;\n        if (isFunction(observerOrNext)) {\n            next = observerOrNext;\n        }\n        else if (observerOrNext) {\n            next = observerOrNext.next;\n            error = observerOrNext.error;\n            complete = observerOrNext.complete;\n            if (observerOrNext !== emptyObserver) {\n                context = Object.create(observerOrNext);\n                if (isFunction(context.unsubscribe)) {\n                    _this.add(context.unsubscribe.bind(context));\n                }\n                context.unsubscribe = _this.unsubscribe.bind(_this);\n            }\n        }\n        _this._context = context;\n        _this._next = next;\n        _this._error = error;\n        _this._complete = complete;\n        return _this;\n    }\n    SafeSubscriber.prototype.next = function (value) {\n        if (!this.isStopped && this._next) {\n            var _parentSubscriber = this._parentSubscriber;\n            if (!config.useDeprecatedSynchronousErrorHandling || !_parentSubscriber.syncErrorThrowable) {\n                this.__tryOrUnsub(this._next, value);\n            }\n            else if (this.__tryOrSetError(_parentSubscriber, this._next, value)) {\n                this.unsubscribe();\n            }\n        }\n    };\n    SafeSubscriber.prototype.error = function (err) {\n        if (!this.isStopped) {\n            var _parentSubscriber = this._parentSubscriber;\n            var useDeprecatedSynchronousErrorHandling = config.useDeprecatedSynchronousErrorHandling;\n            if (this._error) {\n                if (!useDeprecatedSynchronousErrorHandling || !_parentSubscriber.syncErrorThrowable) {\n                    this.__tryOrUnsub(this._error, err);\n                    this.unsubscribe();\n                }\n                else {\n                    this.__tryOrSetError(_parentSubscriber, this._error, err);\n                    this.unsubscribe();\n                }\n            }\n            else if (!_parentSubscriber.syncErrorThrowable) {\n                this.unsubscribe();\n                if (useDeprecatedSynchronousErrorHandling) {\n                    throw err;\n                }\n                hostReportError(err);\n            }\n            else {\n                if (useDeprecatedSynchronousErrorHandling) {\n                    _parentSubscriber.syncErrorValue = err;\n                    _parentSubscriber.syncErrorThrown = true;\n                }\n                else {\n                    hostReportError(err);\n                }\n                this.unsubscribe();\n            }\n        }\n    };\n    SafeSubscriber.prototype.complete = function () {\n        var _this = this;\n        if (!this.isStopped) {\n            var _parentSubscriber = this._parentSubscriber;\n            if (this._complete) {\n                var wrappedComplete = function () { return _this._complete.call(_this._context); };\n                if (!config.useDeprecatedSynchronousErrorHandling || !_parentSubscriber.syncErrorThrowable) {\n                    this.__tryOrUnsub(wrappedComplete);\n                    this.unsubscribe();\n                }\n                else {\n                    this.__tryOrSetError(_parentSubscriber, wrappedComplete);\n                    this.unsubscribe();\n                }\n            }\n            else {\n                this.unsubscribe();\n            }\n        }\n    };\n    SafeSubscriber.prototype.__tryOrUnsub = function (fn, value) {\n        try {\n            fn.call(this._context, value);\n        }\n        catch (err) {\n            this.unsubscribe();\n            if (config.useDeprecatedSynchronousErrorHandling) {\n                throw err;\n            }\n            else {\n                hostReportError(err);\n            }\n        }\n    };\n    SafeSubscriber.prototype.__tryOrSetError = function (parent, fn, value) {\n        if (!config.useDeprecatedSynchronousErrorHandling) {\n            throw new Error('bad call');\n        }\n        try {\n            fn.call(this._context, value);\n        }\n        catch (err) {\n            if (config.useDeprecatedSynchronousErrorHandling) {\n                parent.syncErrorValue = err;\n                parent.syncErrorThrown = true;\n                return true;\n            }\n            else {\n                hostReportError(err);\n                return true;\n            }\n        }\n        return false;\n    };\n    /** @deprecated This is an internal implementation detail, do not use. */\n    SafeSubscriber.prototype._unsubscribe = function () {\n        var _parentSubscriber = this._parentSubscriber;\n        this._context = null;\n        this._parentSubscriber = null;\n        _parentSubscriber.unsubscribe();\n    };\n    return SafeSubscriber;\n}(Subscriber));\nfunction isTrustedSubscriber(obj) {\n    return obj instanceof Subscriber || ('syncErrorThrowable' in obj && obj[rxSubscriberSymbol]);\n}\n//# sourceMappingURL=Subscriber.js.map\n","/** Symbol.observable or a string \"@@observable\". Used for interop */\n/** PURE_IMPORTS_START  PURE_IMPORTS_END */\nexport var observable = typeof Symbol === 'function' && Symbol.observable || '@@observable';\n//# sourceMappingURL=observable.js.map\n","/* tslint:disable:no-empty */\n/** PURE_IMPORTS_START  PURE_IMPORTS_END */\nexport function noop() { }\n//# sourceMappingURL=noop.js.map\n","/** PURE_IMPORTS_START _util_toSubscriber,_internal_symbol_observable,_util_pipe,_config PURE_IMPORTS_END */\nimport { toSubscriber } from './util/toSubscriber';\nimport { observable as Symbol_observable } from '../internal/symbol/observable';\nimport { pipeFromArray } from './util/pipe';\nimport { config } from './config';\n/**\n * A representation of any set of values over any amount of time. This is the most basic building block\n * of RxJS.\n *\n * @class Observable<T>\n */\nvar Observable = /*@__PURE__*/ (function () {\n    /**\n     * @constructor\n     * @param {Function} subscribe the function that is called when the Observable is\n     * initially subscribed to. This function is given a Subscriber, to which new values\n     * can be `next`ed, or an `error` method can be called to raise an error, or\n     * `complete` can be called to notify of a successful completion.\n     */\n    function Observable(subscribe) {\n        /** Internal implementation detail, do not use directly. */\n        this._isScalar = false;\n        if (subscribe) {\n            this._subscribe = subscribe;\n        }\n    }\n    /**\n     * Creates a new Observable, with this Observable as the source, and the passed\n     * operator defined as the new observable's operator.\n     * @method lift\n     * @param {Operator} operator the operator defining the operation to take on the observable\n     * @return {Observable} a new observable with the Operator applied\n     */\n    Observable.prototype.lift = function (operator) {\n        var observable = new Observable();\n        observable.source = this;\n        observable.operator = operator;\n        return observable;\n    };\n    /**\n     * Invokes an execution of an Observable and registers Observer handlers for notifications it will emit.\n     *\n     * <span class=\"informal\">Use it when you have all these Observables, but still nothing is happening.</span>\n     *\n     * `subscribe` is not a regular operator, but a method that calls Observable's internal `subscribe` function. It\n     * might be for example a function that you passed to a {@link create} static factory, but most of the time it is\n     * a library implementation, which defines what and when will be emitted by an Observable. This means that calling\n     * `subscribe` is actually the moment when Observable starts its work, not when it is created, as it is often\n     * thought.\n     *\n     * Apart from starting the execution of an Observable, this method allows you to listen for values\n     * that an Observable emits, as well as for when it completes or errors. You can achieve this in two\n     * following ways.\n     *\n     * The first way is creating an object that implements {@link Observer} interface. It should have methods\n     * defined by that interface, but note that it should be just a regular JavaScript object, which you can create\n     * yourself in any way you want (ES6 class, classic function constructor, object literal etc.). In particular do\n     * not attempt to use any RxJS implementation details to create Observers - you don't need them. Remember also\n     * that your object does not have to implement all methods. If you find yourself creating a method that doesn't\n     * do anything, you can simply omit it. Note however, that if `error` method is not provided, all errors will\n     * be left uncaught.\n     *\n     * The second way is to give up on Observer object altogether and simply provide callback functions in place of its methods.\n     * This means you can provide three functions as arguments to `subscribe`, where first function is equivalent\n     * of a `next` method, second of an `error` method and third of a `complete` method. Just as in case of Observer,\n     * if you do not need to listen for something, you can omit a function, preferably by passing `undefined` or `null`,\n     * since `subscribe` recognizes these functions by where they were placed in function call. When it comes\n     * to `error` function, just as before, if not provided, errors emitted by an Observable will be thrown.\n     *\n     * Whatever style of calling `subscribe` you use, in both cases it returns a Subscription object.\n     * This object allows you to call `unsubscribe` on it, which in turn will stop work that an Observable does and will clean\n     * up all resources that an Observable used. Note that cancelling a subscription will not call `complete` callback\n     * provided to `subscribe` function, which is reserved for a regular completion signal that comes from an Observable.\n     *\n     * Remember that callbacks provided to `subscribe` are not guaranteed to be called asynchronously.\n     * It is an Observable itself that decides when these functions will be called. For example {@link of}\n     * by default emits all its values synchronously. Always check documentation for how given Observable\n     * will behave when subscribed and if its default behavior can be modified with a {@link Scheduler}.\n     *\n     * @example <caption>Subscribe with an Observer</caption>\n     * const sumObserver = {\n     *   sum: 0,\n     *   next(value) {\n     *     console.log('Adding: ' + value);\n     *     this.sum = this.sum + value;\n     *   },\n     *   error() { // We actually could just remove this method,\n     *   },        // since we do not really care about errors right now.\n     *   complete() {\n     *     console.log('Sum equals: ' + this.sum);\n     *   }\n     * };\n     *\n     * Rx.Observable.of(1, 2, 3) // Synchronously emits 1, 2, 3 and then completes.\n     * .subscribe(sumObserver);\n     *\n     * // Logs:\n     * // \"Adding: 1\"\n     * // \"Adding: 2\"\n     * // \"Adding: 3\"\n     * // \"Sum equals: 6\"\n     *\n     *\n     * @example <caption>Subscribe with functions</caption>\n     * let sum = 0;\n     *\n     * Rx.Observable.of(1, 2, 3)\n     * .subscribe(\n     *   function(value) {\n     *     console.log('Adding: ' + value);\n     *     sum = sum + value;\n     *   },\n     *   undefined,\n     *   function() {\n     *     console.log('Sum equals: ' + sum);\n     *   }\n     * );\n     *\n     * // Logs:\n     * // \"Adding: 1\"\n     * // \"Adding: 2\"\n     * // \"Adding: 3\"\n     * // \"Sum equals: 6\"\n     *\n     *\n     * @example <caption>Cancel a subscription</caption>\n     * const subscription = Rx.Observable.interval(1000).subscribe(\n     *   num => console.log(num),\n     *   undefined,\n     *   () => console.log('completed!') // Will not be called, even\n     * );                                // when cancelling subscription\n     *\n     *\n     * setTimeout(() => {\n     *   subscription.unsubscribe();\n     *   console.log('unsubscribed!');\n     * }, 2500);\n     *\n     * // Logs:\n     * // 0 after 1s\n     * // 1 after 2s\n     * // \"unsubscribed!\" after 2.5s\n     *\n     *\n     * @param {Observer|Function} observerOrNext (optional) Either an observer with methods to be called,\n     *  or the first of three possible handlers, which is the handler for each value emitted from the subscribed\n     *  Observable.\n     * @param {Function} error (optional) A handler for a terminal event resulting from an error. If no error handler is provided,\n     *  the error will be thrown as unhandled.\n     * @param {Function} complete (optional) A handler for a terminal event resulting from successful completion.\n     * @return {ISubscription} a subscription reference to the registered handlers\n     * @method subscribe\n     */\n    Observable.prototype.subscribe = function (observerOrNext, error, complete) {\n        var operator = this.operator;\n        var sink = toSubscriber(observerOrNext, error, complete);\n        if (operator) {\n            operator.call(sink, this.source);\n        }\n        else {\n            sink.add(this.source || !sink.syncErrorThrowable ? this._subscribe(sink) : this._trySubscribe(sink));\n        }\n        if (config.useDeprecatedSynchronousErrorHandling) {\n            if (sink.syncErrorThrowable) {\n                sink.syncErrorThrowable = false;\n                if (sink.syncErrorThrown) {\n                    throw sink.syncErrorValue;\n                }\n            }\n        }\n        return sink;\n    };\n    /** @deprecated This is an internal implementation detail, do not use. */\n    Observable.prototype._trySubscribe = function (sink) {\n        try {\n            return this._subscribe(sink);\n        }\n        catch (err) {\n            if (config.useDeprecatedSynchronousErrorHandling) {\n                sink.syncErrorThrown = true;\n                sink.syncErrorValue = err;\n            }\n            sink.error(err);\n        }\n    };\n    /**\n     * @method forEach\n     * @param {Function} next a handler for each value emitted by the observable\n     * @param {PromiseConstructor} [promiseCtor] a constructor function used to instantiate the Promise\n     * @return {Promise} a promise that either resolves on observable completion or\n     *  rejects with the handled error\n     */\n    Observable.prototype.forEach = function (next, promiseCtor) {\n        var _this = this;\n        promiseCtor = getPromiseCtor(promiseCtor);\n        return new promiseCtor(function (resolve, reject) {\n            // Must be declared in a separate statement to avoid a RefernceError when\n            // accessing subscription below in the closure due to Temporal Dead Zone.\n            var subscription;\n            subscription = _this.subscribe(function (value) {\n                try {\n                    next(value);\n                }\n                catch (err) {\n                    reject(err);\n                    if (subscription) {\n                        subscription.unsubscribe();\n                    }\n                }\n            }, reject, resolve);\n        });\n    };\n    /** @deprecated This is an internal implementation detail, do not use. */\n    Observable.prototype._subscribe = function (subscriber) {\n        var source = this.source;\n        return source && source.subscribe(subscriber);\n    };\n    /**\n     * An interop point defined by the es7-observable spec https://github.com/zenparsing/es-observable\n     * @method Symbol.observable\n     * @return {Observable} this instance of the observable\n     */\n    Observable.prototype[Symbol_observable] = function () {\n        return this;\n    };\n    /* tslint:enable:max-line-length */\n    /**\n     * Used to stitch together functional operators into a chain.\n     * @method pipe\n     * @return {Observable} the Observable result of all of the operators having\n     * been called in the order they were passed in.\n     *\n     * @example\n     *\n     * import { map, filter, scan } from 'rxjs/operators';\n     *\n     * Rx.Observable.interval(1000)\n     *   .pipe(\n     *     filter(x => x % 2 === 0),\n     *     map(x => x + x),\n     *     scan((acc, x) => acc + x)\n     *   )\n     *   .subscribe(x => console.log(x))\n     */\n    Observable.prototype.pipe = function () {\n        var operations = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            operations[_i] = arguments[_i];\n        }\n        if (operations.length === 0) {\n            return this;\n        }\n        return pipeFromArray(operations)(this);\n    };\n    /* tslint:enable:max-line-length */\n    Observable.prototype.toPromise = function (promiseCtor) {\n        var _this = this;\n        promiseCtor = getPromiseCtor(promiseCtor);\n        return new promiseCtor(function (resolve, reject) {\n            var value;\n            _this.subscribe(function (x) { return value = x; }, function (err) { return reject(err); }, function () { return resolve(value); });\n        });\n    };\n    // HACK: Since TypeScript inherits static properties too, we have to\n    // fight against TypeScript here so Subject can have a different static create signature\n    /**\n     * Creates a new cold Observable by calling the Observable constructor\n     * @static true\n     * @owner Observable\n     * @method create\n     * @param {Function} subscribe? the subscriber function to be passed to the Observable constructor\n     * @return {Observable} a new cold observable\n     * @nocollapse\n     */\n    Observable.create = function (subscribe) {\n        return new Observable(subscribe);\n    };\n    return Observable;\n}());\nexport { Observable };\n/**\n * Decides between a passed promise constructor from consuming code,\n * A default configured promise constructor, and the native promise\n * constructor and returns it. If nothing can be found, it will throw\n * an error.\n * @param promiseCtor The optional promise constructor to passed by consuming code\n */\nfunction getPromiseCtor(promiseCtor) {\n    if (!promiseCtor) {\n        promiseCtor = config.Promise || Promise;\n    }\n    if (!promiseCtor) {\n        throw new Error('no Promise impl found');\n    }\n    return promiseCtor;\n}\n//# sourceMappingURL=Observable.js.map\n","/** PURE_IMPORTS_START _Subscriber,_symbol_rxSubscriber,_Observer PURE_IMPORTS_END */\nimport { Subscriber } from '../Subscriber';\nimport { rxSubscriber as rxSubscriberSymbol } from '../symbol/rxSubscriber';\nimport { empty as emptyObserver } from '../Observer';\nexport function toSubscriber(nextOrObserver, error, complete) {\n    if (nextOrObserver) {\n        if (nextOrObserver instanceof Subscriber) {\n            return nextOrObserver;\n        }\n        if (nextOrObserver[rxSubscriberSymbol]) {\n            return nextOrObserver[rxSubscriberSymbol]();\n        }\n    }\n    if (!nextOrObserver && !error && !complete) {\n        return new Subscriber(emptyObserver);\n    }\n    return new Subscriber(nextOrObserver, error, complete);\n}\n//# sourceMappingURL=toSubscriber.js.map\n","/** PURE_IMPORTS_START _noop PURE_IMPORTS_END */\nimport { noop } from './noop';\n/* tslint:enable:max-line-length */\nexport function pipe() {\n    var fns = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        fns[_i] = arguments[_i];\n    }\n    return pipeFromArray(fns);\n}\n/* @internal */\nexport function pipeFromArray(fns) {\n    if (!fns) {\n        return noop;\n    }\n    if (fns.length === 1) {\n        return fns[0];\n    }\n    return function piped(input) {\n        return fns.reduce(function (prev, fn) { return fn(prev); }, input);\n    };\n}\n//# sourceMappingURL=pipe.js.map\n","/** PURE_IMPORTS_START tslib PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\n/**\n * An error thrown when an action is invalid because the object has been\n * unsubscribed.\n *\n * @see {@link Subject}\n * @see {@link BehaviorSubject}\n *\n * @class ObjectUnsubscribedError\n */\nvar ObjectUnsubscribedError = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(ObjectUnsubscribedError, _super);\n    function ObjectUnsubscribedError() {\n        var _this = _super.call(this, 'object unsubscribed') || this;\n        _this.name = 'ObjectUnsubscribedError';\n        Object.setPrototypeOf(_this, ObjectUnsubscribedError.prototype);\n        return _this;\n    }\n    return ObjectUnsubscribedError;\n}(Error));\nexport { ObjectUnsubscribedError };\n//# sourceMappingURL=ObjectUnsubscribedError.js.map\n","/** PURE_IMPORTS_START tslib,_Subscription PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscription } from './Subscription';\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SubjectSubscription = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(SubjectSubscription, _super);\n    function SubjectSubscription(subject, subscriber) {\n        var _this = _super.call(this) || this;\n        _this.subject = subject;\n        _this.subscriber = subscriber;\n        _this.closed = false;\n        return _this;\n    }\n    SubjectSubscription.prototype.unsubscribe = function () {\n        if (this.closed) {\n            return;\n        }\n        this.closed = true;\n        var subject = this.subject;\n        var observers = subject.observers;\n        this.subject = null;\n        if (!observers || observers.length === 0 || subject.isStopped || subject.closed) {\n            return;\n        }\n        var subscriberIndex = observers.indexOf(this.subscriber);\n        if (subscriberIndex !== -1) {\n            observers.splice(subscriberIndex, 1);\n        }\n    };\n    return SubjectSubscription;\n}(Subscription));\nexport { SubjectSubscription };\n//# sourceMappingURL=SubjectSubscription.js.map\n","/** PURE_IMPORTS_START tslib,_Observable,_Subscriber,_Subscription,_util_ObjectUnsubscribedError,_SubjectSubscription,_internal_symbol_rxSubscriber PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Observable } from './Observable';\nimport { Subscriber } from './Subscriber';\nimport { Subscription } from './Subscription';\nimport { ObjectUnsubscribedError } from './util/ObjectUnsubscribedError';\nimport { SubjectSubscription } from './SubjectSubscription';\nimport { rxSubscriber as rxSubscriberSymbol } from '../internal/symbol/rxSubscriber';\n/**\n * @class SubjectSubscriber<T>\n */\nvar SubjectSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(SubjectSubscriber, _super);\n    function SubjectSubscriber(destination) {\n        var _this = _super.call(this, destination) || this;\n        _this.destination = destination;\n        return _this;\n    }\n    return SubjectSubscriber;\n}(Subscriber));\nexport { SubjectSubscriber };\n/**\n * @class Subject<T>\n */\nvar Subject = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(Subject, _super);\n    function Subject() {\n        var _this = _super.call(this) || this;\n        _this.observers = [];\n        _this.closed = false;\n        _this.isStopped = false;\n        _this.hasError = false;\n        _this.thrownError = null;\n        return _this;\n    }\n    Subject.prototype[rxSubscriberSymbol] = function () {\n        return new SubjectSubscriber(this);\n    };\n    Subject.prototype.lift = function (operator) {\n        var subject = new AnonymousSubject(this, this);\n        subject.operator = operator;\n        return subject;\n    };\n    Subject.prototype.next = function (value) {\n        if (this.closed) {\n            throw new ObjectUnsubscribedError();\n        }\n        if (!this.isStopped) {\n            var observers = this.observers;\n            var len = observers.length;\n            var copy = observers.slice();\n            for (var i = 0; i < len; i++) {\n                copy[i].next(value);\n            }\n        }\n    };\n    Subject.prototype.error = function (err) {\n        if (this.closed) {\n            throw new ObjectUnsubscribedError();\n        }\n        this.hasError = true;\n        this.thrownError = err;\n        this.isStopped = true;\n        var observers = this.observers;\n        var len = observers.length;\n        var copy = observers.slice();\n        for (var i = 0; i < len; i++) {\n            copy[i].error(err);\n        }\n        this.observers.length = 0;\n    };\n    Subject.prototype.complete = function () {\n        if (this.closed) {\n            throw new ObjectUnsubscribedError();\n        }\n        this.isStopped = true;\n        var observers = this.observers;\n        var len = observers.length;\n        var copy = observers.slice();\n        for (var i = 0; i < len; i++) {\n            copy[i].complete();\n        }\n        this.observers.length = 0;\n    };\n    Subject.prototype.unsubscribe = function () {\n        this.isStopped = true;\n        this.closed = true;\n        this.observers = null;\n    };\n    /** @deprecated This is an internal implementation detail, do not use. */\n    Subject.prototype._trySubscribe = function (subscriber) {\n        if (this.closed) {\n            throw new ObjectUnsubscribedError();\n        }\n        else {\n            return _super.prototype._trySubscribe.call(this, subscriber);\n        }\n    };\n    /** @deprecated This is an internal implementation detail, do not use. */\n    Subject.prototype._subscribe = function (subscriber) {\n        if (this.closed) {\n            throw new ObjectUnsubscribedError();\n        }\n        else if (this.hasError) {\n            subscriber.error(this.thrownError);\n            return Subscription.EMPTY;\n        }\n        else if (this.isStopped) {\n            subscriber.complete();\n            return Subscription.EMPTY;\n        }\n        else {\n            this.observers.push(subscriber);\n            return new SubjectSubscription(this, subscriber);\n        }\n    };\n    Subject.prototype.asObservable = function () {\n        var observable = new Observable();\n        observable.source = this;\n        return observable;\n    };\n    /**@nocollapse */\n    Subject.create = function (destination, source) {\n        return new AnonymousSubject(destination, source);\n    };\n    return Subject;\n}(Observable));\nexport { Subject };\n/**\n * @class AnonymousSubject<T>\n */\nvar AnonymousSubject = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(AnonymousSubject, _super);\n    function AnonymousSubject(destination, source) {\n        var _this = _super.call(this) || this;\n        _this.destination = destination;\n        _this.source = source;\n        return _this;\n    }\n    AnonymousSubject.prototype.next = function (value) {\n        var destination = this.destination;\n        if (destination && destination.next) {\n            destination.next(value);\n        }\n    };\n    AnonymousSubject.prototype.error = function (err) {\n        var destination = this.destination;\n        if (destination && destination.error) {\n            this.destination.error(err);\n        }\n    };\n    AnonymousSubject.prototype.complete = function () {\n        var destination = this.destination;\n        if (destination && destination.complete) {\n            this.destination.complete();\n        }\n    };\n    /** @deprecated This is an internal implementation detail, do not use. */\n    AnonymousSubject.prototype._subscribe = function (subscriber) {\n        var source = this.source;\n        if (source) {\n            return this.source.subscribe(subscriber);\n        }\n        else {\n            return Subscription.EMPTY;\n        }\n    };\n    return AnonymousSubject;\n}(Subject));\nexport { AnonymousSubject };\n//# sourceMappingURL=Subject.js.map\n","/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\nexport function refCount() {\n    return function refCountOperatorFunction(source) {\n        return source.lift(new RefCountOperator(source));\n    };\n}\nvar RefCountOperator = /*@__PURE__*/ (function () {\n    function RefCountOperator(connectable) {\n        this.connectable = connectable;\n    }\n    RefCountOperator.prototype.call = function (subscriber, source) {\n        var connectable = this.connectable;\n        connectable._refCount++;\n        var refCounter = new RefCountSubscriber(subscriber, connectable);\n        var subscription = source.subscribe(refCounter);\n        if (!refCounter.closed) {\n            refCounter.connection = connectable.connect();\n        }\n        return subscription;\n    };\n    return RefCountOperator;\n}());\nvar RefCountSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(RefCountSubscriber, _super);\n    function RefCountSubscriber(destination, connectable) {\n        var _this = _super.call(this, destination) || this;\n        _this.connectable = connectable;\n        return _this;\n    }\n    RefCountSubscriber.prototype._unsubscribe = function () {\n        var connectable = this.connectable;\n        if (!connectable) {\n            this.connection = null;\n            return;\n        }\n        this.connectable = null;\n        var refCount = connectable._refCount;\n        if (refCount <= 0) {\n            this.connection = null;\n            return;\n        }\n        connectable._refCount = refCount - 1;\n        if (refCount > 1) {\n            this.connection = null;\n            return;\n        }\n        ///\n        // Compare the local RefCountSubscriber's connection Subscription to the\n        // connection Subscription on the shared ConnectableObservable. In cases\n        // where the ConnectableObservable source synchronously emits values, and\n        // the RefCountSubscriber's downstream Observers synchronously unsubscribe,\n        // execution continues to here before the RefCountOperator has a chance to\n        // supply the RefCountSubscriber with the shared connection Subscription.\n        // For example:\n        // ```\n        // Observable.range(0, 10)\n        //   .publish()\n        //   .refCount()\n        //   .take(5)\n        //   .subscribe();\n        // ```\n        // In order to account for this case, RefCountSubscriber should only dispose\n        // the ConnectableObservable's shared connection Subscription if the\n        // connection Subscription exists, *and* either:\n        //   a. RefCountSubscriber doesn't have a reference to the shared connection\n        //      Subscription yet, or,\n        //   b. RefCountSubscriber's connection Subscription reference is identical\n        //      to the shared connection Subscription\n        ///\n        var connection = this.connection;\n        var sharedConnection = connectable._connection;\n        this.connection = null;\n        if (sharedConnection && (!connection || sharedConnection === connection)) {\n            sharedConnection.unsubscribe();\n        }\n    };\n    return RefCountSubscriber;\n}(Subscriber));\n//# sourceMappingURL=refCount.js.map\n","/** PURE_IMPORTS_START tslib,_Subject,_Observable,_Subscriber,_Subscription,_operators_refCount PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { SubjectSubscriber } from '../Subject';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { refCount as higherOrderRefCount } from '../operators/refCount';\n/**\n * @class ConnectableObservable<T>\n */\nvar ConnectableObservable = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(ConnectableObservable, _super);\n    function ConnectableObservable(source, subjectFactory) {\n        var _this = _super.call(this) || this;\n        _this.source = source;\n        _this.subjectFactory = subjectFactory;\n        _this._refCount = 0;\n        /** @internal */\n        _this._isComplete = false;\n        return _this;\n    }\n    /** @deprecated This is an internal implementation detail, do not use. */\n    ConnectableObservable.prototype._subscribe = function (subscriber) {\n        return this.getSubject().subscribe(subscriber);\n    };\n    ConnectableObservable.prototype.getSubject = function () {\n        var subject = this._subject;\n        if (!subject || subject.isStopped) {\n            this._subject = this.subjectFactory();\n        }\n        return this._subject;\n    };\n    ConnectableObservable.prototype.connect = function () {\n        var connection = this._connection;\n        if (!connection) {\n            this._isComplete = false;\n            connection = this._connection = new Subscription();\n            connection.add(this.source\n                .subscribe(new ConnectableSubscriber(this.getSubject(), this)));\n            if (connection.closed) {\n                this._connection = null;\n                connection = Subscription.EMPTY;\n            }\n            else {\n                this._connection = connection;\n            }\n        }\n        return connection;\n    };\n    ConnectableObservable.prototype.refCount = function () {\n        return higherOrderRefCount()(this);\n    };\n    return ConnectableObservable;\n}(Observable));\nexport { ConnectableObservable };\nvar connectableProto = ConnectableObservable.prototype;\nexport var connectableObservableDescriptor = {\n    operator: { value: null },\n    _refCount: { value: 0, writable: true },\n    _subject: { value: null, writable: true },\n    _connection: { value: null, writable: true },\n    _subscribe: { value: connectableProto._subscribe },\n    _isComplete: { value: connectableProto._isComplete, writable: true },\n    getSubject: { value: connectableProto.getSubject },\n    connect: { value: connectableProto.connect },\n    refCount: { value: connectableProto.refCount }\n};\nvar ConnectableSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(ConnectableSubscriber, _super);\n    function ConnectableSubscriber(destination, connectable) {\n        var _this = _super.call(this, destination) || this;\n        _this.connectable = connectable;\n        return _this;\n    }\n    ConnectableSubscriber.prototype._error = function (err) {\n        this._unsubscribe();\n        _super.prototype._error.call(this, err);\n    };\n    ConnectableSubscriber.prototype._complete = function () {\n        this.connectable._isComplete = true;\n        this._unsubscribe();\n        _super.prototype._complete.call(this);\n    };\n    ConnectableSubscriber.prototype._unsubscribe = function () {\n        var connectable = this.connectable;\n        if (connectable) {\n            this.connectable = null;\n            var connection = connectable._connection;\n            connectable._refCount = 0;\n            connectable._subject = null;\n            connectable._connection = null;\n            if (connection) {\n                connection.unsubscribe();\n            }\n        }\n    };\n    return ConnectableSubscriber;\n}(SubjectSubscriber));\nvar RefCountOperator = /*@__PURE__*/ (function () {\n    function RefCountOperator(connectable) {\n        this.connectable = connectable;\n    }\n    RefCountOperator.prototype.call = function (subscriber, source) {\n        var connectable = this.connectable;\n        connectable._refCount++;\n        var refCounter = new RefCountSubscriber(subscriber, connectable);\n        var subscription = source.subscribe(refCounter);\n        if (!refCounter.closed) {\n            refCounter.connection = connectable.connect();\n        }\n        return subscription;\n    };\n    return RefCountOperator;\n}());\nvar RefCountSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(RefCountSubscriber, _super);\n    function RefCountSubscriber(destination, connectable) {\n        var _this = _super.call(this, destination) || this;\n        _this.connectable = connectable;\n        return _this;\n    }\n    RefCountSubscriber.prototype._unsubscribe = function () {\n        var connectable = this.connectable;\n        if (!connectable) {\n            this.connection = null;\n            return;\n        }\n        this.connectable = null;\n        var refCount = connectable._refCount;\n        if (refCount <= 0) {\n            this.connection = null;\n            return;\n        }\n        connectable._refCount = refCount - 1;\n        if (refCount > 1) {\n            this.connection = null;\n            return;\n        }\n        ///\n        // Compare the local RefCountSubscriber's connection Subscription to the\n        // connection Subscription on the shared ConnectableObservable. In cases\n        // where the ConnectableObservable source synchronously emits values, and\n        // the RefCountSubscriber's downstream Observers synchronously unsubscribe,\n        // execution continues to here before the RefCountOperator has a chance to\n        // supply the RefCountSubscriber with the shared connection Subscription.\n        // For example:\n        // ```\n        // Observable.range(0, 10)\n        //   .publish()\n        //   .refCount()\n        //   .take(5)\n        //   .subscribe();\n        // ```\n        // In order to account for this case, RefCountSubscriber should only dispose\n        // the ConnectableObservable's shared connection Subscription if the\n        // connection Subscription exists, *and* either:\n        //   a. RefCountSubscriber doesn't have a reference to the shared connection\n        //      Subscription yet, or,\n        //   b. RefCountSubscriber's connection Subscription reference is identical\n        //      to the shared connection Subscription\n        ///\n        var connection = this.connection;\n        var sharedConnection = connectable._connection;\n        this.connection = null;\n        if (sharedConnection && (!connection || sharedConnection === connection)) {\n            sharedConnection.unsubscribe();\n        }\n    };\n    return RefCountSubscriber;\n}(Subscriber));\n//# sourceMappingURL=ConnectableObservable.js.map\n","/** PURE_IMPORTS_START tslib,_Subscriber,_Subscription,_Observable,_Subject PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { Observable } from '../Observable';\nimport { Subject } from '../Subject';\n/* tslint:enable:max-line-length */\n/**\n * Groups the items emitted by an Observable according to a specified criterion,\n * and emits these grouped items as `GroupedObservables`, one\n * {@link GroupedObservable} per group.\n *\n * <img src=\"./img/groupBy.png\" width=\"100%\">\n *\n * @example <caption>Group objects by id and return as array</caption>\n * Observable.of<Obj>({id: 1, name: 'aze1'},\n *                    {id: 2, name: 'sf2'},\n *                    {id: 2, name: 'dg2'},\n *                    {id: 1, name: 'erg1'},\n *                    {id: 1, name: 'df1'},\n *                    {id: 2, name: 'sfqfb2'},\n *                    {id: 3, name: 'qfs3'},\n *                    {id: 2, name: 'qsgqsfg2'}\n *     )\n *     .groupBy(p => p.id)\n *     .flatMap( (group$) => group$.reduce((acc, cur) => [...acc, cur], []))\n *     .subscribe(p => console.log(p));\n *\n * // displays:\n * // [ { id: 1, name: 'aze1' },\n * //   { id: 1, name: 'erg1' },\n * //   { id: 1, name: 'df1' } ]\n * //\n * // [ { id: 2, name: 'sf2' },\n * //   { id: 2, name: 'dg2' },\n * //   { id: 2, name: 'sfqfb2' },\n * //   { id: 2, name: 'qsgqsfg2' } ]\n * //\n * // [ { id: 3, name: 'qfs3' } ]\n *\n * @example <caption>Pivot data on the id field</caption>\n * Observable.of<Obj>({id: 1, name: 'aze1'},\n *                    {id: 2, name: 'sf2'},\n *                    {id: 2, name: 'dg2'},\n *                    {id: 1, name: 'erg1'},\n *                    {id: 1, name: 'df1'},\n *                    {id: 2, name: 'sfqfb2'},\n *                    {id: 3, name: 'qfs1'},\n *                    {id: 2, name: 'qsgqsfg2'}\n *                   )\n *     .groupBy(p => p.id, p => p.name)\n *     .flatMap( (group$) => group$.reduce((acc, cur) => [...acc, cur], [\"\" + group$.key]))\n *     .map(arr => ({'id': parseInt(arr[0]), 'values': arr.slice(1)}))\n *     .subscribe(p => console.log(p));\n *\n * // displays:\n * // { id: 1, values: [ 'aze1', 'erg1', 'df1' ] }\n * // { id: 2, values: [ 'sf2', 'dg2', 'sfqfb2', 'qsgqsfg2' ] }\n * // { id: 3, values: [ 'qfs1' ] }\n *\n * @param {function(value: T): K} keySelector A function that extracts the key\n * for each item.\n * @param {function(value: T): R} [elementSelector] A function that extracts the\n * return element for each item.\n * @param {function(grouped: GroupedObservable<K,R>): Observable<any>} [durationSelector]\n * A function that returns an Observable to determine how long each group should\n * exist.\n * @return {Observable<GroupedObservable<K,R>>} An Observable that emits\n * GroupedObservables, each of which corresponds to a unique key value and each\n * of which emits those items from the source Observable that share that key\n * value.\n * @method groupBy\n * @owner Observable\n */\nexport function groupBy(keySelector, elementSelector, durationSelector, subjectSelector) {\n    return function (source) {\n        return source.lift(new GroupByOperator(keySelector, elementSelector, durationSelector, subjectSelector));\n    };\n}\nvar GroupByOperator = /*@__PURE__*/ (function () {\n    function GroupByOperator(keySelector, elementSelector, durationSelector, subjectSelector) {\n        this.keySelector = keySelector;\n        this.elementSelector = elementSelector;\n        this.durationSelector = durationSelector;\n        this.subjectSelector = subjectSelector;\n    }\n    GroupByOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new GroupBySubscriber(subscriber, this.keySelector, this.elementSelector, this.durationSelector, this.subjectSelector));\n    };\n    return GroupByOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar GroupBySubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(GroupBySubscriber, _super);\n    function GroupBySubscriber(destination, keySelector, elementSelector, durationSelector, subjectSelector) {\n        var _this = _super.call(this, destination) || this;\n        _this.keySelector = keySelector;\n        _this.elementSelector = elementSelector;\n        _this.durationSelector = durationSelector;\n        _this.subjectSelector = subjectSelector;\n        _this.groups = null;\n        _this.attemptedToUnsubscribe = false;\n        _this.count = 0;\n        return _this;\n    }\n    GroupBySubscriber.prototype._next = function (value) {\n        var key;\n        try {\n            key = this.keySelector(value);\n        }\n        catch (err) {\n            this.error(err);\n            return;\n        }\n        this._group(value, key);\n    };\n    GroupBySubscriber.prototype._group = function (value, key) {\n        var groups = this.groups;\n        if (!groups) {\n            groups = this.groups = new Map();\n        }\n        var group = groups.get(key);\n        var element;\n        if (this.elementSelector) {\n            try {\n                element = this.elementSelector(value);\n            }\n            catch (err) {\n                this.error(err);\n            }\n        }\n        else {\n            element = value;\n        }\n        if (!group) {\n            group = (this.subjectSelector ? this.subjectSelector() : new Subject());\n            groups.set(key, group);\n            var groupedObservable = new GroupedObservable(key, group, this);\n            this.destination.next(groupedObservable);\n            if (this.durationSelector) {\n                var duration = void 0;\n                try {\n                    duration = this.durationSelector(new GroupedObservable(key, group));\n                }\n                catch (err) {\n                    this.error(err);\n                    return;\n                }\n                this.add(duration.subscribe(new GroupDurationSubscriber(key, group, this)));\n            }\n        }\n        if (!group.closed) {\n            group.next(element);\n        }\n    };\n    GroupBySubscriber.prototype._error = function (err) {\n        var groups = this.groups;\n        if (groups) {\n            groups.forEach(function (group, key) {\n                group.error(err);\n            });\n            groups.clear();\n        }\n        this.destination.error(err);\n    };\n    GroupBySubscriber.prototype._complete = function () {\n        var groups = this.groups;\n        if (groups) {\n            groups.forEach(function (group, key) {\n                group.complete();\n            });\n            groups.clear();\n        }\n        this.destination.complete();\n    };\n    GroupBySubscriber.prototype.removeGroup = function (key) {\n        this.groups.delete(key);\n    };\n    GroupBySubscriber.prototype.unsubscribe = function () {\n        if (!this.closed) {\n            this.attemptedToUnsubscribe = true;\n            if (this.count === 0) {\n                _super.prototype.unsubscribe.call(this);\n            }\n        }\n    };\n    return GroupBySubscriber;\n}(Subscriber));\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar GroupDurationSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(GroupDurationSubscriber, _super);\n    function GroupDurationSubscriber(key, group, parent) {\n        var _this = _super.call(this, group) || this;\n        _this.key = key;\n        _this.group = group;\n        _this.parent = parent;\n        return _this;\n    }\n    GroupDurationSubscriber.prototype._next = function (value) {\n        this.complete();\n    };\n    /** @deprecated This is an internal implementation detail, do not use. */\n    GroupDurationSubscriber.prototype._unsubscribe = function () {\n        var _a = this, parent = _a.parent, key = _a.key;\n        this.key = this.parent = null;\n        if (parent) {\n            parent.removeGroup(key);\n        }\n    };\n    return GroupDurationSubscriber;\n}(Subscriber));\n/**\n * An Observable representing values belonging to the same group represented by\n * a common key. The values emitted by a GroupedObservable come from the source\n * Observable. The common key is available as the field `key` on a\n * GroupedObservable instance.\n *\n * @class GroupedObservable<K, T>\n */\nvar GroupedObservable = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(GroupedObservable, _super);\n    /** @deprecated Do not construct this type. Internal use only */\n    function GroupedObservable(key, groupSubject, refCountSubscription) {\n        var _this = _super.call(this) || this;\n        _this.key = key;\n        _this.groupSubject = groupSubject;\n        _this.refCountSubscription = refCountSubscription;\n        return _this;\n    }\n    /** @deprecated This is an internal implementation detail, do not use. */\n    GroupedObservable.prototype._subscribe = function (subscriber) {\n        var subscription = new Subscription();\n        var _a = this, refCountSubscription = _a.refCountSubscription, groupSubject = _a.groupSubject;\n        if (refCountSubscription && !refCountSubscription.closed) {\n            subscription.add(new InnerRefCountSubscription(refCountSubscription));\n        }\n        subscription.add(groupSubject.subscribe(subscriber));\n        return subscription;\n    };\n    return GroupedObservable;\n}(Observable));\nexport { GroupedObservable };\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar InnerRefCountSubscription = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(InnerRefCountSubscription, _super);\n    function InnerRefCountSubscription(parent) {\n        var _this = _super.call(this) || this;\n        _this.parent = parent;\n        parent.count++;\n        return _this;\n    }\n    InnerRefCountSubscription.prototype.unsubscribe = function () {\n        var parent = this.parent;\n        if (!parent.closed && !this.closed) {\n            _super.prototype.unsubscribe.call(this);\n            parent.count -= 1;\n            if (parent.count === 0 && parent.attemptedToUnsubscribe) {\n                parent.unsubscribe();\n            }\n        }\n    };\n    return InnerRefCountSubscription;\n}(Subscription));\n//# sourceMappingURL=groupBy.js.map\n","/** PURE_IMPORTS_START tslib,_AsyncAction PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { AsyncAction } from './AsyncAction';\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar QueueAction = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(QueueAction, _super);\n    function QueueAction(scheduler, work) {\n        var _this = _super.call(this, scheduler, work) || this;\n        _this.scheduler = scheduler;\n        _this.work = work;\n        return _this;\n    }\n    QueueAction.prototype.schedule = function (state, delay) {\n        if (delay === void 0) {\n            delay = 0;\n        }\n        if (delay > 0) {\n            return _super.prototype.schedule.call(this, state, delay);\n        }\n        this.delay = delay;\n        this.state = state;\n        this.scheduler.flush(this);\n        return this;\n    };\n    QueueAction.prototype.execute = function (state, delay) {\n        return (delay > 0 || this.closed) ?\n            _super.prototype.execute.call(this, state, delay) :\n            this._execute(state, delay);\n    };\n    QueueAction.prototype.requestAsyncId = function (scheduler, id, delay) {\n        if (delay === void 0) {\n            delay = 0;\n        }\n        // If delay exists and is greater than 0, or if the delay is null (the\n        // action wasn't rescheduled) but was originally scheduled as an async\n        // action, then recycle as an async action.\n        if ((delay !== null && delay > 0) || (delay === null && this.delay > 0)) {\n            return _super.prototype.requestAsyncId.call(this, scheduler, id, delay);\n        }\n        // Otherwise flush the scheduler starting with this action.\n        return scheduler.flush(this);\n    };\n    return QueueAction;\n}(AsyncAction));\nexport { QueueAction };\n//# sourceMappingURL=QueueAction.js.map\n","/** PURE_IMPORTS_START tslib,_Action PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Action } from './Action';\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar AsyncAction = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(AsyncAction, _super);\n    function AsyncAction(scheduler, work) {\n        var _this = _super.call(this, scheduler, work) || this;\n        _this.scheduler = scheduler;\n        _this.work = work;\n        _this.pending = false;\n        return _this;\n    }\n    AsyncAction.prototype.schedule = function (state, delay) {\n        if (delay === void 0) {\n            delay = 0;\n        }\n        if (this.closed) {\n            return this;\n        }\n        // Always replace the current state with the new state.\n        this.state = state;\n        var id = this.id;\n        var scheduler = this.scheduler;\n        //\n        // Important implementation note:\n        //\n        // Actions only execute once by default, unless rescheduled from within the\n        // scheduled callback. This allows us to implement single and repeat\n        // actions via the same code path, without adding API surface area, as well\n        // as mimic traditional recursion but across asynchronous boundaries.\n        //\n        // However, JS runtimes and timers distinguish between intervals achieved by\n        // serial `setTimeout` calls vs. a single `setInterval` call. An interval of\n        // serial `setTimeout` calls can be individually delayed, which delays\n        // scheduling the next `setTimeout`, and so on. `setInterval` attempts to\n        // guarantee the interval callback will be invoked more precisely to the\n        // interval period, regardless of load.\n        //\n        // Therefore, we use `setInterval` to schedule single and repeat actions.\n        // If the action reschedules itself with the same delay, the interval is not\n        // canceled. If the action doesn't reschedule, or reschedules with a\n        // different delay, the interval will be canceled after scheduled callback\n        // execution.\n        //\n        if (id != null) {\n            this.id = this.recycleAsyncId(scheduler, id, delay);\n        }\n        // Set the pending flag indicating that this action has been scheduled, or\n        // has recursively rescheduled itself.\n        this.pending = true;\n        this.delay = delay;\n        // If this action has already an async Id, don't request a new one.\n        this.id = this.id || this.requestAsyncId(scheduler, this.id, delay);\n        return this;\n    };\n    AsyncAction.prototype.requestAsyncId = function (scheduler, id, delay) {\n        if (delay === void 0) {\n            delay = 0;\n        }\n        return setInterval(scheduler.flush.bind(scheduler, this), delay);\n    };\n    AsyncAction.prototype.recycleAsyncId = function (scheduler, id, delay) {\n        if (delay === void 0) {\n            delay = 0;\n        }\n        // If this action is rescheduled with the same delay time, don't clear the interval id.\n        if (delay !== null && this.delay === delay && this.pending === false) {\n            return id;\n        }\n        // Otherwise, if the action's delay time is different from the current delay,\n        // or the action has been rescheduled before it's executed, clear the interval id\n        return clearInterval(id) && undefined || undefined;\n    };\n    /**\n     * Immediately executes this action and the `work` it contains.\n     * @return {any}\n     */\n    AsyncAction.prototype.execute = function (state, delay) {\n        if (this.closed) {\n            return new Error('executing a cancelled action');\n        }\n        this.pending = false;\n        var error = this._execute(state, delay);\n        if (error) {\n            return error;\n        }\n        else if (this.pending === false && this.id != null) {\n            // Dequeue if the action didn't reschedule itself. Don't call\n            // unsubscribe(), because the action could reschedule later.\n            // For example:\n            // ```\n            // scheduler.schedule(function doWork(counter) {\n            //   /* ... I'm a busy worker bee ... */\n            //   var originalAction = this;\n            //   /* wait 100ms before rescheduling the action */\n            //   setTimeout(function () {\n            //     originalAction.schedule(counter + 1);\n            //   }, 100);\n            // }, 1000);\n            // ```\n            this.id = this.recycleAsyncId(this.scheduler, this.id, null);\n        }\n    };\n    AsyncAction.prototype._execute = function (state, delay) {\n        var errored = false;\n        var errorValue = undefined;\n        try {\n            this.work(state);\n        }\n        catch (e) {\n            errored = true;\n            errorValue = !!e && e || new Error(e);\n        }\n        if (errored) {\n            this.unsubscribe();\n            return errorValue;\n        }\n    };\n    /** @deprecated This is an internal implementation detail, do not use. */\n    AsyncAction.prototype._unsubscribe = function () {\n        var id = this.id;\n        var scheduler = this.scheduler;\n        var actions = scheduler.actions;\n        var index = actions.indexOf(this);\n        this.work = null;\n        this.state = null;\n        this.pending = false;\n        this.scheduler = null;\n        if (index !== -1) {\n            actions.splice(index, 1);\n        }\n        if (id != null) {\n            this.id = this.recycleAsyncId(scheduler, id, null);\n        }\n        this.delay = null;\n    };\n    return AsyncAction;\n}(Action));\nexport { AsyncAction };\n//# sourceMappingURL=AsyncAction.js.map\n","/** PURE_IMPORTS_START tslib,_Subscription PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscription } from '../Subscription';\n/**\n * A unit of work to be executed in a {@link Scheduler}. An action is typically\n * created from within a Scheduler and an RxJS user does not need to concern\n * themselves about creating and manipulating an Action.\n *\n * ```ts\n * class Action<T> extends Subscription {\n *   new (scheduler: Scheduler, work: (state?: T) => void);\n *   schedule(state?: T, delay: number = 0): Subscription;\n * }\n * ```\n *\n * @class Action<T>\n */\nvar Action = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(Action, _super);\n    function Action(scheduler, work) {\n        return _super.call(this) || this;\n    }\n    /**\n     * Schedules this action on its parent Scheduler for execution. May be passed\n     * some context object, `state`. May happen at some point in the future,\n     * according to the `delay` parameter, if specified.\n     * @param {T} [state] Some contextual data that the `work` function uses when\n     * called by the Scheduler.\n     * @param {number} [delay] Time to wait before executing the work, where the\n     * time unit is implicit and defined by the Scheduler.\n     * @return {void}\n     */\n    Action.prototype.schedule = function (state, delay) {\n        if (delay === void 0) {\n            delay = 0;\n        }\n        return this;\n    };\n    return Action;\n}(Subscription));\nexport { Action };\n//# sourceMappingURL=Action.js.map\n","/**\n * An execution context and a data structure to order tasks and schedule their\n * execution. Provides a notion of (potentially virtual) time, through the\n * `now()` getter method.\n *\n * Each unit of work in a Scheduler is called an {@link Action}.\n *\n * ```ts\n * class Scheduler {\n *   now(): number;\n *   schedule(work, delay?, state?): Subscription;\n * }\n * ```\n *\n * @class Scheduler\n * @deprecated Scheduler is an internal implementation detail of RxJS, and\n * should not be used directly. Rather, create your own class and implement\n * {@link SchedulerLike}\n */\nvar Scheduler = /*@__PURE__*/ (function () {\n    function Scheduler(SchedulerAction, now) {\n        if (now === void 0) {\n            now = Scheduler.now;\n        }\n        this.SchedulerAction = SchedulerAction;\n        this.now = now;\n    }\n    /**\n     * Schedules a function, `work`, for execution. May happen at some point in\n     * the future, according to the `delay` parameter, if specified. May be passed\n     * some context object, `state`, which will be passed to the `work` function.\n     *\n     * The given arguments will be processed an stored as an Action object in a\n     * queue of actions.\n     *\n     * @param {function(state: ?T): ?Subscription} work A function representing a\n     * task, or some unit of work to be executed by the Scheduler.\n     * @param {number} [delay] Time to wait before executing the work, where the\n     * time unit is implicit and defined by the Scheduler itself.\n     * @param {T} [state] Some contextual data that the `work` function uses when\n     * called by the Scheduler.\n     * @return {Subscription} A subscription in order to be able to unsubscribe\n     * the scheduled work.\n     */\n    Scheduler.prototype.schedule = function (work, delay, state) {\n        if (delay === void 0) {\n            delay = 0;\n        }\n        return new this.SchedulerAction(this, work).schedule(state, delay);\n    };\n    /** @nocollapse */\n    Scheduler.now = Date.now ? Date.now : function () { return +new Date(); };\n    return Scheduler;\n}());\nexport { Scheduler };\n//# sourceMappingURL=Scheduler.js.map\n","/** PURE_IMPORTS_START _QueueAction,_QueueScheduler PURE_IMPORTS_END */\nimport { QueueAction } from './QueueAction';\nimport { QueueScheduler } from './QueueScheduler';\n/**\n *\n * Queue Scheduler\n *\n * <span class=\"informal\">Put every next task on a queue, instead of executing it immediately</span>\n *\n * `queue` scheduler, when used with delay, behaves the same as {@link async} scheduler.\n *\n * When used without delay, it schedules given task synchronously - executes it right when\n * it is scheduled. However when called recursively, that is when inside the scheduled task,\n * another task is scheduled with queue scheduler, instead of executing immediately as well,\n * that task will be put on a queue and wait for current one to finish.\n *\n * This means that when you execute task with `queue` scheduler, you are sure it will end\n * before any other task scheduled with that scheduler will start.\n *\n * @examples <caption>Schedule recursively first, then do something</caption>\n *\n * Rx.Scheduler.queue.schedule(() => {\n *   Rx.Scheduler.queue.schedule(() => console.log('second')); // will not happen now, but will be put on a queue\n *\n *   console.log('first');\n * });\n *\n * // Logs:\n * // \"first\"\n * // \"second\"\n *\n *\n * @example <caption>Reschedule itself recursively</caption>\n *\n * Rx.Scheduler.queue.schedule(function(state) {\n *   if (state !== 0) {\n *     console.log('before', state);\n *     this.schedule(state - 1); // `this` references currently executing Action,\n *                               // which we reschedule with new state\n *     console.log('after', state);\n *   }\n * }, 0, 3);\n *\n * // In scheduler that runs recursively, you would expect:\n * // \"before\", 3\n * // \"before\", 2\n * // \"before\", 1\n * // \"after\", 1\n * // \"after\", 2\n * // \"after\", 3\n *\n * // But with queue it logs:\n * // \"before\", 3\n * // \"after\", 3\n * // \"before\", 2\n * // \"after\", 2\n * // \"before\", 1\n * // \"after\", 1\n *\n *\n * @static true\n * @name queue\n * @owner Scheduler\n */\nexport var queue = /*@__PURE__*/ new QueueScheduler(QueueAction);\n//# sourceMappingURL=queue.js.map\n","/** PURE_IMPORTS_START tslib,_AsyncScheduler PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { AsyncScheduler } from './AsyncScheduler';\nvar QueueScheduler = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(QueueScheduler, _super);\n    function QueueScheduler() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    return QueueScheduler;\n}(AsyncScheduler));\nexport { QueueScheduler };\n//# sourceMappingURL=QueueScheduler.js.map\n","/** PURE_IMPORTS_START tslib,_Scheduler PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Scheduler } from '../Scheduler';\nvar AsyncScheduler = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(AsyncScheduler, _super);\n    function AsyncScheduler(SchedulerAction, now) {\n        if (now === void 0) {\n            now = Scheduler.now;\n        }\n        var _this = _super.call(this, SchedulerAction, function () {\n            if (AsyncScheduler.delegate && AsyncScheduler.delegate !== _this) {\n                return AsyncScheduler.delegate.now();\n            }\n            else {\n                return now();\n            }\n        }) || this;\n        _this.actions = [];\n        /**\n         * A flag to indicate whether the Scheduler is currently executing a batch of\n         * queued actions.\n         * @type {boolean}\n         * @deprecated internal use only\n         */\n        _this.active = false;\n        /**\n         * An internal ID used to track the latest asynchronous task such as those\n         * coming from `setTimeout`, `setInterval`, `requestAnimationFrame`, and\n         * others.\n         * @type {any}\n         * @deprecated internal use only\n         */\n        _this.scheduled = undefined;\n        return _this;\n    }\n    AsyncScheduler.prototype.schedule = function (work, delay, state) {\n        if (delay === void 0) {\n            delay = 0;\n        }\n        if (AsyncScheduler.delegate && AsyncScheduler.delegate !== this) {\n            return AsyncScheduler.delegate.schedule(work, delay, state);\n        }\n        else {\n            return _super.prototype.schedule.call(this, work, delay, state);\n        }\n    };\n    AsyncScheduler.prototype.flush = function (action) {\n        var actions = this.actions;\n        if (this.active) {\n            actions.push(action);\n            return;\n        }\n        var error;\n        this.active = true;\n        do {\n            if (error = action.execute(action.state, action.delay)) {\n                break;\n            }\n        } while (action = actions.shift()); // exhaust the scheduler queue\n        this.active = false;\n        if (error) {\n            while (action = actions.shift()) {\n                action.unsubscribe();\n            }\n            throw error;\n        }\n    };\n    return AsyncScheduler;\n}(Scheduler));\nexport { AsyncScheduler };\n//# sourceMappingURL=AsyncScheduler.js.map\n","/** PURE_IMPORTS_START _Observable PURE_IMPORTS_END */\nimport { Observable } from '../Observable';\n/**\n * The same Observable instance returned by any call to {@link empty} without a\n * {@link Scheduler}. It is preferrable to use this over `empty()`.\n */\nexport var EMPTY = /*@__PURE__*/ new Observable(function (subscriber) { return subscriber.complete(); });\n/**\n * Creates an Observable that emits no items to the Observer and immediately\n * emits a complete notification.\n *\n * <span class=\"informal\">Just emits 'complete', and nothing else.\n * </span>\n *\n * <img src=\"./img/empty.png\" width=\"100%\">\n *\n * This static operator is useful for creating a simple Observable that only\n * emits the complete notification. It can be used for composing with other\n * Observables, such as in a {@link mergeMap}.\n *\n * @example <caption>Emit the number 7, then complete.</caption>\n * var result = Rx.Observable.empty().startWith(7);\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Map and flatten only odd numbers to the sequence 'a', 'b', 'c'</caption>\n * var interval = Rx.Observable.interval(1000);\n * var result = interval.mergeMap(x =>\n *   x % 2 === 1 ? Rx.Observable.of('a', 'b', 'c') : Rx.Observable.empty()\n * );\n * result.subscribe(x => console.log(x));\n *\n * // Results in the following to the console:\n * // x is equal to the count on the interval eg(0,1,2,3,...)\n * // x will occur every 1000ms\n * // if x % 2 is equal to 1 print abc\n * // if x % 2 is not equal to 1 nothing will be output\n *\n * @see {@link create}\n * @see {@link never}\n * @see {@link of}\n * @see {@link throw}\n *\n * @param {Scheduler} [scheduler] A {@link IScheduler} to use for scheduling\n * the emission of the complete notification.\n * @return {Observable} An \"empty\" Observable: emits only the complete\n * notification.\n * @static true\n * @name empty\n * @owner Observable\n * @deprecated Deprecated in favor of using EMPTY constant.\n */\nexport function empty(scheduler) {\n    return scheduler ? emptyScheduled(scheduler) : EMPTY;\n}\nexport function emptyScheduled(scheduler) {\n    return new Observable(function (subscriber) { return scheduler.schedule(function () { return subscriber.complete(); }); });\n}\n//# sourceMappingURL=empty.js.map\n","/** PURE_IMPORTS_START  PURE_IMPORTS_END */\nexport function isScheduler(value) {\n    return value && typeof value.schedule === 'function';\n}\n//# sourceMappingURL=isScheduler.js.map\n","/**\n * Subscribes to an ArrayLike with a subscriber\n * @param array The array or array-like to subscribe to\n */\n/** PURE_IMPORTS_START  PURE_IMPORTS_END */\nexport var subscribeToArray = function (array) {\n    return function (subscriber) {\n        for (var i = 0, len = array.length; i < len && !subscriber.closed; i++) {\n            subscriber.next(array[i]);\n        }\n        if (!subscriber.closed) {\n            subscriber.complete();\n        }\n    };\n};\n//# sourceMappingURL=subscribeToArray.js.map\n","/** PURE_IMPORTS_START _Observable,_Subscription,_util_subscribeToArray PURE_IMPORTS_END */\nimport { Observable } from '../Observable';\nimport { Subscription } from '../Subscription';\nimport { subscribeToArray } from '../util/subscribeToArray';\nexport function fromArray(input, scheduler) {\n    if (!scheduler) {\n        return new Observable(subscribeToArray(input));\n    }\n    else {\n        return new Observable(function (subscriber) {\n            var sub = new Subscription();\n            var i = 0;\n            sub.add(scheduler.schedule(function () {\n                if (i === input.length) {\n                    subscriber.complete();\n                    return;\n                }\n                subscriber.next(input[i++]);\n                if (!subscriber.closed) {\n                    sub.add(this.schedule());\n                }\n            }));\n            return sub;\n        });\n    }\n}\n//# sourceMappingURL=fromArray.js.map\n","/** PURE_IMPORTS_START _observable_empty,_observable_of,_observable_throwError PURE_IMPORTS_END */\nimport { empty } from './observable/empty';\nimport { of } from './observable/of';\nimport { throwError } from './observable/throwError';\n/**\n * Represents a push-based event or value that an {@link Observable} can emit.\n * This class is particularly useful for operators that manage notifications,\n * like {@link materialize}, {@link dematerialize}, {@link observeOn}, and\n * others. Besides wrapping the actual delivered value, it also annotates it\n * with metadata of, for instance, what type of push message it is (`next`,\n * `error`, or `complete`).\n *\n * @see {@link materialize}\n * @see {@link dematerialize}\n * @see {@link observeOn}\n *\n * @class Notification<T>\n */\nvar Notification = /*@__PURE__*/ (function () {\n    function Notification(kind, value, error) {\n        this.kind = kind;\n        this.value = value;\n        this.error = error;\n        this.hasValue = kind === 'N';\n    }\n    /**\n     * Delivers to the given `observer` the value wrapped by this Notification.\n     * @param {Observer} observer\n     * @return\n     */\n    Notification.prototype.observe = function (observer) {\n        switch (this.kind) {\n            case 'N':\n                return observer.next && observer.next(this.value);\n            case 'E':\n                return observer.error && observer.error(this.error);\n            case 'C':\n                return observer.complete && observer.complete();\n        }\n    };\n    /**\n     * Given some {@link Observer} callbacks, deliver the value represented by the\n     * current Notification to the correctly corresponding callback.\n     * @param {function(value: T): void} next An Observer `next` callback.\n     * @param {function(err: any): void} [error] An Observer `error` callback.\n     * @param {function(): void} [complete] An Observer `complete` callback.\n     * @return {any}\n     */\n    Notification.prototype.do = function (next, error, complete) {\n        var kind = this.kind;\n        switch (kind) {\n            case 'N':\n                return next && next(this.value);\n            case 'E':\n                return error && error(this.error);\n            case 'C':\n                return complete && complete();\n        }\n    };\n    /**\n     * Takes an Observer or its individual callback functions, and calls `observe`\n     * or `do` methods accordingly.\n     * @param {Observer|function(value: T): void} nextOrObserver An Observer or\n     * the `next` callback.\n     * @param {function(err: any): void} [error] An Observer `error` callback.\n     * @param {function(): void} [complete] An Observer `complete` callback.\n     * @return {any}\n     */\n    Notification.prototype.accept = function (nextOrObserver, error, complete) {\n        if (nextOrObserver && typeof nextOrObserver.next === 'function') {\n            return this.observe(nextOrObserver);\n        }\n        else {\n            return this.do(nextOrObserver, error, complete);\n        }\n    };\n    /**\n     * Returns a simple Observable that just delivers the notification represented\n     * by this Notification instance.\n     * @return {any}\n     */\n    Notification.prototype.toObservable = function () {\n        var kind = this.kind;\n        switch (kind) {\n            case 'N':\n                return of(this.value);\n            case 'E':\n                return throwError(this.error);\n            case 'C':\n                return empty();\n        }\n        throw new Error('unexpected notification kind value');\n    };\n    /**\n     * A shortcut to create a Notification instance of the type `next` from a\n     * given value.\n     * @param {T} value The `next` value.\n     * @return {Notification<T>} The \"next\" Notification representing the\n     * argument.\n     * @nocollapse\n     */\n    Notification.createNext = function (value) {\n        if (typeof value !== 'undefined') {\n            return new Notification('N', value);\n        }\n        return Notification.undefinedValueNotification;\n    };\n    /**\n     * A shortcut to create a Notification instance of the type `error` from a\n     * given error.\n     * @param {any} [err] The `error` error.\n     * @return {Notification<T>} The \"error\" Notification representing the\n     * argument.\n     * @nocollapse\n     */\n    Notification.createError = function (err) {\n        return new Notification('E', undefined, err);\n    };\n    /**\n     * A shortcut to create a Notification instance of the type `complete`.\n     * @return {Notification<any>} The valueless \"complete\" Notification.\n     * @nocollapse\n     */\n    Notification.createComplete = function () {\n        return Notification.completeNotification;\n    };\n    Notification.completeNotification = new Notification('C');\n    Notification.undefinedValueNotification = new Notification('N', undefined);\n    return Notification;\n}());\nexport { Notification };\n//# sourceMappingURL=Notification.js.map\n","/** PURE_IMPORTS_START _Observable PURE_IMPORTS_END */\nimport { Observable } from '../Observable';\n/**\n * Creates an Observable that emits no items to the Observer and immediately\n * emits an error notification.\n *\n * <span class=\"informal\">Just emits 'error', and nothing else.\n * </span>\n *\n * <img src=\"./img/throw.png\" width=\"100%\">\n *\n * This static operator is useful for creating a simple Observable that only\n * emits the error notification. It can be used for composing with other\n * Observables, such as in a {@link mergeMap}.\n *\n * @example <caption>Emit the number 7, then emit an error.</caption>\n * import { throwError, concat, of } from 'rxjs/create';\n *\n * const result = concat(of(7), throwError(new Error('oops!')));\n * result.subscribe(x => console.log(x), e => console.error(e));\n *\n * @example <caption>Map and flatten numbers to the sequence 'a', 'b', 'c', but throw an error for 13</caption>\n * import { throwError, interval, of } from 'rxjs/create';\n * import { mergeMap } from 'rxjs/operators';\n *\n * interval(1000).pipe(\n *   mergeMap(x => x === 13 ?\n *     throwError('Thirteens are bad') :\n *     of('a', 'b', 'c')\n *   )\n * ).subscribe(x => console.log(x), e => console.error(e));\n *\n * @see {@link create}\n * @see {@link empty}\n * @see {@link never}\n * @see {@link of}\n *\n * @param {any} error The particular Error to pass to the error notification.\n * @param {Scheduler} [scheduler] A {@link IScheduler} to use for scheduling\n * the emission of the error notification.\n * @return {Observable} An error Observable: emits only the error notification\n * using the given error argument.\n * @static true\n * @name throw\n * @owner Observable\n */\nexport function throwError(error, scheduler) {\n    if (!scheduler) {\n        return new Observable(function (subscriber) { return subscriber.error(error); });\n    }\n    else {\n        return new Observable(function (subscriber) { return scheduler.schedule(dispatch, 0, { error: error, subscriber: subscriber }); });\n    }\n}\nfunction dispatch(_a) {\n    var error = _a.error, subscriber = _a.subscriber;\n    subscriber.error(error);\n}\n//# sourceMappingURL=throwError.js.map\n","/** PURE_IMPORTS_START _util_isScheduler,_fromArray,_empty,_scalar PURE_IMPORTS_END */\nimport { isScheduler } from '../util/isScheduler';\nimport { fromArray } from './fromArray';\nimport { empty } from './empty';\nimport { scalar } from './scalar';\nexport function of() {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n    }\n    var scheduler = args[args.length - 1];\n    if (isScheduler(scheduler)) {\n        args.pop();\n    }\n    else {\n        scheduler = undefined;\n    }\n    switch (args.length) {\n        case 0:\n            return empty(scheduler);\n        case 1:\n            return scheduler ? fromArray(args, scheduler) : scalar(args[0]);\n        default:\n            return fromArray(args, scheduler);\n    }\n}\n//# sourceMappingURL=of.js.map\n","/** PURE_IMPORTS_START _Observable PURE_IMPORTS_END */\nimport { Observable } from '../Observable';\nexport function scalar(value) {\n    var result = new Observable(function (subscriber) {\n        subscriber.next(value);\n        subscriber.complete();\n    });\n    result._isScalar = true;\n    result.value = value;\n    return result;\n}\n//# sourceMappingURL=scalar.js.map\n","/** PURE_IMPORTS_START tslib,_Subscriber,_Notification PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\nimport { Notification } from '../Notification';\n/**\n *\n * Re-emits all notifications from source Observable with specified scheduler.\n *\n * <span class=\"informal\">Ensure a specific scheduler is used, from outside of an Observable.</span>\n *\n * `observeOn` is an operator that accepts a scheduler as a first parameter, which will be used to reschedule\n * notifications emitted by the source Observable. It might be useful, if you do not have control over\n * internal scheduler of a given Observable, but want to control when its values are emitted nevertheless.\n *\n * Returned Observable emits the same notifications (nexted values, complete and error events) as the source Observable,\n * but rescheduled with provided scheduler. Note that this doesn't mean that source Observables internal\n * scheduler will be replaced in any way. Original scheduler still will be used, but when the source Observable emits\n * notification, it will be immediately scheduled again - this time with scheduler passed to `observeOn`.\n * An anti-pattern would be calling `observeOn` on Observable that emits lots of values synchronously, to split\n * that emissions into asynchronous chunks. For this to happen, scheduler would have to be passed into the source\n * Observable directly (usually into the operator that creates it). `observeOn` simply delays notifications a\n * little bit more, to ensure that they are emitted at expected moments.\n *\n * As a matter of fact, `observeOn` accepts second parameter, which specifies in milliseconds with what delay notifications\n * will be emitted. The main difference between {@link delay} operator and `observeOn` is that `observeOn`\n * will delay all notifications - including error notifications - while `delay` will pass through error\n * from source Observable immediately when it is emitted. In general it is highly recommended to use `delay` operator\n * for any kind of delaying of values in the stream, while using `observeOn` to specify which scheduler should be used\n * for notification emissions in general.\n *\n * @example <caption>Ensure values in subscribe are called just before browser repaint.</caption>\n * const intervals = Rx.Observable.interval(10); // Intervals are scheduled\n *                                               // with async scheduler by default...\n *\n * intervals\n * .observeOn(Rx.Scheduler.animationFrame)       // ...but we will observe on animationFrame\n * .subscribe(val => {                           // scheduler to ensure smooth animation.\n *   someDiv.style.height = val + 'px';\n * });\n *\n * @see {@link delay}\n *\n * @param {SchedulerLike} scheduler Scheduler that will be used to reschedule notifications from source Observable.\n * @param {number} [delay] Number of milliseconds that states with what delay every notification should be rescheduled.\n * @return {Observable<T>} Observable that emits the same notifications as the source Observable,\n * but with provided scheduler.\n *\n * @method observeOn\n * @owner Observable\n */\nexport function observeOn(scheduler, delay) {\n    if (delay === void 0) {\n        delay = 0;\n    }\n    return function observeOnOperatorFunction(source) {\n        return source.lift(new ObserveOnOperator(scheduler, delay));\n    };\n}\nvar ObserveOnOperator = /*@__PURE__*/ (function () {\n    function ObserveOnOperator(scheduler, delay) {\n        if (delay === void 0) {\n            delay = 0;\n        }\n        this.scheduler = scheduler;\n        this.delay = delay;\n    }\n    ObserveOnOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new ObserveOnSubscriber(subscriber, this.scheduler, this.delay));\n    };\n    return ObserveOnOperator;\n}());\nexport { ObserveOnOperator };\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar ObserveOnSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(ObserveOnSubscriber, _super);\n    function ObserveOnSubscriber(destination, scheduler, delay) {\n        if (delay === void 0) {\n            delay = 0;\n        }\n        var _this = _super.call(this, destination) || this;\n        _this.scheduler = scheduler;\n        _this.delay = delay;\n        return _this;\n    }\n    /** @nocollapse */\n    ObserveOnSubscriber.dispatch = function (arg) {\n        var notification = arg.notification, destination = arg.destination;\n        notification.observe(destination);\n        this.unsubscribe();\n    };\n    ObserveOnSubscriber.prototype.scheduleMessage = function (notification) {\n        this.add(this.scheduler.schedule(ObserveOnSubscriber.dispatch, this.delay, new ObserveOnMessage(notification, this.destination)));\n    };\n    ObserveOnSubscriber.prototype._next = function (value) {\n        this.scheduleMessage(Notification.createNext(value));\n    };\n    ObserveOnSubscriber.prototype._error = function (err) {\n        this.scheduleMessage(Notification.createError(err));\n    };\n    ObserveOnSubscriber.prototype._complete = function () {\n        this.scheduleMessage(Notification.createComplete());\n    };\n    return ObserveOnSubscriber;\n}(Subscriber));\nexport { ObserveOnSubscriber };\nvar ObserveOnMessage = /*@__PURE__*/ (function () {\n    function ObserveOnMessage(notification, destination) {\n        this.notification = notification;\n        this.destination = destination;\n    }\n    return ObserveOnMessage;\n}());\nexport { ObserveOnMessage };\n//# sourceMappingURL=observeOn.js.map\n","/** PURE_IMPORTS_START tslib,_Subject,_scheduler_queue,_Subscription,_operators_observeOn,_util_ObjectUnsubscribedError,_SubjectSubscription PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subject } from './Subject';\nimport { queue } from './scheduler/queue';\nimport { Subscription } from './Subscription';\nimport { ObserveOnSubscriber } from './operators/observeOn';\nimport { ObjectUnsubscribedError } from './util/ObjectUnsubscribedError';\nimport { SubjectSubscription } from './SubjectSubscription';\n/**\n * @class ReplaySubject<T>\n */\nvar ReplaySubject = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(ReplaySubject, _super);\n    function ReplaySubject(bufferSize, windowTime, scheduler) {\n        if (bufferSize === void 0) {\n            bufferSize = Number.POSITIVE_INFINITY;\n        }\n        if (windowTime === void 0) {\n            windowTime = Number.POSITIVE_INFINITY;\n        }\n        var _this = _super.call(this) || this;\n        _this.scheduler = scheduler;\n        _this._events = [];\n        _this._infiniteTimeWindow = false;\n        _this._bufferSize = bufferSize < 1 ? 1 : bufferSize;\n        _this._windowTime = windowTime < 1 ? 1 : windowTime;\n        if (windowTime === Number.POSITIVE_INFINITY) {\n            _this._infiniteTimeWindow = true;\n            _this.next = _this.nextInfiniteTimeWindow;\n        }\n        else {\n            _this.next = _this.nextTimeWindow;\n        }\n        return _this;\n    }\n    ReplaySubject.prototype.nextInfiniteTimeWindow = function (value) {\n        var _events = this._events;\n        _events.push(value);\n        // Since this method is invoked in every next() call than the buffer\n        // can overgrow the max size only by one item\n        if (_events.length > this._bufferSize) {\n            _events.shift();\n        }\n        _super.prototype.next.call(this, value);\n    };\n    ReplaySubject.prototype.nextTimeWindow = function (value) {\n        this._events.push(new ReplayEvent(this._getNow(), value));\n        this._trimBufferThenGetEvents();\n        _super.prototype.next.call(this, value);\n    };\n    /** @deprecated This is an internal implementation detail, do not use. */\n    ReplaySubject.prototype._subscribe = function (subscriber) {\n        // When `_infiniteTimeWindow === true` then the buffer is already trimmed\n        var _infiniteTimeWindow = this._infiniteTimeWindow;\n        var _events = _infiniteTimeWindow ? this._events : this._trimBufferThenGetEvents();\n        var scheduler = this.scheduler;\n        var len = _events.length;\n        var subscription;\n        if (this.closed) {\n            throw new ObjectUnsubscribedError();\n        }\n        else if (this.isStopped || this.hasError) {\n            subscription = Subscription.EMPTY;\n        }\n        else {\n            this.observers.push(subscriber);\n            subscription = new SubjectSubscription(this, subscriber);\n        }\n        if (scheduler) {\n            subscriber.add(subscriber = new ObserveOnSubscriber(subscriber, scheduler));\n        }\n        if (_infiniteTimeWindow) {\n            for (var i = 0; i < len && !subscriber.closed; i++) {\n                subscriber.next(_events[i]);\n            }\n        }\n        else {\n            for (var i = 0; i < len && !subscriber.closed; i++) {\n                subscriber.next(_events[i].value);\n            }\n        }\n        if (this.hasError) {\n            subscriber.error(this.thrownError);\n        }\n        else if (this.isStopped) {\n            subscriber.complete();\n        }\n        return subscription;\n    };\n    ReplaySubject.prototype._getNow = function () {\n        return (this.scheduler || queue).now();\n    };\n    ReplaySubject.prototype._trimBufferThenGetEvents = function () {\n        var now = this._getNow();\n        var _bufferSize = this._bufferSize;\n        var _windowTime = this._windowTime;\n        var _events = this._events;\n        var eventsCount = _events.length;\n        var spliceCount = 0;\n        // Trim events that fall out of the time window.\n        // Start at the front of the list. Break early once\n        // we encounter an event that falls within the window.\n        while (spliceCount < eventsCount) {\n            if ((now - _events[spliceCount].time) < _windowTime) {\n                break;\n            }\n            spliceCount++;\n        }\n        if (eventsCount > _bufferSize) {\n            spliceCount = Math.max(spliceCount, eventsCount - _bufferSize);\n        }\n        if (spliceCount > 0) {\n            _events.splice(0, spliceCount);\n        }\n        return _events;\n    };\n    return ReplaySubject;\n}(Subject));\nexport { ReplaySubject };\nvar ReplayEvent = /*@__PURE__*/ (function () {\n    function ReplayEvent(time, value) {\n        this.time = time;\n        this.value = value;\n    }\n    return ReplayEvent;\n}());\n//# sourceMappingURL=ReplaySubject.js.map\n","/** PURE_IMPORTS_START  PURE_IMPORTS_END */\nexport function identity(x) {\n    return x;\n}\n//# sourceMappingURL=identity.js.map\n","/** PURE_IMPORTS_START tslib PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\n/**\n * An error thrown when an element was queried at a certain index of an\n * Observable, but no such index or position exists in that sequence.\n *\n * @see {@link elementAt}\n * @see {@link take}\n * @see {@link takeLast}\n *\n * @class ArgumentOutOfRangeError\n */\nvar ArgumentOutOfRangeError = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(ArgumentOutOfRangeError, _super);\n    function ArgumentOutOfRangeError() {\n        var _this = _super.call(this, 'argument out of range') || this;\n        _this.name = 'ArgumentOutOfRangeError';\n        Object.setPrototypeOf(_this, ArgumentOutOfRangeError.prototype);\n        return _this;\n    }\n    return ArgumentOutOfRangeError;\n}(Error));\nexport { ArgumentOutOfRangeError };\n//# sourceMappingURL=ArgumentOutOfRangeError.js.map\n","/** PURE_IMPORTS_START tslib PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\n/**\n * An error thrown when an Observable or a sequence was queried but has no\n * elements.\n *\n * @see {@link first}\n * @see {@link last}\n * @see {@link single}\n *\n * @class EmptyError\n */\nvar EmptyError = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(EmptyError, _super);\n    function EmptyError() {\n        var _this = _super.call(this, 'no elements in sequence') || this;\n        _this.name = 'EmptyError';\n        Object.setPrototypeOf(_this, EmptyError.prototype);\n        return _this;\n    }\n    return EmptyError;\n}(Error));\nexport { EmptyError };\n//# sourceMappingURL=EmptyError.js.map\n","/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\n/**\n * Applies a given `project` function to each value emitted by the source\n * Observable, and emits the resulting values as an Observable.\n *\n * <span class=\"informal\">Like [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map),\n * it passes each source value through a transformation function to get\n * corresponding output values.</span>\n *\n * <img src=\"./img/map.png\" width=\"100%\">\n *\n * Similar to the well known `Array.prototype.map` function, this operator\n * applies a projection to each value and emits that projection in the output\n * Observable.\n *\n * @example <caption>Map every click to the clientX position of that click</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var positions = clicks.map(ev => ev.clientX);\n * positions.subscribe(x => console.log(x));\n *\n * @see {@link mapTo}\n * @see {@link pluck}\n *\n * @param {function(value: T, index: number): R} project The function to apply\n * to each `value` emitted by the source Observable. The `index` parameter is\n * the number `i` for the i-th emission that has happened since the\n * subscription, starting from the number `0`.\n * @param {any} [thisArg] An optional argument to define what `this` is in the\n * `project` function.\n * @return {Observable<R>} An Observable that emits the values from the source\n * Observable transformed by the given `project` function.\n * @method map\n * @owner Observable\n */\nexport function map(project, thisArg) {\n    return function mapOperation(source) {\n        if (typeof project !== 'function') {\n            throw new TypeError('argument is not a function. Are you looking for `mapTo()`?');\n        }\n        return source.lift(new MapOperator(project, thisArg));\n    };\n}\nvar MapOperator = /*@__PURE__*/ (function () {\n    function MapOperator(project, thisArg) {\n        this.project = project;\n        this.thisArg = thisArg;\n    }\n    MapOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new MapSubscriber(subscriber, this.project, this.thisArg));\n    };\n    return MapOperator;\n}());\nexport { MapOperator };\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar MapSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(MapSubscriber, _super);\n    function MapSubscriber(destination, project, thisArg) {\n        var _this = _super.call(this, destination) || this;\n        _this.project = project;\n        _this.count = 0;\n        _this.thisArg = thisArg || _this;\n        return _this;\n    }\n    // NOTE: This looks unoptimized, but it's actually purposefully NOT\n    // using try/catch optimizations.\n    MapSubscriber.prototype._next = function (value) {\n        var result;\n        try {\n            result = this.project.call(this.thisArg, value, this.count++);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        this.destination.next(result);\n    };\n    return MapSubscriber;\n}(Subscriber));\n//# sourceMappingURL=map.js.map\n","/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from './Subscriber';\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar OuterSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(OuterSubscriber, _super);\n    function OuterSubscriber() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    OuterSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.destination.next(innerValue);\n    };\n    OuterSubscriber.prototype.notifyError = function (error, innerSub) {\n        this.destination.error(error);\n    };\n    OuterSubscriber.prototype.notifyComplete = function (innerSub) {\n        this.destination.complete();\n    };\n    return OuterSubscriber;\n}(Subscriber));\nexport { OuterSubscriber };\n//# sourceMappingURL=OuterSubscriber.js.map\n","/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from './Subscriber';\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar InnerSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(InnerSubscriber, _super);\n    function InnerSubscriber(parent, outerValue, outerIndex) {\n        var _this = _super.call(this) || this;\n        _this.parent = parent;\n        _this.outerValue = outerValue;\n        _this.outerIndex = outerIndex;\n        _this.index = 0;\n        return _this;\n    }\n    InnerSubscriber.prototype._next = function (value) {\n        this.parent.notifyNext(this.outerValue, value, this.outerIndex, this.index++, this);\n    };\n    InnerSubscriber.prototype._error = function (error) {\n        this.parent.notifyError(error, this);\n        this.unsubscribe();\n    };\n    InnerSubscriber.prototype._complete = function () {\n        this.parent.notifyComplete(this);\n        this.unsubscribe();\n    };\n    return InnerSubscriber;\n}(Subscriber));\nexport { InnerSubscriber };\n//# sourceMappingURL=InnerSubscriber.js.map\n","/** PURE_IMPORTS_START _hostReportError PURE_IMPORTS_END */\nimport { hostReportError } from './hostReportError';\nexport var subscribeToPromise = function (promise) {\n    return function (subscriber) {\n        promise.then(function (value) {\n            if (!subscriber.closed) {\n                subscriber.next(value);\n                subscriber.complete();\n            }\n        }, function (err) { return subscriber.error(err); })\n            .then(null, hostReportError);\n        return subscriber;\n    };\n};\n//# sourceMappingURL=subscribeToPromise.js.map\n","/** PURE_IMPORTS_START  PURE_IMPORTS_END */\nexport function getSymbolIterator() {\n    if (typeof Symbol !== 'function' || !Symbol.iterator) {\n        return '@@iterator';\n    }\n    return Symbol.iterator;\n}\nexport var iterator = /*@__PURE__*/ getSymbolIterator();\n/**\n * @deprecated use {@link iterator} instead\n */\nexport var $$iterator = iterator;\n//# sourceMappingURL=iterator.js.map\n","/** PURE_IMPORTS_START _symbol_iterator PURE_IMPORTS_END */\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\nexport var subscribeToIterable = function (iterable) {\n    return function (subscriber) {\n        var iterator = iterable[Symbol_iterator]();\n        do {\n            var item = iterator.next();\n            if (item.done) {\n                subscriber.complete();\n                break;\n            }\n            subscriber.next(item.value);\n            if (subscriber.closed) {\n                break;\n            }\n        } while (true);\n        // Finalize the iterator if it happens to be a Generator\n        if (typeof iterator.return === 'function') {\n            subscriber.add(function () {\n                if (iterator.return) {\n                    iterator.return();\n                }\n            });\n        }\n        return subscriber;\n    };\n};\n//# sourceMappingURL=subscribeToIterable.js.map\n","/** PURE_IMPORTS_START _symbol_observable PURE_IMPORTS_END */\nimport { observable as Symbol_observable } from '../symbol/observable';\n/**\n * Subscribes to an object that implements Symbol.observable with the given\n * Subscriber.\n * @param obj An object that implements Symbol.observable\n */\nexport var subscribeToObservable = function (obj) {\n    return function (subscriber) {\n        var obs = obj[Symbol_observable]();\n        if (typeof obs.subscribe !== 'function') {\n            // Should be caught by observable subscribe function error handling.\n            throw new TypeError('Provided object does not correctly implement Symbol.observable');\n        }\n        else {\n            return obs.subscribe(subscriber);\n        }\n    };\n};\n//# sourceMappingURL=subscribeToObservable.js.map\n","/** PURE_IMPORTS_START  PURE_IMPORTS_END */\nexport var isArrayLike = (function (x) { return x && typeof x.length === 'number' && typeof x !== 'function'; });\n//# sourceMappingURL=isArrayLike.js.map\n","/** PURE_IMPORTS_START  PURE_IMPORTS_END */\nexport function isPromise(value) {\n    return value && typeof value.subscribe !== 'function' && typeof value.then === 'function';\n}\n//# sourceMappingURL=isPromise.js.map\n","/** PURE_IMPORTS_START _Observable,_subscribeToArray,_subscribeToPromise,_subscribeToIterable,_subscribeToObservable,_isArrayLike,_isPromise,_isObject,_symbol_iterator,_symbol_observable PURE_IMPORTS_END */\nimport { Observable } from '../Observable';\nimport { subscribeToArray } from './subscribeToArray';\nimport { subscribeToPromise } from './subscribeToPromise';\nimport { subscribeToIterable } from './subscribeToIterable';\nimport { subscribeToObservable } from './subscribeToObservable';\nimport { isArrayLike } from './isArrayLike';\nimport { isPromise } from './isPromise';\nimport { isObject } from './isObject';\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\nimport { observable as Symbol_observable } from '../symbol/observable';\nexport var subscribeTo = function (result) {\n    if (result instanceof Observable) {\n        return function (subscriber) {\n            if (result._isScalar) {\n                subscriber.next(result.value);\n                subscriber.complete();\n                return undefined;\n            }\n            else {\n                return result.subscribe(subscriber);\n            }\n        };\n    }\n    else if (isArrayLike(result)) {\n        return subscribeToArray(result);\n    }\n    else if (isPromise(result)) {\n        return subscribeToPromise(result);\n    }\n    else if (result && typeof result[Symbol_iterator] === 'function') {\n        return subscribeToIterable(result);\n    }\n    else if (result && typeof result[Symbol_observable] === 'function') {\n        return subscribeToObservable(result);\n    }\n    else {\n        var value = isObject(result) ? 'an invalid object' : \"'\" + result + \"'\";\n        var msg = \"You provided \" + value + \" where a stream was expected.\"\n            + ' You can provide an Observable, Promise, Array, or Iterable.';\n        throw new TypeError(msg);\n    }\n};\n//# sourceMappingURL=subscribeTo.js.map\n","/** PURE_IMPORTS_START _InnerSubscriber,_subscribeTo PURE_IMPORTS_END */\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeTo } from './subscribeTo';\nexport function subscribeToResult(outerSubscriber, result, outerValue, outerIndex) {\n    var destination = new InnerSubscriber(outerSubscriber, outerValue, outerIndex);\n    return subscribeTo(result)(destination);\n}\n//# sourceMappingURL=subscribeToResult.js.map\n","/** PURE_IMPORTS_START tslib,_util_isScheduler,_util_isArray,_OuterSubscriber,_util_subscribeToResult,_fromArray PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { isScheduler } from '../util/isScheduler';\nimport { isArray } from '../util/isArray';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { fromArray } from './fromArray';\nvar NONE = {};\n/* tslint:enable:max-line-length */\n/**\n * Combines multiple Observables to create an Observable whose values are\n * calculated from the latest values of each of its input Observables.\n *\n * <span class=\"informal\">Whenever any input Observable emits a value, it\n * computes a formula using the latest values from all the inputs, then emits\n * the output of that formula.</span>\n *\n * <img src=\"./img/combineLatest.png\" width=\"100%\">\n *\n * `combineLatest` combines the values from all the Observables passed as\n * arguments. This is done by subscribing to each Observable in order and,\n * whenever any Observable emits, collecting an array of the most recent\n * values from each Observable. So if you pass `n` Observables to operator,\n * returned Observable will always emit an array of `n` values, in order\n * corresponding to order of passed Observables (value from the first Observable\n * on the first place and so on).\n *\n * Static version of `combineLatest` accepts either an array of Observables\n * or each Observable can be put directly as an argument. Note that array of\n * Observables is good choice, if you don't know beforehand how many Observables\n * you will combine. Passing empty array will result in Observable that\n * completes immediately.\n *\n * To ensure output array has always the same length, `combineLatest` will\n * actually wait for all input Observables to emit at least once,\n * before it starts emitting results. This means if some Observable emits\n * values before other Observables started emitting, all that values but last\n * will be lost. On the other hand, is some Observable does not emit value but\n * completes, resulting Observable will complete at the same moment without\n * emitting anything, since it will be now impossible to include value from\n * completed Observable in resulting array. Also, if some input Observable does\n * not emit any value and never completes, `combineLatest` will also never emit\n * and never complete, since, again, it will wait for all streams to emit some\n * value.\n *\n * If at least one Observable was passed to `combineLatest` and all passed Observables\n * emitted something, resulting Observable will complete when all combined\n * streams complete. So even if some Observable completes, result of\n * `combineLatest` will still emit values when other Observables do. In case\n * of completed Observable, its value from now on will always be the last\n * emitted value. On the other hand, if any Observable errors, `combineLatest`\n * will error immediately as well, and all other Observables will be unsubscribed.\n *\n * `combineLatest` accepts as optional parameter `project` function, which takes\n * as arguments all values that would normally be emitted by resulting Observable.\n * `project` can return any kind of value, which will be then emitted by Observable\n * instead of default array. Note that `project` does not take as argument that array\n * of values, but values themselves. That means default `project` can be imagined\n * as function that takes all its arguments and puts them into an array.\n *\n *\n * @example <caption>Combine two timer Observables</caption>\n * const firstTimer = Rx.Observable.timer(0, 1000); // emit 0, 1, 2... after every second, starting from now\n * const secondTimer = Rx.Observable.timer(500, 1000); // emit 0, 1, 2... after every second, starting 0,5s from now\n * const combinedTimers = Rx.Observable.combineLatest(firstTimer, secondTimer);\n * combinedTimers.subscribe(value => console.log(value));\n * // Logs\n * // [0, 0] after 0.5s\n * // [1, 0] after 1s\n * // [1, 1] after 1.5s\n * // [2, 1] after 2s\n *\n *\n * @example <caption>Combine an array of Observables</caption>\n * const observables = [1, 5, 10].map(\n *   n => Rx.Observable.of(n).delay(n * 1000).startWith(0) // emit 0 and then emit n after n seconds\n * );\n * const combined = Rx.Observable.combineLatest(observables);\n * combined.subscribe(value => console.log(value));\n * // Logs\n * // [0, 0, 0] immediately\n * // [1, 0, 0] after 1s\n * // [1, 5, 0] after 5s\n * // [1, 5, 10] after 10s\n *\n *\n * @example <caption>Use project function to dynamically calculate the Body-Mass Index</caption>\n * var weight = Rx.Observable.of(70, 72, 76, 79, 75);\n * var height = Rx.Observable.of(1.76, 1.77, 1.78);\n * var bmi = Rx.Observable.combineLatest(weight, height, (w, h) => w / (h * h));\n * bmi.subscribe(x => console.log('BMI is ' + x));\n *\n * // With output to console:\n * // BMI is 24.212293388429753\n * // BMI is 23.93948099205209\n * // BMI is 23.671253629592222\n *\n *\n * @see {@link combineAll}\n * @see {@link merge}\n * @see {@link withLatestFrom}\n *\n * @param {ObservableInput} observable1 An input Observable to combine with other Observables.\n * @param {ObservableInput} observable2 An input Observable to combine with other Observables.\n * More than one input Observables may be given as arguments\n * or an array of Observables may be given as the first argument.\n * @param {function} [project] An optional function to project the values from\n * the combined latest values into a new value on the output Observable.\n * @param {Scheduler} [scheduler=null] The IScheduler to use for subscribing to\n * each input Observable.\n * @return {Observable} An Observable of projected values from the most recent\n * values from each input Observable, or an array of the most recent values from\n * each input Observable.\n */\nexport function combineLatest() {\n    var observables = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        observables[_i] = arguments[_i];\n    }\n    var resultSelector = null;\n    var scheduler = null;\n    if (isScheduler(observables[observables.length - 1])) {\n        scheduler = observables.pop();\n    }\n    if (typeof observables[observables.length - 1] === 'function') {\n        resultSelector = observables.pop();\n    }\n    // if the first and only other argument besides the resultSelector is an array\n    // assume it's been called with `combineLatest([obs1, obs2, obs3], resultSelector)`\n    if (observables.length === 1 && isArray(observables[0])) {\n        observables = observables[0];\n    }\n    return fromArray(observables, scheduler).lift(new CombineLatestOperator(resultSelector));\n}\nvar CombineLatestOperator = /*@__PURE__*/ (function () {\n    function CombineLatestOperator(resultSelector) {\n        this.resultSelector = resultSelector;\n    }\n    CombineLatestOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new CombineLatestSubscriber(subscriber, this.resultSelector));\n    };\n    return CombineLatestOperator;\n}());\nexport { CombineLatestOperator };\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar CombineLatestSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(CombineLatestSubscriber, _super);\n    function CombineLatestSubscriber(destination, resultSelector) {\n        var _this = _super.call(this, destination) || this;\n        _this.resultSelector = resultSelector;\n        _this.active = 0;\n        _this.values = [];\n        _this.observables = [];\n        return _this;\n    }\n    CombineLatestSubscriber.prototype._next = function (observable) {\n        this.values.push(NONE);\n        this.observables.push(observable);\n    };\n    CombineLatestSubscriber.prototype._complete = function () {\n        var observables = this.observables;\n        var len = observables.length;\n        if (len === 0) {\n            this.destination.complete();\n        }\n        else {\n            this.active = len;\n            this.toRespond = len;\n            for (var i = 0; i < len; i++) {\n                var observable = observables[i];\n                this.add(subscribeToResult(this, observable, observable, i));\n            }\n        }\n    };\n    CombineLatestSubscriber.prototype.notifyComplete = function (unused) {\n        if ((this.active -= 1) === 0) {\n            this.destination.complete();\n        }\n    };\n    CombineLatestSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        var values = this.values;\n        var oldVal = values[outerIndex];\n        var toRespond = !this.toRespond\n            ? 0\n            : oldVal === NONE ? --this.toRespond : this.toRespond;\n        values[outerIndex] = innerValue;\n        if (toRespond === 0) {\n            if (this.resultSelector) {\n                this._tryResultSelector(values);\n            }\n            else {\n                this.destination.next(values.slice());\n            }\n        }\n    };\n    CombineLatestSubscriber.prototype._tryResultSelector = function (values) {\n        var result;\n        try {\n            result = this.resultSelector.apply(this, values);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        this.destination.next(result);\n    };\n    return CombineLatestSubscriber;\n}(OuterSubscriber));\nexport { CombineLatestSubscriber };\n//# sourceMappingURL=combineLatest.js.map\n","/** PURE_IMPORTS_START tslib,_util_subscribeToResult,_OuterSubscriber,_map,_observable_from PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { map } from './map';\nimport { from } from '../observable/from';\n/* tslint:enable:max-line-length */\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link mergeAll}.</span>\n *\n * <img src=\"./img/mergeMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an Observable, and then merging those resulting Observables and\n * emitting the results of this merger.\n *\n * @example <caption>Map and flatten each letter to an Observable ticking every 1 second</caption>\n * var letters = Rx.Observable.of('a', 'b', 'c');\n * var result = letters.mergeMap(x =>\n *   Rx.Observable.interval(1000).map(i => x+i)\n * );\n * result.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // a0\n * // b0\n * // c0\n * // a1\n * // b1\n * // c1\n * // continues to list a,b,c with respective ascending integers\n *\n * @see {@link concatMap}\n * @see {@link exhaustMap}\n * @see {@link merge}\n * @see {@link mergeAll}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional `resultSelector`) to each item emitted\n * by the source Observable and merging the results of the Observables obtained\n * from this transformation.\n * @method mergeMap\n * @owner Observable\n */\nexport function mergeMap(project, resultSelector, concurrent) {\n    if (concurrent === void 0) {\n        concurrent = Number.POSITIVE_INFINITY;\n    }\n    if (typeof resultSelector === 'function') {\n        // DEPRECATED PATH\n        return function (source) { return source.pipe(mergeMap(function (a, i) { return from(project(a, i)).pipe(map(function (b, ii) { return resultSelector(a, b, i, ii); })); }, concurrent)); };\n    }\n    else if (typeof resultSelector === 'number') {\n        concurrent = resultSelector;\n    }\n    return function (source) { return source.lift(new MergeMapOperator(project, concurrent)); };\n}\nvar MergeMapOperator = /*@__PURE__*/ (function () {\n    function MergeMapOperator(project, concurrent) {\n        if (concurrent === void 0) {\n            concurrent = Number.POSITIVE_INFINITY;\n        }\n        this.project = project;\n        this.concurrent = concurrent;\n    }\n    MergeMapOperator.prototype.call = function (observer, source) {\n        return source.subscribe(new MergeMapSubscriber(observer, this.project, this.concurrent));\n    };\n    return MergeMapOperator;\n}());\nexport { MergeMapOperator };\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar MergeMapSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(MergeMapSubscriber, _super);\n    function MergeMapSubscriber(destination, project, concurrent) {\n        if (concurrent === void 0) {\n            concurrent = Number.POSITIVE_INFINITY;\n        }\n        var _this = _super.call(this, destination) || this;\n        _this.project = project;\n        _this.concurrent = concurrent;\n        _this.hasCompleted = false;\n        _this.buffer = [];\n        _this.active = 0;\n        _this.index = 0;\n        return _this;\n    }\n    MergeMapSubscriber.prototype._next = function (value) {\n        if (this.active < this.concurrent) {\n            this._tryNext(value);\n        }\n        else {\n            this.buffer.push(value);\n        }\n    };\n    MergeMapSubscriber.prototype._tryNext = function (value) {\n        var result;\n        var index = this.index++;\n        try {\n            result = this.project(value, index);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        this.active++;\n        this._innerSub(result, value, index);\n    };\n    MergeMapSubscriber.prototype._innerSub = function (ish, value, index) {\n        this.add(subscribeToResult(this, ish, value, index));\n    };\n    MergeMapSubscriber.prototype._complete = function () {\n        this.hasCompleted = true;\n        if (this.active === 0 && this.buffer.length === 0) {\n            this.destination.complete();\n        }\n    };\n    MergeMapSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.destination.next(innerValue);\n    };\n    MergeMapSubscriber.prototype.notifyComplete = function (innerSub) {\n        var buffer = this.buffer;\n        this.remove(innerSub);\n        this.active--;\n        if (buffer.length > 0) {\n            this._next(buffer.shift());\n        }\n        else if (this.active === 0 && this.hasCompleted) {\n            this.destination.complete();\n        }\n    };\n    return MergeMapSubscriber;\n}(OuterSubscriber));\nexport { MergeMapSubscriber };\n//# sourceMappingURL=mergeMap.js.map\n","/** PURE_IMPORTS_START tslib,_util_isArray,_fromArray,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { isArray } from '../util/isArray';\nimport { fromArray } from './fromArray';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nexport function race() {\n    var observables = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        observables[_i] = arguments[_i];\n    }\n    // if the only argument is an array, it was most likely called with\n    // `race([obs1, obs2, ...])`\n    if (observables.length === 1) {\n        if (isArray(observables[0])) {\n            observables = observables[0];\n        }\n        else {\n            return observables[0];\n        }\n    }\n    return fromArray(observables, undefined).lift(new RaceOperator());\n}\nvar RaceOperator = /*@__PURE__*/ (function () {\n    function RaceOperator() {\n    }\n    RaceOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new RaceSubscriber(subscriber));\n    };\n    return RaceOperator;\n}());\nexport { RaceOperator };\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar RaceSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(RaceSubscriber, _super);\n    function RaceSubscriber(destination) {\n        var _this = _super.call(this, destination) || this;\n        _this.hasFirst = false;\n        _this.observables = [];\n        _this.subscriptions = [];\n        return _this;\n    }\n    RaceSubscriber.prototype._next = function (observable) {\n        this.observables.push(observable);\n    };\n    RaceSubscriber.prototype._complete = function () {\n        var observables = this.observables;\n        var len = observables.length;\n        if (len === 0) {\n            this.destination.complete();\n        }\n        else {\n            for (var i = 0; i < len && !this.hasFirst; i++) {\n                var observable = observables[i];\n                var subscription = subscribeToResult(this, observable, observable, i);\n                if (this.subscriptions) {\n                    this.subscriptions.push(subscription);\n                }\n                this.add(subscription);\n            }\n            this.observables = null;\n        }\n    };\n    RaceSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        if (!this.hasFirst) {\n            this.hasFirst = true;\n            for (var i = 0; i < this.subscriptions.length; i++) {\n                if (i !== outerIndex) {\n                    var subscription = this.subscriptions[i];\n                    subscription.unsubscribe();\n                    this.remove(subscription);\n                }\n            }\n            this.subscriptions = null;\n        }\n        this.destination.next(innerValue);\n    };\n    return RaceSubscriber;\n}(OuterSubscriber));\nexport { RaceSubscriber };\n//# sourceMappingURL=race.js.map\n","/** PURE_IMPORTS_START tslib,_fromArray,_util_isArray,_Subscriber,_OuterSubscriber,_util_subscribeToResult,_.._internal_symbol_iterator PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { fromArray } from './fromArray';\nimport { isArray } from '../util/isArray';\nimport { Subscriber } from '../Subscriber';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { iterator as Symbol_iterator } from '../../internal/symbol/iterator';\n/* tslint:enable:max-line-length */\n/**\n * Combines multiple Observables to create an Observable whose values are calculated from the values, in order, of each\n * of its input Observables.\n *\n * If the latest parameter is a function, this function is used to compute the created value from the input values.\n * Otherwise, an array of the input values is returned.\n *\n * @example <caption>Combine age and name from different sources</caption>\n *\n * let age$ = Observable.of<number>(27, 25, 29);\n * let name$ = Observable.of<string>('Foo', 'Bar', 'Beer');\n * let isDev$ = Observable.of<boolean>(true, true, false);\n *\n * Observable\n *     .zip(age$,\n *          name$,\n *          isDev$,\n *          (age: number, name: string, isDev: boolean) => ({ age, name, isDev }))\n *     .subscribe(x => console.log(x));\n *\n * // outputs\n * // { age: 27, name: 'Foo', isDev: true }\n * // { age: 25, name: 'Bar', isDev: true }\n * // { age: 29, name: 'Beer', isDev: false }\n *\n * @param observables\n * @return {Observable<R>}\n * @static true\n * @name zip\n * @owner Observable\n */\nexport function zip() {\n    var observables = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        observables[_i] = arguments[_i];\n    }\n    var resultSelector = observables[observables.length - 1];\n    if (typeof resultSelector === 'function') {\n        observables.pop();\n    }\n    return fromArray(observables, undefined).lift(new ZipOperator(resultSelector));\n}\nvar ZipOperator = /*@__PURE__*/ (function () {\n    function ZipOperator(resultSelector) {\n        this.resultSelector = resultSelector;\n    }\n    ZipOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new ZipSubscriber(subscriber, this.resultSelector));\n    };\n    return ZipOperator;\n}());\nexport { ZipOperator };\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar ZipSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(ZipSubscriber, _super);\n    function ZipSubscriber(destination, resultSelector, values) {\n        if (values === void 0) {\n            values = Object.create(null);\n        }\n        var _this = _super.call(this, destination) || this;\n        _this.iterators = [];\n        _this.active = 0;\n        _this.resultSelector = (typeof resultSelector === 'function') ? resultSelector : null;\n        _this.values = values;\n        return _this;\n    }\n    ZipSubscriber.prototype._next = function (value) {\n        var iterators = this.iterators;\n        if (isArray(value)) {\n            iterators.push(new StaticArrayIterator(value));\n        }\n        else if (typeof value[Symbol_iterator] === 'function') {\n            iterators.push(new StaticIterator(value[Symbol_iterator]()));\n        }\n        else {\n            iterators.push(new ZipBufferIterator(this.destination, this, value));\n        }\n    };\n    ZipSubscriber.prototype._complete = function () {\n        var iterators = this.iterators;\n        var len = iterators.length;\n        if (len === 0) {\n            this.destination.complete();\n            return;\n        }\n        this.active = len;\n        for (var i = 0; i < len; i++) {\n            var iterator = iterators[i];\n            if (iterator.stillUnsubscribed) {\n                this.add(iterator.subscribe(iterator, i));\n            }\n            else {\n                this.active--; // not an observable\n            }\n        }\n    };\n    ZipSubscriber.prototype.notifyInactive = function () {\n        this.active--;\n        if (this.active === 0) {\n            this.destination.complete();\n        }\n    };\n    ZipSubscriber.prototype.checkIterators = function () {\n        var iterators = this.iterators;\n        var len = iterators.length;\n        var destination = this.destination;\n        // abort if not all of them have values\n        for (var i = 0; i < len; i++) {\n            var iterator = iterators[i];\n            if (typeof iterator.hasValue === 'function' && !iterator.hasValue()) {\n                return;\n            }\n        }\n        var shouldComplete = false;\n        var args = [];\n        for (var i = 0; i < len; i++) {\n            var iterator = iterators[i];\n            var result = iterator.next();\n            // check to see if it's completed now that you've gotten\n            // the next value.\n            if (iterator.hasCompleted()) {\n                shouldComplete = true;\n            }\n            if (result.done) {\n                destination.complete();\n                return;\n            }\n            args.push(result.value);\n        }\n        if (this.resultSelector) {\n            this._tryresultSelector(args);\n        }\n        else {\n            destination.next(args);\n        }\n        if (shouldComplete) {\n            destination.complete();\n        }\n    };\n    ZipSubscriber.prototype._tryresultSelector = function (args) {\n        var result;\n        try {\n            result = this.resultSelector.apply(this, args);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        this.destination.next(result);\n    };\n    return ZipSubscriber;\n}(Subscriber));\nexport { ZipSubscriber };\nvar StaticIterator = /*@__PURE__*/ (function () {\n    function StaticIterator(iterator) {\n        this.iterator = iterator;\n        this.nextResult = iterator.next();\n    }\n    StaticIterator.prototype.hasValue = function () {\n        return true;\n    };\n    StaticIterator.prototype.next = function () {\n        var result = this.nextResult;\n        this.nextResult = this.iterator.next();\n        return result;\n    };\n    StaticIterator.prototype.hasCompleted = function () {\n        var nextResult = this.nextResult;\n        return nextResult && nextResult.done;\n    };\n    return StaticIterator;\n}());\nvar StaticArrayIterator = /*@__PURE__*/ (function () {\n    function StaticArrayIterator(array) {\n        this.array = array;\n        this.index = 0;\n        this.length = 0;\n        this.length = array.length;\n    }\n    StaticArrayIterator.prototype[Symbol_iterator] = function () {\n        return this;\n    };\n    StaticArrayIterator.prototype.next = function (value) {\n        var i = this.index++;\n        var array = this.array;\n        return i < this.length ? { value: array[i], done: false } : { value: null, done: true };\n    };\n    StaticArrayIterator.prototype.hasValue = function () {\n        return this.array.length > this.index;\n    };\n    StaticArrayIterator.prototype.hasCompleted = function () {\n        return this.array.length === this.index;\n    };\n    return StaticArrayIterator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar ZipBufferIterator = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(ZipBufferIterator, _super);\n    function ZipBufferIterator(destination, parent, observable) {\n        var _this = _super.call(this, destination) || this;\n        _this.parent = parent;\n        _this.observable = observable;\n        _this.stillUnsubscribed = true;\n        _this.buffer = [];\n        _this.isComplete = false;\n        return _this;\n    }\n    ZipBufferIterator.prototype[Symbol_iterator] = function () {\n        return this;\n    };\n    // NOTE: there is actually a name collision here with Subscriber.next and Iterator.next\n    //    this is legit because `next()` will never be called by a subscription in this case.\n    ZipBufferIterator.prototype.next = function () {\n        var buffer = this.buffer;\n        if (buffer.length === 0 && this.isComplete) {\n            return { value: null, done: true };\n        }\n        else {\n            return { value: buffer.shift(), done: false };\n        }\n    };\n    ZipBufferIterator.prototype.hasValue = function () {\n        return this.buffer.length > 0;\n    };\n    ZipBufferIterator.prototype.hasCompleted = function () {\n        return this.buffer.length === 0 && this.isComplete;\n    };\n    ZipBufferIterator.prototype.notifyComplete = function () {\n        if (this.buffer.length > 0) {\n            this.isComplete = true;\n            this.parent.notifyInactive();\n        }\n        else {\n            this.destination.complete();\n        }\n    };\n    ZipBufferIterator.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.buffer.push(innerValue);\n        this.parent.checkIterators();\n    };\n    ZipBufferIterator.prototype.subscribe = function (value, index) {\n        return subscribeToResult(this, this.observable, this, index);\n    };\n    return ZipBufferIterator;\n}(OuterSubscriber));\n//# sourceMappingURL=zip.js.map\n","/** PURE_IMPORTS_START tslib,_scheduler_async,_Subscriber,_util_isScheduler PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { async } from '../scheduler/async';\nimport { Subscriber } from '../Subscriber';\nimport { isScheduler } from '../util/isScheduler';\n/* tslint:enable:max-line-length */\n/**\n * Buffers the source Observable values for a specific time period.\n *\n * <span class=\"informal\">Collects values from the past as an array, and emits\n * those arrays periodically in time.</span>\n *\n * <img src=\"./img/bufferTime.png\" width=\"100%\">\n *\n * Buffers values from the source for a specific time duration `bufferTimeSpan`.\n * Unless the optional argument `bufferCreationInterval` is given, it emits and\n * resets the buffer every `bufferTimeSpan` milliseconds. If\n * `bufferCreationInterval` is given, this operator opens the buffer every\n * `bufferCreationInterval` milliseconds and closes (emits and resets) the\n * buffer every `bufferTimeSpan` milliseconds. When the optional argument\n * `maxBufferSize` is specified, the buffer will be closed either after\n * `bufferTimeSpan` milliseconds or when it contains `maxBufferSize` elements.\n *\n * @example <caption>Every second, emit an array of the recent click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferTime(1000);\n * buffered.subscribe(x => console.log(x));\n *\n * @example <caption>Every 5 seconds, emit the click events from the next 2 seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferTime(2000, 5000);\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n * @see {@link bufferToggle}\n * @see {@link bufferWhen}\n * @see {@link windowTime}\n *\n * @param {number} bufferTimeSpan The amount of time to fill each buffer array.\n * @param {number} [bufferCreationInterval] The interval at which to start new\n * buffers.\n * @param {number} [maxBufferSize] The maximum buffer size.\n * @param {Scheduler} [scheduler=async] The scheduler on which to schedule the\n * intervals that determine buffer boundaries.\n * @return {Observable<T[]>} An observable of arrays of buffered values.\n * @method bufferTime\n * @owner Observable\n */\nexport function bufferTime(bufferTimeSpan) {\n    var length = arguments.length;\n    var scheduler = async;\n    if (isScheduler(arguments[arguments.length - 1])) {\n        scheduler = arguments[arguments.length - 1];\n        length--;\n    }\n    var bufferCreationInterval = null;\n    if (length >= 2) {\n        bufferCreationInterval = arguments[1];\n    }\n    var maxBufferSize = Number.POSITIVE_INFINITY;\n    if (length >= 3) {\n        maxBufferSize = arguments[2];\n    }\n    return function bufferTimeOperatorFunction(source) {\n        return source.lift(new BufferTimeOperator(bufferTimeSpan, bufferCreationInterval, maxBufferSize, scheduler));\n    };\n}\nvar BufferTimeOperator = /*@__PURE__*/ (function () {\n    function BufferTimeOperator(bufferTimeSpan, bufferCreationInterval, maxBufferSize, scheduler) {\n        this.bufferTimeSpan = bufferTimeSpan;\n        this.bufferCreationInterval = bufferCreationInterval;\n        this.maxBufferSize = maxBufferSize;\n        this.scheduler = scheduler;\n    }\n    BufferTimeOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new BufferTimeSubscriber(subscriber, this.bufferTimeSpan, this.bufferCreationInterval, this.maxBufferSize, this.scheduler));\n    };\n    return BufferTimeOperator;\n}());\nvar Context = /*@__PURE__*/ (function () {\n    function Context() {\n        this.buffer = [];\n    }\n    return Context;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar BufferTimeSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(BufferTimeSubscriber, _super);\n    function BufferTimeSubscriber(destination, bufferTimeSpan, bufferCreationInterval, maxBufferSize, scheduler) {\n        var _this = _super.call(this, destination) || this;\n        _this.bufferTimeSpan = bufferTimeSpan;\n        _this.bufferCreationInterval = bufferCreationInterval;\n        _this.maxBufferSize = maxBufferSize;\n        _this.scheduler = scheduler;\n        _this.contexts = [];\n        var context = _this.openContext();\n        _this.timespanOnly = bufferCreationInterval == null || bufferCreationInterval < 0;\n        if (_this.timespanOnly) {\n            var timeSpanOnlyState = { subscriber: _this, context: context, bufferTimeSpan: bufferTimeSpan };\n            _this.add(context.closeAction = scheduler.schedule(dispatchBufferTimeSpanOnly, bufferTimeSpan, timeSpanOnlyState));\n        }\n        else {\n            var closeState = { subscriber: _this, context: context };\n            var creationState = { bufferTimeSpan: bufferTimeSpan, bufferCreationInterval: bufferCreationInterval, subscriber: _this, scheduler: scheduler };\n            _this.add(context.closeAction = scheduler.schedule(dispatchBufferClose, bufferTimeSpan, closeState));\n            _this.add(scheduler.schedule(dispatchBufferCreation, bufferCreationInterval, creationState));\n        }\n        return _this;\n    }\n    BufferTimeSubscriber.prototype._next = function (value) {\n        var contexts = this.contexts;\n        var len = contexts.length;\n        var filledBufferContext;\n        for (var i = 0; i < len; i++) {\n            var context_1 = contexts[i];\n            var buffer = context_1.buffer;\n            buffer.push(value);\n            if (buffer.length == this.maxBufferSize) {\n                filledBufferContext = context_1;\n            }\n        }\n        if (filledBufferContext) {\n            this.onBufferFull(filledBufferContext);\n        }\n    };\n    BufferTimeSubscriber.prototype._error = function (err) {\n        this.contexts.length = 0;\n        _super.prototype._error.call(this, err);\n    };\n    BufferTimeSubscriber.prototype._complete = function () {\n        var _a = this, contexts = _a.contexts, destination = _a.destination;\n        while (contexts.length > 0) {\n            var context_2 = contexts.shift();\n            destination.next(context_2.buffer);\n        }\n        _super.prototype._complete.call(this);\n    };\n    /** @deprecated This is an internal implementation detail, do not use. */\n    BufferTimeSubscriber.prototype._unsubscribe = function () {\n        this.contexts = null;\n    };\n    BufferTimeSubscriber.prototype.onBufferFull = function (context) {\n        this.closeContext(context);\n        var closeAction = context.closeAction;\n        closeAction.unsubscribe();\n        this.remove(closeAction);\n        if (!this.closed && this.timespanOnly) {\n            context = this.openContext();\n            var bufferTimeSpan = this.bufferTimeSpan;\n            var timeSpanOnlyState = { subscriber: this, context: context, bufferTimeSpan: bufferTimeSpan };\n            this.add(context.closeAction = this.scheduler.schedule(dispatchBufferTimeSpanOnly, bufferTimeSpan, timeSpanOnlyState));\n        }\n    };\n    BufferTimeSubscriber.prototype.openContext = function () {\n        var context = new Context();\n        this.contexts.push(context);\n        return context;\n    };\n    BufferTimeSubscriber.prototype.closeContext = function (context) {\n        this.destination.next(context.buffer);\n        var contexts = this.contexts;\n        var spliceIndex = contexts ? contexts.indexOf(context) : -1;\n        if (spliceIndex >= 0) {\n            contexts.splice(contexts.indexOf(context), 1);\n        }\n    };\n    return BufferTimeSubscriber;\n}(Subscriber));\nfunction dispatchBufferTimeSpanOnly(state) {\n    var subscriber = state.subscriber;\n    var prevContext = state.context;\n    if (prevContext) {\n        subscriber.closeContext(prevContext);\n    }\n    if (!subscriber.closed) {\n        state.context = subscriber.openContext();\n        state.context.closeAction = this.schedule(state, state.bufferTimeSpan);\n    }\n}\nfunction dispatchBufferCreation(state) {\n    var bufferCreationInterval = state.bufferCreationInterval, bufferTimeSpan = state.bufferTimeSpan, subscriber = state.subscriber, scheduler = state.scheduler;\n    var context = subscriber.openContext();\n    var action = this;\n    if (!subscriber.closed) {\n        subscriber.add(context.closeAction = scheduler.schedule(dispatchBufferClose, bufferTimeSpan, { subscriber: subscriber, context: context }));\n        action.schedule(state, bufferCreationInterval);\n    }\n}\nfunction dispatchBufferClose(arg) {\n    var subscriber = arg.subscriber, context = arg.context;\n    subscriber.closeContext(context);\n}\n//# sourceMappingURL=bufferTime.js.map\n","/** PURE_IMPORTS_START tslib,_util_tryCatch,_util_errorObject,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n/**\n * Ignores source values for a duration determined by another Observable, then\n * emits the most recent value from the source Observable, then repeats this\n * process.\n *\n * <span class=\"informal\">It's like {@link auditTime}, but the silencing\n * duration is determined by a second Observable.</span>\n *\n * <img src=\"./img/audit.png\" width=\"100%\">\n *\n * `audit` is similar to `throttle`, but emits the last value from the silenced\n * time window, instead of the first value. `audit` emits the most recent value\n * from the source Observable on the output Observable as soon as its internal\n * timer becomes disabled, and ignores source values while the timer is enabled.\n * Initially, the timer is disabled. As soon as the first source value arrives,\n * the timer is enabled by calling the `durationSelector` function with the\n * source value, which returns the \"duration\" Observable. When the duration\n * Observable emits a value or completes, the timer is disabled, then the most\n * recent source value is emitted on the output Observable, and this process\n * repeats for the next source value.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.audit(ev => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounce}\n * @see {@link delayWhen}\n * @see {@link sample}\n * @see {@link throttle}\n *\n * @param {function(value: T): SubscribableOrPromise} durationSelector A function\n * that receives a value from the source Observable, for computing the silencing\n * duration, returned as an Observable or a Promise.\n * @return {Observable<T>} An Observable that performs rate-limiting of\n * emissions from the source Observable.\n * @method audit\n * @owner Observable\n */\nexport function audit(durationSelector) {\n    return function auditOperatorFunction(source) {\n        return source.lift(new AuditOperator(durationSelector));\n    };\n}\nvar AuditOperator = /*@__PURE__*/ (function () {\n    function AuditOperator(durationSelector) {\n        this.durationSelector = durationSelector;\n    }\n    AuditOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new AuditSubscriber(subscriber, this.durationSelector));\n    };\n    return AuditOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar AuditSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(AuditSubscriber, _super);\n    function AuditSubscriber(destination, durationSelector) {\n        var _this = _super.call(this, destination) || this;\n        _this.durationSelector = durationSelector;\n        _this.hasValue = false;\n        return _this;\n    }\n    AuditSubscriber.prototype._next = function (value) {\n        this.value = value;\n        this.hasValue = true;\n        if (!this.throttled) {\n            var duration = tryCatch(this.durationSelector)(value);\n            if (duration === errorObject) {\n                this.destination.error(errorObject.e);\n            }\n            else {\n                var innerSubscription = subscribeToResult(this, duration);\n                if (!innerSubscription || innerSubscription.closed) {\n                    this.clearThrottle();\n                }\n                else {\n                    this.add(this.throttled = innerSubscription);\n                }\n            }\n        }\n    };\n    AuditSubscriber.prototype.clearThrottle = function () {\n        var _a = this, value = _a.value, hasValue = _a.hasValue, throttled = _a.throttled;\n        if (throttled) {\n            this.remove(throttled);\n            this.throttled = null;\n            throttled.unsubscribe();\n        }\n        if (hasValue) {\n            this.value = null;\n            this.hasValue = false;\n            this.destination.next(value);\n        }\n    };\n    AuditSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex) {\n        this.clearThrottle();\n    };\n    AuditSubscriber.prototype.notifyComplete = function () {\n        this.clearThrottle();\n    };\n    return AuditSubscriber;\n}(OuterSubscriber));\n//# sourceMappingURL=audit.js.map\n","/** PURE_IMPORTS_START tslib,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n/**\n * Buffers the source Observable values until `closingNotifier` emits.\n *\n * <span class=\"informal\">Collects values from the past as an array, and emits\n * that array only when another Observable emits.</span>\n *\n * <img src=\"./img/buffer.png\" width=\"100%\">\n *\n * Buffers the incoming Observable values until the given `closingNotifier`\n * Observable emits a value, at which point it emits the buffer on the output\n * Observable and starts a new buffer internally, awaiting the next time\n * `closingNotifier` emits.\n *\n * @example <caption>On every click, emit array of most recent interval events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var interval = Rx.Observable.interval(1000);\n * var buffered = interval.buffer(clicks);\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link bufferCount}\n * @see {@link bufferTime}\n * @see {@link bufferToggle}\n * @see {@link bufferWhen}\n * @see {@link window}\n *\n * @param {Observable<any>} closingNotifier An Observable that signals the\n * buffer to be emitted on the output Observable.\n * @return {Observable<T[]>} An Observable of buffers, which are arrays of\n * values.\n * @method buffer\n * @owner Observable\n */\nexport function buffer(closingNotifier) {\n    return function bufferOperatorFunction(source) {\n        return source.lift(new BufferOperator(closingNotifier));\n    };\n}\nvar BufferOperator = /*@__PURE__*/ (function () {\n    function BufferOperator(closingNotifier) {\n        this.closingNotifier = closingNotifier;\n    }\n    BufferOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new BufferSubscriber(subscriber, this.closingNotifier));\n    };\n    return BufferOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar BufferSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(BufferSubscriber, _super);\n    function BufferSubscriber(destination, closingNotifier) {\n        var _this = _super.call(this, destination) || this;\n        _this.buffer = [];\n        _this.add(subscribeToResult(_this, closingNotifier));\n        return _this;\n    }\n    BufferSubscriber.prototype._next = function (value) {\n        this.buffer.push(value);\n    };\n    BufferSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        var buffer = this.buffer;\n        this.buffer = [];\n        this.destination.next(buffer);\n    };\n    return BufferSubscriber;\n}(OuterSubscriber));\n//# sourceMappingURL=buffer.js.map\n","/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\n/**\n * Buffers the source Observable values until the size hits the maximum\n * `bufferSize` given.\n *\n * <span class=\"informal\">Collects values from the past as an array, and emits\n * that array only when its size reaches `bufferSize`.</span>\n *\n * <img src=\"./img/bufferCount.png\" width=\"100%\">\n *\n * Buffers a number of values from the source Observable by `bufferSize` then\n * emits the buffer and clears it, and starts a new buffer each\n * `startBufferEvery` values. If `startBufferEvery` is not provided or is\n * `null`, then new buffers are started immediately at the start of the source\n * and when each buffer closes and is emitted.\n *\n * @example <caption>Emit the last two click events as an array</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferCount(2);\n * buffered.subscribe(x => console.log(x));\n *\n * @example <caption>On every click, emit the last two click events as an array</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferCount(2, 1);\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferTime}\n * @see {@link bufferToggle}\n * @see {@link bufferWhen}\n * @see {@link pairwise}\n * @see {@link windowCount}\n *\n * @param {number} bufferSize The maximum size of the buffer emitted.\n * @param {number} [startBufferEvery] Interval at which to start a new buffer.\n * For example if `startBufferEvery` is `2`, then a new buffer will be started\n * on every other value from the source. A new buffer is started at the\n * beginning of the source by default.\n * @return {Observable<T[]>} An Observable of arrays of buffered values.\n * @method bufferCount\n * @owner Observable\n */\nexport function bufferCount(bufferSize, startBufferEvery) {\n    if (startBufferEvery === void 0) {\n        startBufferEvery = null;\n    }\n    return function bufferCountOperatorFunction(source) {\n        return source.lift(new BufferCountOperator(bufferSize, startBufferEvery));\n    };\n}\nvar BufferCountOperator = /*@__PURE__*/ (function () {\n    function BufferCountOperator(bufferSize, startBufferEvery) {\n        this.bufferSize = bufferSize;\n        this.startBufferEvery = startBufferEvery;\n        if (!startBufferEvery || bufferSize === startBufferEvery) {\n            this.subscriberClass = BufferCountSubscriber;\n        }\n        else {\n            this.subscriberClass = BufferSkipCountSubscriber;\n        }\n    }\n    BufferCountOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new this.subscriberClass(subscriber, this.bufferSize, this.startBufferEvery));\n    };\n    return BufferCountOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar BufferCountSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(BufferCountSubscriber, _super);\n    function BufferCountSubscriber(destination, bufferSize) {\n        var _this = _super.call(this, destination) || this;\n        _this.bufferSize = bufferSize;\n        _this.buffer = [];\n        return _this;\n    }\n    BufferCountSubscriber.prototype._next = function (value) {\n        var buffer = this.buffer;\n        buffer.push(value);\n        if (buffer.length == this.bufferSize) {\n            this.destination.next(buffer);\n            this.buffer = [];\n        }\n    };\n    BufferCountSubscriber.prototype._complete = function () {\n        var buffer = this.buffer;\n        if (buffer.length > 0) {\n            this.destination.next(buffer);\n        }\n        _super.prototype._complete.call(this);\n    };\n    return BufferCountSubscriber;\n}(Subscriber));\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar BufferSkipCountSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(BufferSkipCountSubscriber, _super);\n    function BufferSkipCountSubscriber(destination, bufferSize, startBufferEvery) {\n        var _this = _super.call(this, destination) || this;\n        _this.bufferSize = bufferSize;\n        _this.startBufferEvery = startBufferEvery;\n        _this.buffers = [];\n        _this.count = 0;\n        return _this;\n    }\n    BufferSkipCountSubscriber.prototype._next = function (value) {\n        var _a = this, bufferSize = _a.bufferSize, startBufferEvery = _a.startBufferEvery, buffers = _a.buffers, count = _a.count;\n        this.count++;\n        if (count % startBufferEvery === 0) {\n            buffers.push([]);\n        }\n        for (var i = buffers.length; i--;) {\n            var buffer = buffers[i];\n            buffer.push(value);\n            if (buffer.length === bufferSize) {\n                buffers.splice(i, 1);\n                this.destination.next(buffer);\n            }\n        }\n    };\n    BufferSkipCountSubscriber.prototype._complete = function () {\n        var _a = this, buffers = _a.buffers, destination = _a.destination;\n        while (buffers.length > 0) {\n            var buffer = buffers.shift();\n            if (buffer.length > 0) {\n                destination.next(buffer);\n            }\n        }\n        _super.prototype._complete.call(this);\n    };\n    return BufferSkipCountSubscriber;\n}(Subscriber));\n//# sourceMappingURL=bufferCount.js.map\n","/** PURE_IMPORTS_START tslib,_Subscriber,_scheduler_async PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\nimport { async } from '../scheduler/async';\n/**\n * Emits a value from the source Observable only after a particular time span\n * has passed without another source emission.\n *\n * <span class=\"informal\">It's like {@link delay}, but passes only the most\n * recent value from each burst of emissions.</span>\n *\n * <img src=\"./img/debounceTime.png\" width=\"100%\">\n *\n * `debounceTime` delays values emitted by the source Observable, but drops\n * previous pending delayed emissions if a new value arrives on the source\n * Observable. This operator keeps track of the most recent value from the\n * source Observable, and emits that only when `dueTime` enough time has passed\n * without any other value appearing on the source Observable. If a new value\n * appears before `dueTime` silence occurs, the previous value will be dropped\n * and will not be emitted on the output Observable.\n *\n * This is a rate-limiting operator, because it is impossible for more than one\n * value to be emitted in any time window of duration `dueTime`, but it is also\n * a delay-like operator since output emissions do not occur at the same time as\n * they did on the source Observable. Optionally takes a {@link IScheduler} for\n * managing timers.\n *\n * @example <caption>Emit the most recent click after a burst of clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.debounceTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounce}\n * @see {@link delay}\n * @see {@link sampleTime}\n * @see {@link throttleTime}\n *\n * @param {number} dueTime The timeout duration in milliseconds (or the time\n * unit determined internally by the optional `scheduler`) for the window of\n * time required to wait for emission silence before emitting the most recent\n * source value.\n * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for\n * managing the timers that handle the timeout for each value.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by the specified `dueTime`, and may drop some values if they occur\n * too frequently.\n * @method debounceTime\n * @owner Observable\n */\nexport function debounceTime(dueTime, scheduler) {\n    if (scheduler === void 0) {\n        scheduler = async;\n    }\n    return function (source) { return source.lift(new DebounceTimeOperator(dueTime, scheduler)); };\n}\nvar DebounceTimeOperator = /*@__PURE__*/ (function () {\n    function DebounceTimeOperator(dueTime, scheduler) {\n        this.dueTime = dueTime;\n        this.scheduler = scheduler;\n    }\n    DebounceTimeOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new DebounceTimeSubscriber(subscriber, this.dueTime, this.scheduler));\n    };\n    return DebounceTimeOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar DebounceTimeSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(DebounceTimeSubscriber, _super);\n    function DebounceTimeSubscriber(destination, dueTime, scheduler) {\n        var _this = _super.call(this, destination) || this;\n        _this.dueTime = dueTime;\n        _this.scheduler = scheduler;\n        _this.debouncedSubscription = null;\n        _this.lastValue = null;\n        _this.hasValue = false;\n        return _this;\n    }\n    DebounceTimeSubscriber.prototype._next = function (value) {\n        this.clearDebounce();\n        this.lastValue = value;\n        this.hasValue = true;\n        this.add(this.debouncedSubscription = this.scheduler.schedule(dispatchNext, this.dueTime, this));\n    };\n    DebounceTimeSubscriber.prototype._complete = function () {\n        this.debouncedNext();\n        this.destination.complete();\n    };\n    DebounceTimeSubscriber.prototype.debouncedNext = function () {\n        this.clearDebounce();\n        if (this.hasValue) {\n            var lastValue = this.lastValue;\n            // This must be done *before* passing the value\n            // along to the destination because it's possible for\n            // the value to synchronously re-enter this operator\n            // recursively when scheduled with things like\n            // VirtualScheduler/TestScheduler.\n            this.lastValue = null;\n            this.hasValue = false;\n            this.destination.next(lastValue);\n        }\n    };\n    DebounceTimeSubscriber.prototype.clearDebounce = function () {\n        var debouncedSubscription = this.debouncedSubscription;\n        if (debouncedSubscription !== null) {\n            this.remove(debouncedSubscription);\n            debouncedSubscription.unsubscribe();\n            this.debouncedSubscription = null;\n        }\n    };\n    return DebounceTimeSubscriber;\n}(Subscriber));\nfunction dispatchNext(subscriber) {\n    subscriber.debouncedNext();\n}\n//# sourceMappingURL=debounceTime.js.map\n","/** PURE_IMPORTS_START tslib,_Subscription,_util_subscribeToResult,_OuterSubscriber PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscription } from '../Subscription';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\n/**\n * Buffers the source Observable values starting from an emission from\n * `openings` and ending when the output of `closingSelector` emits.\n *\n * <span class=\"informal\">Collects values from the past as an array. Starts\n * collecting only when `opening` emits, and calls the `closingSelector`\n * function to get an Observable that tells when to close the buffer.</span>\n *\n * <img src=\"./img/bufferToggle.png\" width=\"100%\">\n *\n * Buffers values from the source by opening the buffer via signals from an\n * Observable provided to `openings`, and closing and sending the buffers when\n * a Subscribable or Promise returned by the `closingSelector` function emits.\n *\n * @example <caption>Every other second, emit the click events from the next 500ms</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var openings = Rx.Observable.interval(1000);\n * var buffered = clicks.bufferToggle(openings, i =>\n *   i % 2 ? Rx.Observable.interval(500) : Rx.Observable.empty()\n * );\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n * @see {@link bufferTime}\n * @see {@link bufferWhen}\n * @see {@link windowToggle}\n *\n * @param {SubscribableOrPromise<O>} openings A Subscribable or Promise of notifications to start new\n * buffers.\n * @param {function(value: O): SubscribableOrPromise} closingSelector A function that takes\n * the value emitted by the `openings` observable and returns a Subscribable or Promise,\n * which, when it emits, signals that the associated buffer should be emitted\n * and cleared.\n * @return {Observable<T[]>} An observable of arrays of buffered values.\n * @method bufferToggle\n * @owner Observable\n */\nexport function bufferToggle(openings, closingSelector) {\n    return function bufferToggleOperatorFunction(source) {\n        return source.lift(new BufferToggleOperator(openings, closingSelector));\n    };\n}\nvar BufferToggleOperator = /*@__PURE__*/ (function () {\n    function BufferToggleOperator(openings, closingSelector) {\n        this.openings = openings;\n        this.closingSelector = closingSelector;\n    }\n    BufferToggleOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new BufferToggleSubscriber(subscriber, this.openings, this.closingSelector));\n    };\n    return BufferToggleOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar BufferToggleSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(BufferToggleSubscriber, _super);\n    function BufferToggleSubscriber(destination, openings, closingSelector) {\n        var _this = _super.call(this, destination) || this;\n        _this.openings = openings;\n        _this.closingSelector = closingSelector;\n        _this.contexts = [];\n        _this.add(subscribeToResult(_this, openings));\n        return _this;\n    }\n    BufferToggleSubscriber.prototype._next = function (value) {\n        var contexts = this.contexts;\n        var len = contexts.length;\n        for (var i = 0; i < len; i++) {\n            contexts[i].buffer.push(value);\n        }\n    };\n    BufferToggleSubscriber.prototype._error = function (err) {\n        var contexts = this.contexts;\n        while (contexts.length > 0) {\n            var context_1 = contexts.shift();\n            context_1.subscription.unsubscribe();\n            context_1.buffer = null;\n            context_1.subscription = null;\n        }\n        this.contexts = null;\n        _super.prototype._error.call(this, err);\n    };\n    BufferToggleSubscriber.prototype._complete = function () {\n        var contexts = this.contexts;\n        while (contexts.length > 0) {\n            var context_2 = contexts.shift();\n            this.destination.next(context_2.buffer);\n            context_2.subscription.unsubscribe();\n            context_2.buffer = null;\n            context_2.subscription = null;\n        }\n        this.contexts = null;\n        _super.prototype._complete.call(this);\n    };\n    BufferToggleSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        outerValue ? this.closeBuffer(outerValue) : this.openBuffer(innerValue);\n    };\n    BufferToggleSubscriber.prototype.notifyComplete = function (innerSub) {\n        this.closeBuffer(innerSub.context);\n    };\n    BufferToggleSubscriber.prototype.openBuffer = function (value) {\n        try {\n            var closingSelector = this.closingSelector;\n            var closingNotifier = closingSelector.call(this, value);\n            if (closingNotifier) {\n                this.trySubscribe(closingNotifier);\n            }\n        }\n        catch (err) {\n            this._error(err);\n        }\n    };\n    BufferToggleSubscriber.prototype.closeBuffer = function (context) {\n        var contexts = this.contexts;\n        if (contexts && context) {\n            var buffer = context.buffer, subscription = context.subscription;\n            this.destination.next(buffer);\n            contexts.splice(contexts.indexOf(context), 1);\n            this.remove(subscription);\n            subscription.unsubscribe();\n        }\n    };\n    BufferToggleSubscriber.prototype.trySubscribe = function (closingNotifier) {\n        var contexts = this.contexts;\n        var buffer = [];\n        var subscription = new Subscription();\n        var context = { buffer: buffer, subscription: subscription };\n        contexts.push(context);\n        var innerSubscription = subscribeToResult(this, closingNotifier, context);\n        if (!innerSubscription || innerSubscription.closed) {\n            this.closeBuffer(context);\n        }\n        else {\n            innerSubscription.context = context;\n            this.add(innerSubscription);\n            subscription.add(innerSubscription);\n        }\n    };\n    return BufferToggleSubscriber;\n}(OuterSubscriber));\n//# sourceMappingURL=bufferToggle.js.map\n","/** PURE_IMPORTS_START tslib,_Subscription,_util_tryCatch,_util_errorObject,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscription } from '../Subscription';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n/**\n * Buffers the source Observable values, using a factory function of closing\n * Observables to determine when to close, emit, and reset the buffer.\n *\n * <span class=\"informal\">Collects values from the past as an array. When it\n * starts collecting values, it calls a function that returns an Observable that\n * tells when to close the buffer and restart collecting.</span>\n *\n * <img src=\"./img/bufferWhen.png\" width=\"100%\">\n *\n * Opens a buffer immediately, then closes the buffer when the observable\n * returned by calling `closingSelector` function emits a value. When it closes\n * the buffer, it immediately opens a new buffer and repeats the process.\n *\n * @example <caption>Emit an array of the last clicks every [1-5] random seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferWhen(() =>\n *   Rx.Observable.interval(1000 + Math.random() * 4000)\n * );\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n * @see {@link bufferTime}\n * @see {@link bufferToggle}\n * @see {@link windowWhen}\n *\n * @param {function(): Observable} closingSelector A function that takes no\n * arguments and returns an Observable that signals buffer closure.\n * @return {Observable<T[]>} An observable of arrays of buffered values.\n * @method bufferWhen\n * @owner Observable\n */\nexport function bufferWhen(closingSelector) {\n    return function (source) {\n        return source.lift(new BufferWhenOperator(closingSelector));\n    };\n}\nvar BufferWhenOperator = /*@__PURE__*/ (function () {\n    function BufferWhenOperator(closingSelector) {\n        this.closingSelector = closingSelector;\n    }\n    BufferWhenOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new BufferWhenSubscriber(subscriber, this.closingSelector));\n    };\n    return BufferWhenOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar BufferWhenSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(BufferWhenSubscriber, _super);\n    function BufferWhenSubscriber(destination, closingSelector) {\n        var _this = _super.call(this, destination) || this;\n        _this.closingSelector = closingSelector;\n        _this.subscribing = false;\n        _this.openBuffer();\n        return _this;\n    }\n    BufferWhenSubscriber.prototype._next = function (value) {\n        this.buffer.push(value);\n    };\n    BufferWhenSubscriber.prototype._complete = function () {\n        var buffer = this.buffer;\n        if (buffer) {\n            this.destination.next(buffer);\n        }\n        _super.prototype._complete.call(this);\n    };\n    /** @deprecated This is an internal implementation detail, do not use. */\n    BufferWhenSubscriber.prototype._unsubscribe = function () {\n        this.buffer = null;\n        this.subscribing = false;\n    };\n    BufferWhenSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.openBuffer();\n    };\n    BufferWhenSubscriber.prototype.notifyComplete = function () {\n        if (this.subscribing) {\n            this.complete();\n        }\n        else {\n            this.openBuffer();\n        }\n    };\n    BufferWhenSubscriber.prototype.openBuffer = function () {\n        var closingSubscription = this.closingSubscription;\n        if (closingSubscription) {\n            this.remove(closingSubscription);\n            closingSubscription.unsubscribe();\n        }\n        var buffer = this.buffer;\n        if (this.buffer) {\n            this.destination.next(buffer);\n        }\n        this.buffer = [];\n        var closingNotifier = tryCatch(this.closingSelector)();\n        if (closingNotifier === errorObject) {\n            this.error(errorObject.e);\n        }\n        else {\n            closingSubscription = new Subscription();\n            this.closingSubscription = closingSubscription;\n            this.add(closingSubscription);\n            this.subscribing = true;\n            closingSubscription.add(subscribeToResult(this, closingNotifier));\n            this.subscribing = false;\n        }\n    };\n    return BufferWhenSubscriber;\n}(OuterSubscriber));\n//# sourceMappingURL=bufferWhen.js.map\n","/** PURE_IMPORTS_START tslib,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n/**\n * Catches errors on the observable to be handled by returning a new observable or throwing an error.\n *\n * <img src=\"./img/catch.png\" width=\"100%\">\n *\n * @example <caption>Continues with a different Observable when there's an error</caption>\n *\n * Observable.of(1, 2, 3, 4, 5)\n *   .map(n => {\n * \t   if (n == 4) {\n * \t     throw 'four!';\n *     }\n *\t   return n;\n *   })\n *   .catch(err => Observable.of('I', 'II', 'III', 'IV', 'V'))\n *   .subscribe(x => console.log(x));\n *   // 1, 2, 3, I, II, III, IV, V\n *\n * @example <caption>Retries the caught source Observable again in case of error, similar to retry() operator</caption>\n *\n * Observable.of(1, 2, 3, 4, 5)\n *   .map(n => {\n * \t   if (n === 4) {\n * \t     throw 'four!';\n *     }\n * \t   return n;\n *   })\n *   .catch((err, caught) => caught)\n *   .take(30)\n *   .subscribe(x => console.log(x));\n *   // 1, 2, 3, 1, 2, 3, ...\n *\n * @example <caption>Throws a new error when the source Observable throws an error</caption>\n *\n * Observable.of(1, 2, 3, 4, 5)\n *   .map(n => {\n *     if (n == 4) {\n *       throw 'four!';\n *     }\n *     return n;\n *   })\n *   .catch(err => {\n *     throw 'error in source. Details: ' + err;\n *   })\n *   .subscribe(\n *     x => console.log(x),\n *     err => console.log(err)\n *   );\n *   // 1, 2, 3, error in source. Details: four!\n *\n * @param {function} selector a function that takes as arguments `err`, which is the error, and `caught`, which\n *  is the source observable, in case you'd like to \"retry\" that observable by returning it again. Whatever observable\n *  is returned by the `selector` will be used to continue the observable chain.\n * @return {Observable} An observable that originates from either the source or the observable returned by the\n *  catch `selector` function.\n * @name catchError\n */\nexport function catchError(selector) {\n    return function catchErrorOperatorFunction(source) {\n        var operator = new CatchOperator(selector);\n        var caught = source.lift(operator);\n        return (operator.caught = caught);\n    };\n}\nvar CatchOperator = /*@__PURE__*/ (function () {\n    function CatchOperator(selector) {\n        this.selector = selector;\n    }\n    CatchOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new CatchSubscriber(subscriber, this.selector, this.caught));\n    };\n    return CatchOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar CatchSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(CatchSubscriber, _super);\n    function CatchSubscriber(destination, selector, caught) {\n        var _this = _super.call(this, destination) || this;\n        _this.selector = selector;\n        _this.caught = caught;\n        return _this;\n    }\n    // NOTE: overriding `error` instead of `_error` because we don't want\n    // to have this flag this subscriber as `isStopped`. We can mimic the\n    // behavior of the RetrySubscriber (from the `retry` operator), where\n    // we unsubscribe from our source chain, reset our Subscriber flags,\n    // then subscribe to the selector result.\n    CatchSubscriber.prototype.error = function (err) {\n        if (!this.isStopped) {\n            var result = void 0;\n            try {\n                result = this.selector(err, this.caught);\n            }\n            catch (err2) {\n                _super.prototype.error.call(this, err2);\n                return;\n            }\n            this._unsubscribeAndRecycle();\n            this.add(subscribeToResult(this, result));\n        }\n    };\n    return CatchSubscriber;\n}(OuterSubscriber));\n//# sourceMappingURL=catchError.js.map\n","/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\n/**\n * Counts the number of emissions on the source and emits that number when the\n * source completes.\n *\n * <span class=\"informal\">Tells how many values were emitted, when the source\n * completes.</span>\n *\n * <img src=\"./img/count.png\" width=\"100%\">\n *\n * `count` transforms an Observable that emits values into an Observable that\n * emits a single value that represents the number of values emitted by the\n * source Observable. If the source Observable terminates with an error, `count`\n * will pass this error notification along without emitting a value first. If\n * the source Observable does not terminate at all, `count` will neither emit\n * a value nor terminate. This operator takes an optional `predicate` function\n * as argument, in which case the output emission will represent the number of\n * source values that matched `true` with the `predicate`.\n *\n * @example <caption>Counts how many seconds have passed before the first click happened</caption>\n * var seconds = Rx.Observable.interval(1000);\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var secondsBeforeClick = seconds.takeUntil(clicks);\n * var result = secondsBeforeClick.count();\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Counts how many odd numbers are there between 1 and 7</caption>\n * var numbers = Rx.Observable.range(1, 7);\n * var result = numbers.count(i => i % 2 === 1);\n * result.subscribe(x => console.log(x));\n *\n * // Results in:\n * // 4\n *\n * @see {@link max}\n * @see {@link min}\n * @see {@link reduce}\n *\n * @param {function(value: T, i: number, source: Observable<T>): boolean} [predicate] A\n * boolean function to select what values are to be counted. It is provided with\n * arguments of:\n * - `value`: the value from the source Observable.\n * - `index`: the (zero-based) \"index\" of the value from the source Observable.\n * - `source`: the source Observable instance itself.\n * @return {Observable} An Observable of one number that represents the count as\n * described above.\n * @method count\n * @owner Observable\n */\nexport function count(predicate) {\n    return function (source) { return source.lift(new CountOperator(predicate, source)); };\n}\nvar CountOperator = /*@__PURE__*/ (function () {\n    function CountOperator(predicate, source) {\n        this.predicate = predicate;\n        this.source = source;\n    }\n    CountOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new CountSubscriber(subscriber, this.predicate, this.source));\n    };\n    return CountOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar CountSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(CountSubscriber, _super);\n    function CountSubscriber(destination, predicate, source) {\n        var _this = _super.call(this, destination) || this;\n        _this.predicate = predicate;\n        _this.source = source;\n        _this.count = 0;\n        _this.index = 0;\n        return _this;\n    }\n    CountSubscriber.prototype._next = function (value) {\n        if (this.predicate) {\n            this._tryPredicate(value);\n        }\n        else {\n            this.count++;\n        }\n    };\n    CountSubscriber.prototype._tryPredicate = function (value) {\n        var result;\n        try {\n            result = this.predicate(value, this.index++, this.source);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        if (result) {\n            this.count++;\n        }\n    };\n    CountSubscriber.prototype._complete = function () {\n        this.destination.next(this.count);\n        this.destination.complete();\n    };\n    return CountSubscriber;\n}(Subscriber));\n//# sourceMappingURL=count.js.map\n","/** PURE_IMPORTS_START tslib,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n/**\n * Emits a value from the source Observable only after a particular time span\n * determined by another Observable has passed without another source emission.\n *\n * <span class=\"informal\">It's like {@link debounceTime}, but the time span of\n * emission silence is determined by a second Observable.</span>\n *\n * <img src=\"./img/debounce.png\" width=\"100%\">\n *\n * `debounce` delays values emitted by the source Observable, but drops previous\n * pending delayed emissions if a new value arrives on the source Observable.\n * This operator keeps track of the most recent value from the source\n * Observable, and spawns a duration Observable by calling the\n * `durationSelector` function. The value is emitted only when the duration\n * Observable emits a value or completes, and if no other value was emitted on\n * the source Observable since the duration Observable was spawned. If a new\n * value appears before the duration Observable emits, the previous value will\n * be dropped and will not be emitted on the output Observable.\n *\n * Like {@link debounceTime}, this is a rate-limiting operator, and also a\n * delay-like operator since output emissions do not necessarily occur at the\n * same time as they did on the source Observable.\n *\n * @example <caption>Emit the most recent click after a burst of clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.debounce(() => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounceTime}\n * @see {@link delayWhen}\n * @see {@link throttle}\n *\n * @param {function(value: T): SubscribableOrPromise} durationSelector A function\n * that receives a value from the source Observable, for computing the timeout\n * duration for each source value, returned as an Observable or a Promise.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by the specified duration Observable returned by\n * `durationSelector`, and may drop some values if they occur too frequently.\n * @method debounce\n * @owner Observable\n */\nexport function debounce(durationSelector) {\n    return function (source) { return source.lift(new DebounceOperator(durationSelector)); };\n}\nvar DebounceOperator = /*@__PURE__*/ (function () {\n    function DebounceOperator(durationSelector) {\n        this.durationSelector = durationSelector;\n    }\n    DebounceOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new DebounceSubscriber(subscriber, this.durationSelector));\n    };\n    return DebounceOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar DebounceSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(DebounceSubscriber, _super);\n    function DebounceSubscriber(destination, durationSelector) {\n        var _this = _super.call(this, destination) || this;\n        _this.durationSelector = durationSelector;\n        _this.hasValue = false;\n        _this.durationSubscription = null;\n        return _this;\n    }\n    DebounceSubscriber.prototype._next = function (value) {\n        try {\n            var result = this.durationSelector.call(this, value);\n            if (result) {\n                this._tryNext(value, result);\n            }\n        }\n        catch (err) {\n            this.destination.error(err);\n        }\n    };\n    DebounceSubscriber.prototype._complete = function () {\n        this.emitValue();\n        this.destination.complete();\n    };\n    DebounceSubscriber.prototype._tryNext = function (value, duration) {\n        var subscription = this.durationSubscription;\n        this.value = value;\n        this.hasValue = true;\n        if (subscription) {\n            subscription.unsubscribe();\n            this.remove(subscription);\n        }\n        subscription = subscribeToResult(this, duration);\n        if (subscription && !subscription.closed) {\n            this.add(this.durationSubscription = subscription);\n        }\n    };\n    DebounceSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.emitValue();\n    };\n    DebounceSubscriber.prototype.notifyComplete = function () {\n        this.emitValue();\n    };\n    DebounceSubscriber.prototype.emitValue = function () {\n        if (this.hasValue) {\n            var value = this.value;\n            var subscription = this.durationSubscription;\n            if (subscription) {\n                this.durationSubscription = null;\n                subscription.unsubscribe();\n                this.remove(subscription);\n            }\n            // This must be done *before* passing the value\n            // along to the destination because it's possible for\n            // the value to synchronously re-enter this operator\n            // recursively if the duration selector Observable\n            // emits synchronously\n            this.value = null;\n            this.hasValue = false;\n            _super.prototype._next.call(this, value);\n        }\n    };\n    return DebounceSubscriber;\n}(OuterSubscriber));\n//# sourceMappingURL=debounce.js.map\n","/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\n/* tslint:enable:max-line-length */\n/**\n * Emits a given value if the source Observable completes without emitting any\n * `next` value, otherwise mirrors the source Observable.\n *\n * <span class=\"informal\">If the source Observable turns out to be empty, then\n * this operator will emit a default value.</span>\n *\n * <img src=\"./img/defaultIfEmpty.png\" width=\"100%\">\n *\n * `defaultIfEmpty` emits the values emitted by the source Observable or a\n * specified default value if the source Observable is empty (completes without\n * having emitted any `next` value).\n *\n * @example <caption>If no clicks happen in 5 seconds, then emit \"no clicks\"</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var clicksBeforeFive = clicks.takeUntil(Rx.Observable.interval(5000));\n * var result = clicksBeforeFive.defaultIfEmpty('no clicks');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link empty}\n * @see {@link last}\n *\n * @param {any} [defaultValue=null] The default value used if the source\n * Observable is empty.\n * @return {Observable} An Observable that emits either the specified\n * `defaultValue` if the source Observable emits no items, or the values emitted\n * by the source Observable.\n * @method defaultIfEmpty\n * @owner Observable\n */\nexport function defaultIfEmpty(defaultValue) {\n    if (defaultValue === void 0) {\n        defaultValue = null;\n    }\n    return function (source) { return source.lift(new DefaultIfEmptyOperator(defaultValue)); };\n}\nvar DefaultIfEmptyOperator = /*@__PURE__*/ (function () {\n    function DefaultIfEmptyOperator(defaultValue) {\n        this.defaultValue = defaultValue;\n    }\n    DefaultIfEmptyOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new DefaultIfEmptySubscriber(subscriber, this.defaultValue));\n    };\n    return DefaultIfEmptyOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar DefaultIfEmptySubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(DefaultIfEmptySubscriber, _super);\n    function DefaultIfEmptySubscriber(destination, defaultValue) {\n        var _this = _super.call(this, destination) || this;\n        _this.defaultValue = defaultValue;\n        _this.isEmpty = true;\n        return _this;\n    }\n    DefaultIfEmptySubscriber.prototype._next = function (value) {\n        this.isEmpty = false;\n        this.destination.next(value);\n    };\n    DefaultIfEmptySubscriber.prototype._complete = function () {\n        if (this.isEmpty) {\n            this.destination.next(this.defaultValue);\n        }\n        this.destination.complete();\n    };\n    return DefaultIfEmptySubscriber;\n}(Subscriber));\n//# sourceMappingURL=defaultIfEmpty.js.map\n","/** PURE_IMPORTS_START tslib,_scheduler_async,_util_isDate,_Subscriber,_Notification PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { async } from '../scheduler/async';\nimport { isDate } from '../util/isDate';\nimport { Subscriber } from '../Subscriber';\nimport { Notification } from '../Notification';\n/**\n * Delays the emission of items from the source Observable by a given timeout or\n * until a given Date.\n *\n * <span class=\"informal\">Time shifts each item by some specified amount of\n * milliseconds.</span>\n *\n * <img src=\"./img/delay.png\" width=\"100%\">\n *\n * If the delay argument is a Number, this operator time shifts the source\n * Observable by that amount of time expressed in milliseconds. The relative\n * time intervals between the values are preserved.\n *\n * If the delay argument is a Date, this operator time shifts the start of the\n * Observable execution until the given date occurs.\n *\n * @example <caption>Delay each click by one second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var delayedClicks = clicks.delay(1000); // each click emitted after 1 second\n * delayedClicks.subscribe(x => console.log(x));\n *\n * @example <caption>Delay all clicks until a future date happens</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var date = new Date('March 15, 2050 12:00:00'); // in the future\n * var delayedClicks = clicks.delay(date); // click emitted only after that date\n * delayedClicks.subscribe(x => console.log(x));\n *\n * @see {@link debounceTime}\n * @see {@link delayWhen}\n *\n * @param {number|Date} delay The delay duration in milliseconds (a `number`) or\n * a `Date` until which the emission of the source items is delayed.\n * @param {Scheduler} [scheduler=async] The IScheduler to use for\n * managing the timers that handle the time-shift for each item.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by the specified timeout or Date.\n * @method delay\n * @owner Observable\n */\nexport function delay(delay, scheduler) {\n    if (scheduler === void 0) {\n        scheduler = async;\n    }\n    var absoluteDelay = isDate(delay);\n    var delayFor = absoluteDelay ? (+delay - scheduler.now()) : Math.abs(delay);\n    return function (source) { return source.lift(new DelayOperator(delayFor, scheduler)); };\n}\nvar DelayOperator = /*@__PURE__*/ (function () {\n    function DelayOperator(delay, scheduler) {\n        this.delay = delay;\n        this.scheduler = scheduler;\n    }\n    DelayOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new DelaySubscriber(subscriber, this.delay, this.scheduler));\n    };\n    return DelayOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar DelaySubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(DelaySubscriber, _super);\n    function DelaySubscriber(destination, delay, scheduler) {\n        var _this = _super.call(this, destination) || this;\n        _this.delay = delay;\n        _this.scheduler = scheduler;\n        _this.queue = [];\n        _this.active = false;\n        _this.errored = false;\n        return _this;\n    }\n    DelaySubscriber.dispatch = function (state) {\n        var source = state.source;\n        var queue = source.queue;\n        var scheduler = state.scheduler;\n        var destination = state.destination;\n        while (queue.length > 0 && (queue[0].time - scheduler.now()) <= 0) {\n            queue.shift().notification.observe(destination);\n        }\n        if (queue.length > 0) {\n            var delay_1 = Math.max(0, queue[0].time - scheduler.now());\n            this.schedule(state, delay_1);\n        }\n        else {\n            this.unsubscribe();\n            source.active = false;\n        }\n    };\n    DelaySubscriber.prototype._schedule = function (scheduler) {\n        this.active = true;\n        this.add(scheduler.schedule(DelaySubscriber.dispatch, this.delay, {\n            source: this, destination: this.destination, scheduler: scheduler\n        }));\n    };\n    DelaySubscriber.prototype.scheduleNotification = function (notification) {\n        if (this.errored === true) {\n            return;\n        }\n        var scheduler = this.scheduler;\n        var message = new DelayMessage(scheduler.now() + this.delay, notification);\n        this.queue.push(message);\n        if (this.active === false) {\n            this._schedule(scheduler);\n        }\n    };\n    DelaySubscriber.prototype._next = function (value) {\n        this.scheduleNotification(Notification.createNext(value));\n    };\n    DelaySubscriber.prototype._error = function (err) {\n        this.errored = true;\n        this.queue = [];\n        this.destination.error(err);\n    };\n    DelaySubscriber.prototype._complete = function () {\n        this.scheduleNotification(Notification.createComplete());\n    };\n    return DelaySubscriber;\n}(Subscriber));\nvar DelayMessage = /*@__PURE__*/ (function () {\n    function DelayMessage(time, notification) {\n        this.time = time;\n        this.notification = notification;\n    }\n    return DelayMessage;\n}());\n//# sourceMappingURL=delay.js.map\n","/** PURE_IMPORTS_START tslib,_Subscriber,_Subscription PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\n/**\n * Returns an Observable that mirrors the source Observable, but will call a specified function when\n * the source terminates on complete or error.\n * @param {function} callback Function to be called when source terminates.\n * @return {Observable} An Observable that mirrors the source, but will call the specified function on termination.\n * @method finally\n * @owner Observable\n */\nexport function finalize(callback) {\n    return function (source) { return source.lift(new FinallyOperator(callback)); };\n}\nvar FinallyOperator = /*@__PURE__*/ (function () {\n    function FinallyOperator(callback) {\n        this.callback = callback;\n    }\n    FinallyOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new FinallySubscriber(subscriber, this.callback));\n    };\n    return FinallyOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar FinallySubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(FinallySubscriber, _super);\n    function FinallySubscriber(destination, callback) {\n        var _this = _super.call(this, destination) || this;\n        _this.add(new Subscription(callback));\n        return _this;\n    }\n    return FinallySubscriber;\n}(Subscriber));\n//# sourceMappingURL=finalize.js.map\n","/** PURE_IMPORTS_START tslib,_Subscriber,_Observable,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n/**\n * Delays the emission of items from the source Observable by a given time span\n * determined by the emissions of another Observable.\n *\n * <span class=\"informal\">It's like {@link delay}, but the time span of the\n * delay duration is determined by a second Observable.</span>\n *\n * <img src=\"./img/delayWhen.png\" width=\"100%\">\n *\n * `delayWhen` time shifts each emitted value from the source Observable by a\n * time span determined by another Observable. When the source emits a value,\n * the `delayDurationSelector` function is called with the source value as\n * argument, and should return an Observable, called the \"duration\" Observable.\n * The source value is emitted on the output Observable only when the duration\n * Observable emits a value or completes.\n *\n * Optionally, `delayWhen` takes a second argument, `subscriptionDelay`, which\n * is an Observable. When `subscriptionDelay` emits its first value or\n * completes, the source Observable is subscribed to and starts behaving like\n * described in the previous paragraph. If `subscriptionDelay` is not provided,\n * `delayWhen` will subscribe to the source Observable as soon as the output\n * Observable is subscribed.\n *\n * @example <caption>Delay each click by a random amount of time, between 0 and 5 seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var delayedClicks = clicks.delayWhen(event =>\n *   Rx.Observable.interval(Math.random() * 5000)\n * );\n * delayedClicks.subscribe(x => console.log(x));\n *\n * @see {@link debounce}\n * @see {@link delay}\n *\n * @param {function(value: T): Observable} delayDurationSelector A function that\n * returns an Observable for each value emitted by the source Observable, which\n * is then used to delay the emission of that item on the output Observable\n * until the Observable returned from this function emits a value.\n * @param {Observable} subscriptionDelay An Observable that triggers the\n * subscription to the source Observable once it emits any value.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by an amount of time specified by the Observable returned by\n * `delayDurationSelector`.\n * @method delayWhen\n * @owner Observable\n */\nexport function delayWhen(delayDurationSelector, subscriptionDelay) {\n    if (subscriptionDelay) {\n        return function (source) {\n            return new SubscriptionDelayObservable(source, subscriptionDelay)\n                .lift(new DelayWhenOperator(delayDurationSelector));\n        };\n    }\n    return function (source) { return source.lift(new DelayWhenOperator(delayDurationSelector)); };\n}\nvar DelayWhenOperator = /*@__PURE__*/ (function () {\n    function DelayWhenOperator(delayDurationSelector) {\n        this.delayDurationSelector = delayDurationSelector;\n    }\n    DelayWhenOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new DelayWhenSubscriber(subscriber, this.delayDurationSelector));\n    };\n    return DelayWhenOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar DelayWhenSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(DelayWhenSubscriber, _super);\n    function DelayWhenSubscriber(destination, delayDurationSelector) {\n        var _this = _super.call(this, destination) || this;\n        _this.delayDurationSelector = delayDurationSelector;\n        _this.completed = false;\n        _this.delayNotifierSubscriptions = [];\n        _this.values = [];\n        return _this;\n    }\n    DelayWhenSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.destination.next(outerValue);\n        this.removeSubscription(innerSub);\n        this.tryComplete();\n    };\n    DelayWhenSubscriber.prototype.notifyError = function (error, innerSub) {\n        this._error(error);\n    };\n    DelayWhenSubscriber.prototype.notifyComplete = function (innerSub) {\n        var value = this.removeSubscription(innerSub);\n        if (value) {\n            this.destination.next(value);\n        }\n        this.tryComplete();\n    };\n    DelayWhenSubscriber.prototype._next = function (value) {\n        try {\n            var delayNotifier = this.delayDurationSelector(value);\n            if (delayNotifier) {\n                this.tryDelay(delayNotifier, value);\n            }\n        }\n        catch (err) {\n            this.destination.error(err);\n        }\n    };\n    DelayWhenSubscriber.prototype._complete = function () {\n        this.completed = true;\n        this.tryComplete();\n    };\n    DelayWhenSubscriber.prototype.removeSubscription = function (subscription) {\n        subscription.unsubscribe();\n        var subscriptionIdx = this.delayNotifierSubscriptions.indexOf(subscription);\n        var value = null;\n        if (subscriptionIdx !== -1) {\n            value = this.values[subscriptionIdx];\n            this.delayNotifierSubscriptions.splice(subscriptionIdx, 1);\n            this.values.splice(subscriptionIdx, 1);\n        }\n        return value;\n    };\n    DelayWhenSubscriber.prototype.tryDelay = function (delayNotifier, value) {\n        var notifierSubscription = subscribeToResult(this, delayNotifier, value);\n        if (notifierSubscription && !notifierSubscription.closed) {\n            this.add(notifierSubscription);\n            this.delayNotifierSubscriptions.push(notifierSubscription);\n        }\n        this.values.push(value);\n    };\n    DelayWhenSubscriber.prototype.tryComplete = function () {\n        if (this.completed && this.delayNotifierSubscriptions.length === 0) {\n            this.destination.complete();\n        }\n    };\n    return DelayWhenSubscriber;\n}(OuterSubscriber));\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SubscriptionDelayObservable = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(SubscriptionDelayObservable, _super);\n    function SubscriptionDelayObservable(source, subscriptionDelay) {\n        var _this = _super.call(this) || this;\n        _this.source = source;\n        _this.subscriptionDelay = subscriptionDelay;\n        return _this;\n    }\n    /** @deprecated This is an internal implementation detail, do not use. */\n    SubscriptionDelayObservable.prototype._subscribe = function (subscriber) {\n        this.subscriptionDelay.subscribe(new SubscriptionDelaySubscriber(subscriber, this.source));\n    };\n    return SubscriptionDelayObservable;\n}(Observable));\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SubscriptionDelaySubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(SubscriptionDelaySubscriber, _super);\n    function SubscriptionDelaySubscriber(parent, source) {\n        var _this = _super.call(this) || this;\n        _this.parent = parent;\n        _this.source = source;\n        _this.sourceSubscribed = false;\n        return _this;\n    }\n    SubscriptionDelaySubscriber.prototype._next = function (unused) {\n        this.subscribeToSource();\n    };\n    SubscriptionDelaySubscriber.prototype._error = function (err) {\n        this.unsubscribe();\n        this.parent.error(err);\n    };\n    SubscriptionDelaySubscriber.prototype._complete = function () {\n        this.subscribeToSource();\n    };\n    SubscriptionDelaySubscriber.prototype.subscribeToSource = function () {\n        if (!this.sourceSubscribed) {\n            this.sourceSubscribed = true;\n            this.unsubscribe();\n            this.source.subscribe(this.parent);\n        }\n    };\n    return SubscriptionDelaySubscriber;\n}(Subscriber));\n//# sourceMappingURL=delayWhen.js.map\n","/** PURE_IMPORTS_START tslib,_Subscriber,_scheduler_async PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\nimport { async } from '../scheduler/async';\n/**\n * Emits the most recently emitted value from the source Observable within\n * periodic time intervals.\n *\n * <span class=\"informal\">Samples the source Observable at periodic time\n * intervals, emitting what it samples.</span>\n *\n * <img src=\"./img/sampleTime.png\" width=\"100%\">\n *\n * `sampleTime` periodically looks at the source Observable and emits whichever\n * value it has most recently emitted since the previous sampling, unless the\n * source has not emitted anything since the previous sampling. The sampling\n * happens periodically in time every `period` milliseconds (or the time unit\n * defined by the optional `scheduler` argument). The sampling starts as soon as\n * the output Observable is subscribed.\n *\n * @example <caption>Every second, emit the most recent click at most once</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.sampleTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounceTime}\n * @see {@link delay}\n * @see {@link sample}\n * @see {@link throttleTime}\n *\n * @param {number} period The sampling period expressed in milliseconds or the\n * time unit determined internally by the optional `scheduler`.\n * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for\n * managing the timers that handle the sampling.\n * @return {Observable<T>} An Observable that emits the results of sampling the\n * values emitted by the source Observable at the specified time interval.\n * @method sampleTime\n * @owner Observable\n */\nexport function sampleTime(period, scheduler) {\n    if (scheduler === void 0) {\n        scheduler = async;\n    }\n    return function (source) { return source.lift(new SampleTimeOperator(period, scheduler)); };\n}\nvar SampleTimeOperator = /*@__PURE__*/ (function () {\n    function SampleTimeOperator(period, scheduler) {\n        this.period = period;\n        this.scheduler = scheduler;\n    }\n    SampleTimeOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new SampleTimeSubscriber(subscriber, this.period, this.scheduler));\n    };\n    return SampleTimeOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SampleTimeSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(SampleTimeSubscriber, _super);\n    function SampleTimeSubscriber(destination, period, scheduler) {\n        var _this = _super.call(this, destination) || this;\n        _this.period = period;\n        _this.scheduler = scheduler;\n        _this.hasValue = false;\n        _this.add(scheduler.schedule(dispatchNotification, period, { subscriber: _this, period: period }));\n        return _this;\n    }\n    SampleTimeSubscriber.prototype._next = function (value) {\n        this.lastValue = value;\n        this.hasValue = true;\n    };\n    SampleTimeSubscriber.prototype.notifyNext = function () {\n        if (this.hasValue) {\n            this.hasValue = false;\n            this.destination.next(this.lastValue);\n        }\n    };\n    return SampleTimeSubscriber;\n}(Subscriber));\nfunction dispatchNotification(state) {\n    var subscriber = state.subscriber, period = state.period;\n    subscriber.notifyNext();\n    this.schedule(state, period);\n}\n//# sourceMappingURL=sampleTime.js.map\n","/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\n/**\n * Converts an Observable of {@link Notification} objects into the emissions\n * that they represent.\n *\n * <span class=\"informal\">Unwraps {@link Notification} objects as actual `next`,\n * `error` and `complete` emissions. The opposite of {@link materialize}.</span>\n *\n * <img src=\"./img/dematerialize.png\" width=\"100%\">\n *\n * `dematerialize` is assumed to operate an Observable that only emits\n * {@link Notification} objects as `next` emissions, and does not emit any\n * `error`. Such Observable is the output of a `materialize` operation. Those\n * notifications are then unwrapped using the metadata they contain, and emitted\n * as `next`, `error`, and `complete` on the output Observable.\n *\n * Use this operator in conjunction with {@link materialize}.\n *\n * @example <caption>Convert an Observable of Notifications to an actual Observable</caption>\n * var notifA = new Rx.Notification('N', 'A');\n * var notifB = new Rx.Notification('N', 'B');\n * var notifE = new Rx.Notification('E', void 0,\n *   new TypeError('x.toUpperCase is not a function')\n * );\n * var materialized = Rx.Observable.of(notifA, notifB, notifE);\n * var upperCase = materialized.dematerialize();\n * upperCase.subscribe(x => console.log(x), e => console.error(e));\n *\n * // Results in:\n * // A\n * // B\n * // TypeError: x.toUpperCase is not a function\n *\n * @see {@link Notification}\n * @see {@link materialize}\n *\n * @return {Observable} An Observable that emits items and notifications\n * embedded in Notification objects emitted by the source Observable.\n * @method dematerialize\n * @owner Observable\n */\nexport function dematerialize() {\n    return function dematerializeOperatorFunction(source) {\n        return source.lift(new DeMaterializeOperator());\n    };\n}\nvar DeMaterializeOperator = /*@__PURE__*/ (function () {\n    function DeMaterializeOperator() {\n    }\n    DeMaterializeOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new DeMaterializeSubscriber(subscriber));\n    };\n    return DeMaterializeOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar DeMaterializeSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(DeMaterializeSubscriber, _super);\n    function DeMaterializeSubscriber(destination) {\n        return _super.call(this, destination) || this;\n    }\n    DeMaterializeSubscriber.prototype._next = function (value) {\n        value.observe(this.destination);\n    };\n    return DeMaterializeSubscriber;\n}(Subscriber));\n//# sourceMappingURL=dematerialize.js.map\n","/** PURE_IMPORTS_START tslib,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n/**\n * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from previous items.\n *\n * If a keySelector function is provided, then it will project each value from the source observable into a new value that it will\n * check for equality with previously projected values. If a keySelector function is not provided, it will use each value from the\n * source observable directly with an equality check against previous values.\n *\n * In JavaScript runtimes that support `Set`, this operator will use a `Set` to improve performance of the distinct value checking.\n *\n * In other runtimes, this operator will use a minimal implementation of `Set` that relies on an `Array` and `indexOf` under the\n * hood, so performance will degrade as more values are checked for distinction. Even in newer browsers, a long-running `distinct`\n * use might result in memory leaks. To help alleviate this in some scenarios, an optional `flushes` parameter is also provided so\n * that the internal `Set` can be \"flushed\", basically clearing it of values.\n *\n * @example <caption>A simple example with numbers</caption>\n * Observable.of(1, 1, 2, 2, 2, 1, 2, 3, 4, 3, 2, 1)\n *   .distinct()\n *   .subscribe(x => console.log(x)); // 1, 2, 3, 4\n *\n * @example <caption>An example using a keySelector function</caption>\n * interface Person {\n *    age: number,\n *    name: string\n * }\n *\n * Observable.of<Person>(\n *     { age: 4, name: 'Foo'},\n *     { age: 7, name: 'Bar'},\n *     { age: 5, name: 'Foo'})\n *     .distinct((p: Person) => p.name)\n *     .subscribe(x => console.log(x));\n *\n * // displays:\n * // { age: 4, name: 'Foo' }\n * // { age: 7, name: 'Bar' }\n *\n * @see {@link distinctUntilChanged}\n * @see {@link distinctUntilKeyChanged}\n *\n * @param {function} [keySelector] Optional function to select which value you want to check as distinct.\n * @param {Observable} [flushes] Optional Observable for flushing the internal HashSet of the operator.\n * @return {Observable} An Observable that emits items from the source Observable with distinct values.\n * @method distinct\n * @owner Observable\n */\nexport function distinct(keySelector, flushes) {\n    return function (source) { return source.lift(new DistinctOperator(keySelector, flushes)); };\n}\nvar DistinctOperator = /*@__PURE__*/ (function () {\n    function DistinctOperator(keySelector, flushes) {\n        this.keySelector = keySelector;\n        this.flushes = flushes;\n    }\n    DistinctOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new DistinctSubscriber(subscriber, this.keySelector, this.flushes));\n    };\n    return DistinctOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar DistinctSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(DistinctSubscriber, _super);\n    function DistinctSubscriber(destination, keySelector, flushes) {\n        var _this = _super.call(this, destination) || this;\n        _this.keySelector = keySelector;\n        _this.values = new Set();\n        if (flushes) {\n            _this.add(subscribeToResult(_this, flushes));\n        }\n        return _this;\n    }\n    DistinctSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.values.clear();\n    };\n    DistinctSubscriber.prototype.notifyError = function (error, innerSub) {\n        this._error(error);\n    };\n    DistinctSubscriber.prototype._next = function (value) {\n        if (this.keySelector) {\n            this._useKeySelector(value);\n        }\n        else {\n            this._finalizeNext(value, value);\n        }\n    };\n    DistinctSubscriber.prototype._useKeySelector = function (value) {\n        var key;\n        var destination = this.destination;\n        try {\n            key = this.keySelector(value);\n        }\n        catch (err) {\n            destination.error(err);\n            return;\n        }\n        this._finalizeNext(key, value);\n    };\n    DistinctSubscriber.prototype._finalizeNext = function (key, value) {\n        var values = this.values;\n        if (!values.has(key)) {\n            values.add(key);\n            this.destination.next(value);\n        }\n    };\n    return DistinctSubscriber;\n}(OuterSubscriber));\nexport { DistinctSubscriber };\n//# sourceMappingURL=distinct.js.map\n","/** PURE_IMPORTS_START tslib,_Subscriber,_util_tryCatch,_util_errorObject PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\n/* tslint:enable:max-line-length */\n/**\n * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from the previous item.\n *\n * If a comparator function is provided, then it will be called for each item to test for whether or not that value should be emitted.\n *\n * If a comparator function is not provided, an equality check is used by default.\n *\n * @example <caption>A simple example with numbers</caption>\n * Observable.of(1, 1, 2, 2, 2, 1, 1, 2, 3, 3, 4)\n *   .distinctUntilChanged()\n *   .subscribe(x => console.log(x)); // 1, 2, 1, 2, 3, 4\n *\n * @example <caption>An example using a compare function</caption>\n * interface Person {\n *    age: number,\n *    name: string\n * }\n *\n * Observable.of<Person>(\n *     { age: 4, name: 'Foo'},\n *     { age: 7, name: 'Bar'},\n *     { age: 5, name: 'Foo'})\n *     { age: 6, name: 'Foo'})\n *     .distinctUntilChanged((p: Person, q: Person) => p.name === q.name)\n *     .subscribe(x => console.log(x));\n *\n * // displays:\n * // { age: 4, name: 'Foo' }\n * // { age: 7, name: 'Bar' }\n * // { age: 5, name: 'Foo' }\n *\n * @see {@link distinct}\n * @see {@link distinctUntilKeyChanged}\n *\n * @param {function} [compare] Optional comparison function called to test if an item is distinct from the previous item in the source.\n * @return {Observable} An Observable that emits items from the source Observable with distinct values.\n * @method distinctUntilChanged\n * @owner Observable\n */\nexport function distinctUntilChanged(compare, keySelector) {\n    return function (source) { return source.lift(new DistinctUntilChangedOperator(compare, keySelector)); };\n}\nvar DistinctUntilChangedOperator = /*@__PURE__*/ (function () {\n    function DistinctUntilChangedOperator(compare, keySelector) {\n        this.compare = compare;\n        this.keySelector = keySelector;\n    }\n    DistinctUntilChangedOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new DistinctUntilChangedSubscriber(subscriber, this.compare, this.keySelector));\n    };\n    return DistinctUntilChangedOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar DistinctUntilChangedSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(DistinctUntilChangedSubscriber, _super);\n    function DistinctUntilChangedSubscriber(destination, compare, keySelector) {\n        var _this = _super.call(this, destination) || this;\n        _this.keySelector = keySelector;\n        _this.hasKey = false;\n        if (typeof compare === 'function') {\n            _this.compare = compare;\n        }\n        return _this;\n    }\n    DistinctUntilChangedSubscriber.prototype.compare = function (x, y) {\n        return x === y;\n    };\n    DistinctUntilChangedSubscriber.prototype._next = function (value) {\n        var keySelector = this.keySelector;\n        var key = value;\n        if (keySelector) {\n            key = tryCatch(this.keySelector)(value);\n            if (key === errorObject) {\n                return this.destination.error(errorObject.e);\n            }\n        }\n        var result = false;\n        if (this.hasKey) {\n            result = tryCatch(this.compare)(this.key, key);\n            if (result === errorObject) {\n                return this.destination.error(errorObject.e);\n            }\n        }\n        else {\n            this.hasKey = true;\n        }\n        if (Boolean(result) === false) {\n            this.key = key;\n            this.destination.next(value);\n        }\n    };\n    return DistinctUntilChangedSubscriber;\n}(Subscriber));\n//# sourceMappingURL=distinctUntilChanged.js.map\n","/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\n/* tslint:enable:max-line-length */\n/**\n * Filter items emitted by the source Observable by only emitting those that\n * satisfy a specified predicate.\n *\n * <span class=\"informal\">Like\n * [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter),\n * it only emits a value from the source if it passes a criterion function.</span>\n *\n * <img src=\"./img/filter.png\" width=\"100%\">\n *\n * Similar to the well-known `Array.prototype.filter` method, this operator\n * takes values from the source Observable, passes them through a `predicate`\n * function and only emits those values that yielded `true`.\n *\n * @example <caption>Emit only click events whose target was a DIV element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var clicksOnDivs = clicks.filter(ev => ev.target.tagName === 'DIV');\n * clicksOnDivs.subscribe(x => console.log(x));\n *\n * @see {@link distinct}\n * @see {@link distinctUntilChanged}\n * @see {@link distinctUntilKeyChanged}\n * @see {@link ignoreElements}\n * @see {@link partition}\n * @see {@link skip}\n *\n * @param {function(value: T, index: number): boolean} predicate A function that\n * evaluates each value emitted by the source Observable. If it returns `true`,\n * the value is emitted, if `false` the value is not passed to the output\n * Observable. The `index` parameter is the number `i` for the i-th source\n * emission that has happened since the subscription, starting from the number\n * `0`.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {Observable} An Observable of values from the source that were\n * allowed by the `predicate` function.\n * @method filter\n * @owner Observable\n */\nexport function filter(predicate, thisArg) {\n    return function filterOperatorFunction(source) {\n        return source.lift(new FilterOperator(predicate, thisArg));\n    };\n}\nvar FilterOperator = /*@__PURE__*/ (function () {\n    function FilterOperator(predicate, thisArg) {\n        this.predicate = predicate;\n        this.thisArg = thisArg;\n    }\n    FilterOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new FilterSubscriber(subscriber, this.predicate, this.thisArg));\n    };\n    return FilterOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar FilterSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(FilterSubscriber, _super);\n    function FilterSubscriber(destination, predicate, thisArg) {\n        var _this = _super.call(this, destination) || this;\n        _this.predicate = predicate;\n        _this.thisArg = thisArg;\n        _this.count = 0;\n        return _this;\n    }\n    // the try catch block below is left specifically for\n    // optimization and perf reasons. a tryCatcher is not necessary here.\n    FilterSubscriber.prototype._next = function (value) {\n        var result;\n        try {\n            result = this.predicate.call(this.thisArg, value, this.count++);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        if (result) {\n            this.destination.next(value);\n        }\n    };\n    return FilterSubscriber;\n}(Subscriber));\n//# sourceMappingURL=filter.js.map\n","/** PURE_IMPORTS_START tslib,_Subscriber,_util_noop,_util_isFunction PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\nimport { noop } from '../util/noop';\nimport { isFunction } from '../util/isFunction';\n/* tslint:enable:max-line-length */\n/**\n * Perform a side effect for every emission on the source Observable, but return\n * an Observable that is identical to the source.\n *\n * <span class=\"informal\">Intercepts each emission on the source and runs a\n * function, but returns an output which is identical to the source as long as errors don't occur.</span>\n *\n * <img src=\"./img/do.png\" width=\"100%\">\n *\n * Returns a mirrored Observable of the source Observable, but modified so that\n * the provided Observer is called to perform a side effect for every value,\n * error, and completion emitted by the source. Any errors that are thrown in\n * the aforementioned Observer or handlers are safely sent down the error path\n * of the output Observable.\n *\n * This operator is useful for debugging your Observables for the correct values\n * or performing other side effects.\n *\n * Note: this is different to a `subscribe` on the Observable. If the Observable\n * returned by `do` is not subscribed, the side effects specified by the\n * Observer will never happen. `do` therefore simply spies on existing\n * execution, it does not trigger an execution to happen like `subscribe` does.\n *\n * @example <caption>Map every click to the clientX position of that click, while also logging the click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var positions = clicks\n *   .do(ev => console.log(ev))\n *   .map(ev => ev.clientX);\n * positions.subscribe(x => console.log(x));\n *\n * @see {@link map}\n * @see {@link subscribe}\n *\n * @param {Observer|function} [nextOrObserver] A normal Observer object or a\n * callback for `next`.\n * @param {function} [error] Callback for errors in the source.\n * @param {function} [complete] Callback for the completion of the source.\n * @return {Observable} An Observable identical to the source, but runs the\n * specified Observer or callback(s) for each item.\n * @name tap\n */\nexport function tap(nextOrObserver, error, complete) {\n    return function tapOperatorFunction(source) {\n        return source.lift(new DoOperator(nextOrObserver, error, complete));\n    };\n}\nvar DoOperator = /*@__PURE__*/ (function () {\n    function DoOperator(nextOrObserver, error, complete) {\n        this.nextOrObserver = nextOrObserver;\n        this.error = error;\n        this.complete = complete;\n    }\n    DoOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new TapSubscriber(subscriber, this.nextOrObserver, this.error, this.complete));\n    };\n    return DoOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar TapSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(TapSubscriber, _super);\n    function TapSubscriber(destination, observerOrNext, error, complete) {\n        var _this = _super.call(this, destination) || this;\n        _this._tapNext = noop;\n        _this._tapError = noop;\n        _this._tapComplete = noop;\n        _this._tapError = error || noop;\n        _this._tapComplete = complete || noop;\n        if (isFunction(observerOrNext)) {\n            _this._context = _this;\n            _this._tapNext = observerOrNext;\n        }\n        else if (observerOrNext) {\n            _this._context = observerOrNext;\n            _this._tapNext = observerOrNext.next || noop;\n            _this._tapError = observerOrNext.error || noop;\n            _this._tapComplete = observerOrNext.complete || noop;\n        }\n        return _this;\n    }\n    TapSubscriber.prototype._next = function (value) {\n        try {\n            this._tapNext.call(this._context, value);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        this.destination.next(value);\n    };\n    TapSubscriber.prototype._error = function (err) {\n        try {\n            this._tapError.call(this._context, err);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        this.destination.error(err);\n    };\n    TapSubscriber.prototype._complete = function () {\n        try {\n            this._tapComplete.call(this._context);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        return this.destination.complete();\n    };\n    return TapSubscriber;\n}(Subscriber));\n//# sourceMappingURL=tap.js.map\n","/** PURE_IMPORTS_START tslib,_Subscriber,_util_ArgumentOutOfRangeError,_observable_empty PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\nimport { ArgumentOutOfRangeError } from '../util/ArgumentOutOfRangeError';\nimport { empty } from '../observable/empty';\n/**\n * Emits only the first `count` values emitted by the source Observable.\n *\n * <span class=\"informal\">Takes the first `count` values from the source, then\n * completes.</span>\n *\n * <img src=\"./img/take.png\" width=\"100%\">\n *\n * `take` returns an Observable that emits only the first `count` values emitted\n * by the source Observable. If the source emits fewer than `count` values then\n * all of its values are emitted. After that, it completes, regardless if the\n * source completes.\n *\n * @example <caption>Take the first 5 seconds of an infinite 1-second interval Observable</caption>\n * var interval = Rx.Observable.interval(1000);\n * var five = interval.take(5);\n * five.subscribe(x => console.log(x));\n *\n * @see {@link takeLast}\n * @see {@link takeUntil}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @throws {ArgumentOutOfRangeError} When using `take(i)`, it delivers an\n * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0`.\n *\n * @param {number} count The maximum number of `next` values to emit.\n * @return {Observable<T>} An Observable that emits only the first `count`\n * values emitted by the source Observable, or all of the values from the source\n * if the source emits fewer than `count` values.\n * @method take\n * @owner Observable\n */\nexport function take(count) {\n    return function (source) {\n        if (count === 0) {\n            return empty();\n        }\n        else {\n            return source.lift(new TakeOperator(count));\n        }\n    };\n}\nvar TakeOperator = /*@__PURE__*/ (function () {\n    function TakeOperator(total) {\n        this.total = total;\n        if (this.total < 0) {\n            throw new ArgumentOutOfRangeError;\n        }\n    }\n    TakeOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new TakeSubscriber(subscriber, this.total));\n    };\n    return TakeOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar TakeSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(TakeSubscriber, _super);\n    function TakeSubscriber(destination, total) {\n        var _this = _super.call(this, destination) || this;\n        _this.total = total;\n        _this.count = 0;\n        return _this;\n    }\n    TakeSubscriber.prototype._next = function (value) {\n        var total = this.total;\n        var count = ++this.count;\n        if (count <= total) {\n            this.destination.next(value);\n            if (count === total) {\n                this.destination.complete();\n                this.unsubscribe();\n            }\n        }\n    };\n    return TakeSubscriber;\n}(Subscriber));\n//# sourceMappingURL=take.js.map\n","/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\n/**\n * Returns an Observable that emits whether or not every item of the source satisfies the condition specified.\n *\n * @example <caption>A simple example emitting true if all elements are less than 5, false otherwise</caption>\n *  Observable.of(1, 2, 3, 4, 5, 6)\n *     .every(x => x < 5)\n *     .subscribe(x => console.log(x)); // -> false\n *\n * @param {function} predicate A function for determining if an item meets a specified condition.\n * @param {any} [thisArg] Optional object to use for `this` in the callback.\n * @return {Observable} An Observable of booleans that determines if all items of the source Observable meet the condition specified.\n * @method every\n * @owner Observable\n */\nexport function every(predicate, thisArg) {\n    return function (source) { return source.lift(new EveryOperator(predicate, thisArg, source)); };\n}\nvar EveryOperator = /*@__PURE__*/ (function () {\n    function EveryOperator(predicate, thisArg, source) {\n        this.predicate = predicate;\n        this.thisArg = thisArg;\n        this.source = source;\n    }\n    EveryOperator.prototype.call = function (observer, source) {\n        return source.subscribe(new EverySubscriber(observer, this.predicate, this.thisArg, this.source));\n    };\n    return EveryOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar EverySubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(EverySubscriber, _super);\n    function EverySubscriber(destination, predicate, thisArg, source) {\n        var _this = _super.call(this, destination) || this;\n        _this.predicate = predicate;\n        _this.thisArg = thisArg;\n        _this.source = source;\n        _this.index = 0;\n        _this.thisArg = thisArg || _this;\n        return _this;\n    }\n    EverySubscriber.prototype.notifyComplete = function (everyValueMatch) {\n        this.destination.next(everyValueMatch);\n        this.destination.complete();\n    };\n    EverySubscriber.prototype._next = function (value) {\n        var result = false;\n        try {\n            result = this.predicate.call(this.thisArg, value, this.index++, this.source);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        if (!result) {\n            this.notifyComplete(false);\n        }\n    };\n    EverySubscriber.prototype._complete = function () {\n        this.notifyComplete(true);\n    };\n    return EverySubscriber;\n}(Subscriber));\n//# sourceMappingURL=every.js.map\n","/** PURE_IMPORTS_START tslib,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n/**\n * Converts a higher-order Observable into a first-order Observable by dropping\n * inner Observables while the previous inner Observable has not yet completed.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables by dropping the\n * next inner Observables while the current inner is still executing.</span>\n *\n * <img src=\"./img/exhaust.png\" width=\"100%\">\n *\n * `exhaust` subscribes to an Observable that emits Observables, also known as a\n * higher-order Observable. Each time it observes one of these emitted inner\n * Observables, the output Observable begins emitting the items emitted by that\n * inner Observable. So far, it behaves like {@link mergeAll}. However,\n * `exhaust` ignores every new inner Observable if the previous Observable has\n * not yet completed. Once that one completes, it will accept and flatten the\n * next inner Observable and repeat this process.\n *\n * @example <caption>Run a finite timer for each click, only if there is no currently active timer</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000).take(5));\n * var result = higherOrder.exhaust();\n * result.subscribe(x => console.log(x));\n *\n * @see {@link combineAll}\n * @see {@link concatAll}\n * @see {@link switch}\n * @see {@link mergeAll}\n * @see {@link exhaustMap}\n * @see {@link zipAll}\n *\n * @return {Observable} An Observable that takes a source of Observables and propagates the first observable\n * exclusively until it completes before subscribing to the next.\n * @method exhaust\n * @owner Observable\n */\nexport function exhaust() {\n    return function (source) { return source.lift(new SwitchFirstOperator()); };\n}\nvar SwitchFirstOperator = /*@__PURE__*/ (function () {\n    function SwitchFirstOperator() {\n    }\n    SwitchFirstOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new SwitchFirstSubscriber(subscriber));\n    };\n    return SwitchFirstOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SwitchFirstSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(SwitchFirstSubscriber, _super);\n    function SwitchFirstSubscriber(destination) {\n        var _this = _super.call(this, destination) || this;\n        _this.hasCompleted = false;\n        _this.hasSubscription = false;\n        return _this;\n    }\n    SwitchFirstSubscriber.prototype._next = function (value) {\n        if (!this.hasSubscription) {\n            this.hasSubscription = true;\n            this.add(subscribeToResult(this, value));\n        }\n    };\n    SwitchFirstSubscriber.prototype._complete = function () {\n        this.hasCompleted = true;\n        if (!this.hasSubscription) {\n            this.destination.complete();\n        }\n    };\n    SwitchFirstSubscriber.prototype.notifyComplete = function (innerSub) {\n        this.remove(innerSub);\n        this.hasSubscription = false;\n        if (this.hasCompleted) {\n            this.destination.complete();\n        }\n    };\n    return SwitchFirstSubscriber;\n}(OuterSubscriber));\n//# sourceMappingURL=exhaust.js.map\n","/** PURE_IMPORTS_START tslib,_OuterSubscriber,_util_subscribeToResult,_map,_observable_from PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { map } from './map';\nimport { from } from '../observable/from';\n/* tslint:enable:max-line-length */\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable only if the previous projected Observable has completed.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link exhaust}.</span>\n *\n * <img src=\"./img/exhaustMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an (so-called \"inner\") Observable. When it projects a source value to\n * an Observable, the output Observable begins emitting the items emitted by\n * that projected Observable. However, `exhaustMap` ignores every new projected\n * Observable if the previous projected Observable has not yet completed. Once\n * that one completes, it will accept and flatten the next projected Observable\n * and repeat this process.\n *\n * @example <caption>Run a finite timer for each click, only if there is no currently active timer</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.exhaustMap((ev) => Rx.Observable.interval(1000).take(5));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMap}\n * @see {@link exhaust}\n * @see {@link mergeMap}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @return {Observable} An Observable containing projected Observables\n * of each item of the source, ignoring projected Observables that start before\n * their preceding Observable has completed.\n * @method exhaustMap\n * @owner Observable\n */\nexport function exhaustMap(project, resultSelector) {\n    if (resultSelector) {\n        // DEPRECATED PATH\n        return function (source) { return source.pipe(exhaustMap(function (a, i) { return from(project(a, i)).pipe(map(function (b, ii) { return resultSelector(a, b, i, ii); })); })); };\n    }\n    return function (source) {\n        return source.lift(new ExhauseMapOperator(project));\n    };\n}\nvar ExhauseMapOperator = /*@__PURE__*/ (function () {\n    function ExhauseMapOperator(project) {\n        this.project = project;\n    }\n    ExhauseMapOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new ExhaustMapSubscriber(subscriber, this.project));\n    };\n    return ExhauseMapOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar ExhaustMapSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(ExhaustMapSubscriber, _super);\n    function ExhaustMapSubscriber(destination, project) {\n        var _this = _super.call(this, destination) || this;\n        _this.project = project;\n        _this.hasSubscription = false;\n        _this.hasCompleted = false;\n        _this.index = 0;\n        return _this;\n    }\n    ExhaustMapSubscriber.prototype._next = function (value) {\n        if (!this.hasSubscription) {\n            this.tryNext(value);\n        }\n    };\n    ExhaustMapSubscriber.prototype.tryNext = function (value) {\n        var index = this.index++;\n        var destination = this.destination;\n        try {\n            var result = this.project(value, index);\n            this.hasSubscription = true;\n            this.add(subscribeToResult(this, result, value, index));\n        }\n        catch (err) {\n            destination.error(err);\n        }\n    };\n    ExhaustMapSubscriber.prototype._complete = function () {\n        this.hasCompleted = true;\n        if (!this.hasSubscription) {\n            this.destination.complete();\n        }\n    };\n    ExhaustMapSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.destination.next(innerValue);\n    };\n    ExhaustMapSubscriber.prototype.notifyError = function (err) {\n        this.destination.error(err);\n    };\n    ExhaustMapSubscriber.prototype.notifyComplete = function (innerSub) {\n        this.remove(innerSub);\n        this.hasSubscription = false;\n        if (this.hasCompleted) {\n            this.destination.complete();\n        }\n    };\n    return ExhaustMapSubscriber;\n}(OuterSubscriber));\n//# sourceMappingURL=exhaustMap.js.map\n","/** PURE_IMPORTS_START tslib,_util_tryCatch,_util_errorObject,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n/* tslint:enable:max-line-length */\n/**\n * Recursively projects each source value to an Observable which is merged in\n * the output Observable.\n *\n * <span class=\"informal\">It's similar to {@link mergeMap}, but applies the\n * projection function to every source value as well as every output value.\n * It's recursive.</span>\n *\n * <img src=\"./img/expand.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an Observable, and then merging those resulting Observables and\n * emitting the results of this merger. *Expand* will re-emit on the output\n * Observable every source value. Then, each output value is given to the\n * `project` function which returns an inner Observable to be merged on the\n * output Observable. Those output values resulting from the projection are also\n * given to the `project` function to produce new output values. This is how\n * *expand* behaves recursively.\n *\n * @example <caption>Start emitting the powers of two on every click, at most 10 of them</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var powersOfTwo = clicks\n *   .mapTo(1)\n *   .expand(x => Rx.Observable.of(2 * x).delay(1000))\n *   .take(10);\n * powersOfTwo.subscribe(x => console.log(x));\n *\n * @see {@link mergeMap}\n * @see {@link mergeScan}\n *\n * @param {function(value: T, index: number) => Observable} project A function\n * that, when applied to an item emitted by the source or the output Observable,\n * returns an Observable.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @param {Scheduler} [scheduler=null] The IScheduler to use for subscribing to\n * each projected inner Observable.\n * @return {Observable} An Observable that emits the source values and also\n * result of applying the projection function to each value emitted on the\n * output Observable and and merging the results of the Observables obtained\n * from this transformation.\n * @method expand\n * @owner Observable\n */\nexport function expand(project, concurrent, scheduler) {\n    if (concurrent === void 0) {\n        concurrent = Number.POSITIVE_INFINITY;\n    }\n    if (scheduler === void 0) {\n        scheduler = undefined;\n    }\n    concurrent = (concurrent || 0) < 1 ? Number.POSITIVE_INFINITY : concurrent;\n    return function (source) { return source.lift(new ExpandOperator(project, concurrent, scheduler)); };\n}\nvar ExpandOperator = /*@__PURE__*/ (function () {\n    function ExpandOperator(project, concurrent, scheduler) {\n        this.project = project;\n        this.concurrent = concurrent;\n        this.scheduler = scheduler;\n    }\n    ExpandOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new ExpandSubscriber(subscriber, this.project, this.concurrent, this.scheduler));\n    };\n    return ExpandOperator;\n}());\nexport { ExpandOperator };\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar ExpandSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(ExpandSubscriber, _super);\n    function ExpandSubscriber(destination, project, concurrent, scheduler) {\n        var _this = _super.call(this, destination) || this;\n        _this.project = project;\n        _this.concurrent = concurrent;\n        _this.scheduler = scheduler;\n        _this.index = 0;\n        _this.active = 0;\n        _this.hasCompleted = false;\n        if (concurrent < Number.POSITIVE_INFINITY) {\n            _this.buffer = [];\n        }\n        return _this;\n    }\n    ExpandSubscriber.dispatch = function (arg) {\n        var subscriber = arg.subscriber, result = arg.result, value = arg.value, index = arg.index;\n        subscriber.subscribeToProjection(result, value, index);\n    };\n    ExpandSubscriber.prototype._next = function (value) {\n        var destination = this.destination;\n        if (destination.closed) {\n            this._complete();\n            return;\n        }\n        var index = this.index++;\n        if (this.active < this.concurrent) {\n            destination.next(value);\n            var result = tryCatch(this.project)(value, index);\n            if (result === errorObject) {\n                destination.error(errorObject.e);\n            }\n            else if (!this.scheduler) {\n                this.subscribeToProjection(result, value, index);\n            }\n            else {\n                var state = { subscriber: this, result: result, value: value, index: index };\n                this.add(this.scheduler.schedule(ExpandSubscriber.dispatch, 0, state));\n            }\n        }\n        else {\n            this.buffer.push(value);\n        }\n    };\n    ExpandSubscriber.prototype.subscribeToProjection = function (result, value, index) {\n        this.active++;\n        this.add(subscribeToResult(this, result, value, index));\n    };\n    ExpandSubscriber.prototype._complete = function () {\n        this.hasCompleted = true;\n        if (this.hasCompleted && this.active === 0) {\n            this.destination.complete();\n        }\n    };\n    ExpandSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this._next(innerValue);\n    };\n    ExpandSubscriber.prototype.notifyComplete = function (innerSub) {\n        var buffer = this.buffer;\n        this.remove(innerSub);\n        this.active--;\n        if (buffer && buffer.length > 0) {\n            this._next(buffer.shift());\n        }\n        if (this.hasCompleted && this.active === 0) {\n            this.destination.complete();\n        }\n    };\n    return ExpandSubscriber;\n}(OuterSubscriber));\nexport { ExpandSubscriber };\n//# sourceMappingURL=expand.js.map\n","/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\n/**\n * Emits only the first value emitted by the source Observable that meets some\n * condition.\n *\n * <span class=\"informal\">Finds the first value that passes some test and emits\n * that.</span>\n *\n * <img src=\"./img/find.png\" width=\"100%\">\n *\n * `find` searches for the first item in the source Observable that matches the\n * specified condition embodied by the `predicate`, and returns the first\n * occurrence in the source. Unlike {@link first}, the `predicate` is required\n * in `find`, and does not emit an error if a valid value is not found.\n *\n * @example <caption>Find and emit the first click that happens on a DIV element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.find(ev => ev.target.tagName === 'DIV');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link filter}\n * @see {@link first}\n * @see {@link findIndex}\n * @see {@link take}\n *\n * @param {function(value: T, index: number, source: Observable<T>): boolean} predicate\n * A function called with each item to test for condition matching.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {Observable<T>} An Observable of the first item that matches the\n * condition.\n * @method find\n * @owner Observable\n */\nexport function find(predicate, thisArg) {\n    if (typeof predicate !== 'function') {\n        throw new TypeError('predicate is not a function');\n    }\n    return function (source) { return source.lift(new FindValueOperator(predicate, source, false, thisArg)); };\n}\nvar FindValueOperator = /*@__PURE__*/ (function () {\n    function FindValueOperator(predicate, source, yieldIndex, thisArg) {\n        this.predicate = predicate;\n        this.source = source;\n        this.yieldIndex = yieldIndex;\n        this.thisArg = thisArg;\n    }\n    FindValueOperator.prototype.call = function (observer, source) {\n        return source.subscribe(new FindValueSubscriber(observer, this.predicate, this.source, this.yieldIndex, this.thisArg));\n    };\n    return FindValueOperator;\n}());\nexport { FindValueOperator };\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar FindValueSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(FindValueSubscriber, _super);\n    function FindValueSubscriber(destination, predicate, source, yieldIndex, thisArg) {\n        var _this = _super.call(this, destination) || this;\n        _this.predicate = predicate;\n        _this.source = source;\n        _this.yieldIndex = yieldIndex;\n        _this.thisArg = thisArg;\n        _this.index = 0;\n        return _this;\n    }\n    FindValueSubscriber.prototype.notifyComplete = function (value) {\n        var destination = this.destination;\n        destination.next(value);\n        destination.complete();\n    };\n    FindValueSubscriber.prototype._next = function (value) {\n        var _a = this, predicate = _a.predicate, thisArg = _a.thisArg;\n        var index = this.index++;\n        try {\n            var result = predicate.call(thisArg || this, value, index, this.source);\n            if (result) {\n                this.notifyComplete(this.yieldIndex ? index : value);\n            }\n        }\n        catch (err) {\n            this.destination.error(err);\n        }\n    };\n    FindValueSubscriber.prototype._complete = function () {\n        this.notifyComplete(this.yieldIndex ? -1 : undefined);\n    };\n    return FindValueSubscriber;\n}(Subscriber));\nexport { FindValueSubscriber };\n//# sourceMappingURL=find.js.map\n","/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\n/**\n * Ignores all items emitted by the source Observable and only passes calls of `complete` or `error`.\n *\n * <img src=\"./img/ignoreElements.png\" width=\"100%\">\n *\n * @return {Observable} An empty Observable that only calls `complete`\n * or `error`, based on which one is called by the source Observable.\n * @method ignoreElements\n * @owner Observable\n */\nexport function ignoreElements() {\n    return function ignoreElementsOperatorFunction(source) {\n        return source.lift(new IgnoreElementsOperator());\n    };\n}\nvar IgnoreElementsOperator = /*@__PURE__*/ (function () {\n    function IgnoreElementsOperator() {\n    }\n    IgnoreElementsOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new IgnoreElementsSubscriber(subscriber));\n    };\n    return IgnoreElementsOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar IgnoreElementsSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(IgnoreElementsSubscriber, _super);\n    function IgnoreElementsSubscriber() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    IgnoreElementsSubscriber.prototype._next = function (unused) {\n        // Do nothing\n    };\n    return IgnoreElementsSubscriber;\n}(Subscriber));\n//# sourceMappingURL=ignoreElements.js.map\n","/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\nexport function isEmpty() {\n    return function (source) { return source.lift(new IsEmptyOperator()); };\n}\nvar IsEmptyOperator = /*@__PURE__*/ (function () {\n    function IsEmptyOperator() {\n    }\n    IsEmptyOperator.prototype.call = function (observer, source) {\n        return source.subscribe(new IsEmptySubscriber(observer));\n    };\n    return IsEmptyOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar IsEmptySubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(IsEmptySubscriber, _super);\n    function IsEmptySubscriber(destination) {\n        return _super.call(this, destination) || this;\n    }\n    IsEmptySubscriber.prototype.notifyComplete = function (isEmpty) {\n        var destination = this.destination;\n        destination.next(isEmpty);\n        destination.complete();\n    };\n    IsEmptySubscriber.prototype._next = function (value) {\n        this.notifyComplete(false);\n    };\n    IsEmptySubscriber.prototype._complete = function () {\n        this.notifyComplete(true);\n    };\n    return IsEmptySubscriber;\n}(Subscriber));\n//# sourceMappingURL=isEmpty.js.map\n","/** PURE_IMPORTS_START tslib,_Subscriber,_util_ArgumentOutOfRangeError,_observable_empty PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\nimport { ArgumentOutOfRangeError } from '../util/ArgumentOutOfRangeError';\nimport { empty } from '../observable/empty';\n/**\n * Emits only the last `count` values emitted by the source Observable.\n *\n * <span class=\"informal\">Remembers the latest `count` values, then emits those\n * only when the source completes.</span>\n *\n * <img src=\"./img/takeLast.png\" width=\"100%\">\n *\n * `takeLast` returns an Observable that emits at most the last `count` values\n * emitted by the source Observable. If the source emits fewer than `count`\n * values then all of its values are emitted. This operator must wait until the\n * `complete` notification emission from the source in order to emit the `next`\n * values on the output Observable, because otherwise it is impossible to know\n * whether or not more values will be emitted on the source. For this reason,\n * all values are emitted synchronously, followed by the complete notification.\n *\n * @example <caption>Take the last 3 values of an Observable with many values</caption>\n * var many = Rx.Observable.range(1, 100);\n * var lastThree = many.pipe(takeLast(3));\n * lastThree.subscribe(x => console.log(x));\n *\n * @see {@link take}\n * @see {@link takeUntil}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @throws {ArgumentOutOfRangeError} When using `takeLast(i)`, it delivers an\n * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0`.\n *\n * @param {number} count The maximum number of values to emit from the end of\n * the sequence of values emitted by the source Observable.\n * @return {Observable<T>} An Observable that emits at most the last count\n * values emitted by the source Observable.\n * @method takeLast\n * @owner Observable\n */\nexport function takeLast(count) {\n    return function takeLastOperatorFunction(source) {\n        if (count === 0) {\n            return empty();\n        }\n        else {\n            return source.lift(new TakeLastOperator(count));\n        }\n    };\n}\nvar TakeLastOperator = /*@__PURE__*/ (function () {\n    function TakeLastOperator(total) {\n        this.total = total;\n        if (this.total < 0) {\n            throw new ArgumentOutOfRangeError;\n        }\n    }\n    TakeLastOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new TakeLastSubscriber(subscriber, this.total));\n    };\n    return TakeLastOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar TakeLastSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(TakeLastSubscriber, _super);\n    function TakeLastSubscriber(destination, total) {\n        var _this = _super.call(this, destination) || this;\n        _this.total = total;\n        _this.ring = new Array();\n        _this.count = 0;\n        return _this;\n    }\n    TakeLastSubscriber.prototype._next = function (value) {\n        var ring = this.ring;\n        var total = this.total;\n        var count = this.count++;\n        if (ring.length < total) {\n            ring.push(value);\n        }\n        else {\n            var index = count % total;\n            ring[index] = value;\n        }\n    };\n    TakeLastSubscriber.prototype._complete = function () {\n        var destination = this.destination;\n        var count = this.count;\n        if (count > 0) {\n            var total = this.count >= this.total ? this.total : this.count;\n            var ring = this.ring;\n            for (var i = 0; i < total; i++) {\n                var idx = (count++) % total;\n                destination.next(ring[idx]);\n            }\n        }\n        destination.complete();\n    };\n    return TakeLastSubscriber;\n}(Subscriber));\n//# sourceMappingURL=takeLast.js.map\n","/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\n/**\n * Emits the given constant value on the output Observable every time the source\n * Observable emits a value.\n *\n * <span class=\"informal\">Like {@link map}, but it maps every source value to\n * the same output value every time.</span>\n *\n * <img src=\"./img/mapTo.png\" width=\"100%\">\n *\n * Takes a constant `value` as argument, and emits that whenever the source\n * Observable emits a value. In other words, ignores the actual source value,\n * and simply uses the emission moment to know when to emit the given `value`.\n *\n * @example <caption>Map every click to the string 'Hi'</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var greetings = clicks.mapTo('Hi');\n * greetings.subscribe(x => console.log(x));\n *\n * @see {@link map}\n *\n * @param {any} value The value to map each source value to.\n * @return {Observable} An Observable that emits the given `value` every time\n * the source Observable emits something.\n * @method mapTo\n * @owner Observable\n */\nexport function mapTo(value) {\n    return function (source) { return source.lift(new MapToOperator(value)); };\n}\nvar MapToOperator = /*@__PURE__*/ (function () {\n    function MapToOperator(value) {\n        this.value = value;\n    }\n    MapToOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new MapToSubscriber(subscriber, this.value));\n    };\n    return MapToOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar MapToSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(MapToSubscriber, _super);\n    function MapToSubscriber(destination, value) {\n        var _this = _super.call(this, destination) || this;\n        _this.value = value;\n        return _this;\n    }\n    MapToSubscriber.prototype._next = function (x) {\n        this.destination.next(this.value);\n    };\n    return MapToSubscriber;\n}(Subscriber));\n//# sourceMappingURL=mapTo.js.map\n","/** PURE_IMPORTS_START tslib,_Subscriber,_Notification PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\nimport { Notification } from '../Notification';\n/**\n * Represents all of the notifications from the source Observable as `next`\n * emissions marked with their original types within {@link Notification}\n * objects.\n *\n * <span class=\"informal\">Wraps `next`, `error` and `complete` emissions in\n * {@link Notification} objects, emitted as `next` on the output Observable.\n * </span>\n *\n * <img src=\"./img/materialize.png\" width=\"100%\">\n *\n * `materialize` returns an Observable that emits a `next` notification for each\n * `next`, `error`, or `complete` emission of the source Observable. When the\n * source Observable emits `complete`, the output Observable will emit `next` as\n * a Notification of type \"complete\", and then it will emit `complete` as well.\n * When the source Observable emits `error`, the output will emit `next` as a\n * Notification of type \"error\", and then `complete`.\n *\n * This operator is useful for producing metadata of the source Observable, to\n * be consumed as `next` emissions. Use it in conjunction with\n * {@link dematerialize}.\n *\n * @example <caption>Convert a faulty Observable to an Observable of Notifications</caption>\n * var letters = Rx.Observable.of('a', 'b', 13, 'd');\n * var upperCase = letters.map(x => x.toUpperCase());\n * var materialized = upperCase.materialize();\n * materialized.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // - Notification {kind: \"N\", value: \"A\", error: undefined, hasValue: true}\n * // - Notification {kind: \"N\", value: \"B\", error: undefined, hasValue: true}\n * // - Notification {kind: \"E\", value: undefined, error: TypeError:\n * //   x.toUpperCase is not a function at MapSubscriber.letters.map.x\n * //   [as project] (http://1…, hasValue: false}\n *\n * @see {@link Notification}\n * @see {@link dematerialize}\n *\n * @return {Observable<Notification<T>>} An Observable that emits\n * {@link Notification} objects that wrap the original emissions from the source\n * Observable with metadata.\n * @method materialize\n * @owner Observable\n */\nexport function materialize() {\n    return function materializeOperatorFunction(source) {\n        return source.lift(new MaterializeOperator());\n    };\n}\nvar MaterializeOperator = /*@__PURE__*/ (function () {\n    function MaterializeOperator() {\n    }\n    MaterializeOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new MaterializeSubscriber(subscriber));\n    };\n    return MaterializeOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar MaterializeSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(MaterializeSubscriber, _super);\n    function MaterializeSubscriber(destination) {\n        return _super.call(this, destination) || this;\n    }\n    MaterializeSubscriber.prototype._next = function (value) {\n        this.destination.next(Notification.createNext(value));\n    };\n    MaterializeSubscriber.prototype._error = function (err) {\n        var destination = this.destination;\n        destination.next(Notification.createError(err));\n        destination.complete();\n    };\n    MaterializeSubscriber.prototype._complete = function () {\n        var destination = this.destination;\n        destination.next(Notification.createComplete());\n        destination.complete();\n    };\n    return MaterializeSubscriber;\n}(Subscriber));\n//# sourceMappingURL=materialize.js.map\n","/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\n/* tslint:enable:max-line-length */\n/**\n * Applies an accumulator function over the source Observable, and returns each\n * intermediate result, with an optional seed value.\n *\n * <span class=\"informal\">It's like {@link reduce}, but emits the current\n * accumulation whenever the source emits a value.</span>\n *\n * <img src=\"./img/scan.png\" width=\"100%\">\n *\n * Combines together all values emitted on the source, using an accumulator\n * function that knows how to join a new source value into the accumulation from\n * the past. Is similar to {@link reduce}, but emits the intermediate\n * accumulations.\n *\n * Returns an Observable that applies a specified `accumulator` function to each\n * item emitted by the source Observable. If a `seed` value is specified, then\n * that value will be used as the initial value for the accumulator. If no seed\n * value is specified, the first item of the source is used as the seed.\n *\n * @example <caption>Count the number of click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var ones = clicks.mapTo(1);\n * var seed = 0;\n * var count = ones.scan((acc, one) => acc + one, seed);\n * count.subscribe(x => console.log(x));\n *\n * @see {@link expand}\n * @see {@link mergeScan}\n * @see {@link reduce}\n *\n * @param {function(acc: R, value: T, index: number): R} accumulator\n * The accumulator function called on each source value.\n * @param {T|R} [seed] The initial accumulation value.\n * @return {Observable<R>} An observable of the accumulated values.\n * @method scan\n * @owner Observable\n */\nexport function scan(accumulator, seed) {\n    var hasSeed = false;\n    // providing a seed of `undefined` *should* be valid and trigger\n    // hasSeed! so don't use `seed !== undefined` checks!\n    // For this reason, we have to check it here at the original call site\n    // otherwise inside Operator/Subscriber we won't know if `undefined`\n    // means they didn't provide anything or if they literally provided `undefined`\n    if (arguments.length >= 2) {\n        hasSeed = true;\n    }\n    return function scanOperatorFunction(source) {\n        return source.lift(new ScanOperator(accumulator, seed, hasSeed));\n    };\n}\nvar ScanOperator = /*@__PURE__*/ (function () {\n    function ScanOperator(accumulator, seed, hasSeed) {\n        if (hasSeed === void 0) {\n            hasSeed = false;\n        }\n        this.accumulator = accumulator;\n        this.seed = seed;\n        this.hasSeed = hasSeed;\n    }\n    ScanOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new ScanSubscriber(subscriber, this.accumulator, this.seed, this.hasSeed));\n    };\n    return ScanOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar ScanSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(ScanSubscriber, _super);\n    function ScanSubscriber(destination, accumulator, _seed, hasSeed) {\n        var _this = _super.call(this, destination) || this;\n        _this.accumulator = accumulator;\n        _this._seed = _seed;\n        _this.hasSeed = hasSeed;\n        _this.index = 0;\n        return _this;\n    }\n    Object.defineProperty(ScanSubscriber.prototype, \"seed\", {\n        get: function () {\n            return this._seed;\n        },\n        set: function (value) {\n            this.hasSeed = true;\n            this._seed = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    ScanSubscriber.prototype._next = function (value) {\n        if (!this.hasSeed) {\n            this.seed = value;\n            this.destination.next(value);\n        }\n        else {\n            return this._tryNext(value);\n        }\n    };\n    ScanSubscriber.prototype._tryNext = function (value) {\n        var index = this.index++;\n        var result;\n        try {\n            result = this.accumulator(this.seed, value, index);\n        }\n        catch (err) {\n            this.destination.error(err);\n        }\n        this.seed = result;\n        this.destination.next(result);\n    };\n    return ScanSubscriber;\n}(Subscriber));\n//# sourceMappingURL=scan.js.map\n","/** PURE_IMPORTS_START tslib,_util_tryCatch,_util_errorObject,_util_subscribeToResult,_OuterSubscriber PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\n/**\n * Applies an accumulator function over the source Observable where the\n * accumulator function itself returns an Observable, then each intermediate\n * Observable returned is merged into the output Observable.\n *\n * <span class=\"informal\">It's like {@link scan}, but the Observables returned\n * by the accumulator are merged into the outer Observable.</span>\n *\n * @example <caption>Count the number of click events</caption>\n * const click$ = Rx.Observable.fromEvent(document, 'click');\n * const one$ = click$.mapTo(1);\n * const seed = 0;\n * const count$ = one$.mergeScan((acc, one) => Rx.Observable.of(acc + one), seed);\n * count$.subscribe(x => console.log(x));\n *\n * // Results:\n * 1\n * 2\n * 3\n * 4\n * // ...and so on for each click\n *\n * @param {function(acc: R, value: T): Observable<R>} accumulator\n * The accumulator function called on each source value.\n * @param seed The initial accumulation value.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of\n * input Observables being subscribed to concurrently.\n * @return {Observable<R>} An observable of the accumulated values.\n * @method mergeScan\n * @owner Observable\n */\nexport function mergeScan(accumulator, seed, concurrent) {\n    if (concurrent === void 0) {\n        concurrent = Number.POSITIVE_INFINITY;\n    }\n    return function (source) { return source.lift(new MergeScanOperator(accumulator, seed, concurrent)); };\n}\nvar MergeScanOperator = /*@__PURE__*/ (function () {\n    function MergeScanOperator(accumulator, seed, concurrent) {\n        this.accumulator = accumulator;\n        this.seed = seed;\n        this.concurrent = concurrent;\n    }\n    MergeScanOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new MergeScanSubscriber(subscriber, this.accumulator, this.seed, this.concurrent));\n    };\n    return MergeScanOperator;\n}());\nexport { MergeScanOperator };\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar MergeScanSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(MergeScanSubscriber, _super);\n    function MergeScanSubscriber(destination, accumulator, acc, concurrent) {\n        var _this = _super.call(this, destination) || this;\n        _this.accumulator = accumulator;\n        _this.acc = acc;\n        _this.concurrent = concurrent;\n        _this.hasValue = false;\n        _this.hasCompleted = false;\n        _this.buffer = [];\n        _this.active = 0;\n        _this.index = 0;\n        return _this;\n    }\n    MergeScanSubscriber.prototype._next = function (value) {\n        if (this.active < this.concurrent) {\n            var index = this.index++;\n            var ish = tryCatch(this.accumulator)(this.acc, value);\n            var destination = this.destination;\n            if (ish === errorObject) {\n                destination.error(errorObject.e);\n            }\n            else {\n                this.active++;\n                this._innerSub(ish, value, index);\n            }\n        }\n        else {\n            this.buffer.push(value);\n        }\n    };\n    MergeScanSubscriber.prototype._innerSub = function (ish, value, index) {\n        this.add(subscribeToResult(this, ish, value, index));\n    };\n    MergeScanSubscriber.prototype._complete = function () {\n        this.hasCompleted = true;\n        if (this.active === 0 && this.buffer.length === 0) {\n            if (this.hasValue === false) {\n                this.destination.next(this.acc);\n            }\n            this.destination.complete();\n        }\n    };\n    MergeScanSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        var destination = this.destination;\n        this.acc = innerValue;\n        this.hasValue = true;\n        destination.next(innerValue);\n    };\n    MergeScanSubscriber.prototype.notifyComplete = function (innerSub) {\n        var buffer = this.buffer;\n        this.remove(innerSub);\n        this.active--;\n        if (buffer.length > 0) {\n            this._next(buffer.shift());\n        }\n        else if (this.active === 0 && this.hasCompleted) {\n            if (this.hasValue === false) {\n                this.destination.next(this.acc);\n            }\n            this.destination.complete();\n        }\n    };\n    return MergeScanSubscriber;\n}(OuterSubscriber));\nexport { MergeScanSubscriber };\n//# sourceMappingURL=mergeScan.js.map\n","/** PURE_IMPORTS_START tslib,_observable_from,_util_isArray,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { from } from '../observable/from';\nimport { isArray } from '../util/isArray';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n/* tslint:enable:max-line-length */\n/**\n * When any of the provided Observable emits an complete or error notification, it immediately subscribes to the next one\n * that was passed.\n *\n * <span class=\"informal\">Execute series of Observables no matter what, even if it means swallowing errors.</span>\n *\n * <img src=\"./img/onErrorResumeNext.png\" width=\"100%\">\n *\n * `onErrorResumeNext` is an operator that accepts a series of Observables, provided either directly as\n * arguments or as an array. If no single Observable is provided, returned Observable will simply behave the same\n * as the source.\n *\n * `onErrorResumeNext` returns an Observable that starts by subscribing and re-emitting values from the source Observable.\n * When its stream of values ends - no matter if Observable completed or emitted an error - `onErrorResumeNext`\n * will subscribe to the first Observable that was passed as an argument to the method. It will start re-emitting\n * its values as well and - again - when that stream ends, `onErrorResumeNext` will proceed to subscribing yet another\n * Observable in provided series, no matter if previous Observable completed or ended with an error. This will\n * be happening until there is no more Observables left in the series, at which point returned Observable will\n * complete - even if the last subscribed stream ended with an error.\n *\n * `onErrorResumeNext` can be therefore thought of as version of {@link concat} operator, which is more permissive\n * when it comes to the errors emitted by its input Observables. While `concat` subscribes to the next Observable\n * in series only if previous one successfully completed, `onErrorResumeNext` subscribes even if it ended with\n * an error.\n *\n * Note that you do not get any access to errors emitted by the Observables. In particular do not\n * expect these errors to appear in error callback passed to {@link subscribe}. If you want to take\n * specific actions based on what error was emitted by an Observable, you should try out {@link catch} instead.\n *\n *\n * @example <caption>Subscribe to the next Observable after map fails</caption>\n * Rx.Observable.of(1, 2, 3, 0)\n *   .map(x => {\n *       if (x === 0) { throw Error(); }\n         return 10 / x;\n *   })\n *   .onErrorResumeNext(Rx.Observable.of(1, 2, 3))\n *   .subscribe(\n *     val => console.log(val),\n *     err => console.log(err),          // Will never be called.\n *     () => console.log('that\\'s it!')\n *   );\n *\n * // Logs:\n * // 10\n * // 5\n * // 3.3333333333333335\n * // 1\n * // 2\n * // 3\n * // \"that's it!\"\n *\n * @see {@link concat}\n * @see {@link catch}\n *\n * @param {...ObservableInput} observables Observables passed either directly or as an array.\n * @return {Observable} An Observable that emits values from source Observable, but - if it errors - subscribes\n * to the next passed Observable and so on, until it completes or runs out of Observables.\n * @method onErrorResumeNext\n * @owner Observable\n */\nexport function onErrorResumeNext() {\n    var nextSources = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        nextSources[_i] = arguments[_i];\n    }\n    if (nextSources.length === 1 && isArray(nextSources[0])) {\n        nextSources = nextSources[0];\n    }\n    return function (source) { return source.lift(new OnErrorResumeNextOperator(nextSources)); };\n}\n/* tslint:enable:max-line-length */\nexport function onErrorResumeNextStatic() {\n    var nextSources = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        nextSources[_i] = arguments[_i];\n    }\n    var source = null;\n    if (nextSources.length === 1 && isArray(nextSources[0])) {\n        nextSources = nextSources[0];\n    }\n    source = nextSources.shift();\n    return from(source, null).lift(new OnErrorResumeNextOperator(nextSources));\n}\nvar OnErrorResumeNextOperator = /*@__PURE__*/ (function () {\n    function OnErrorResumeNextOperator(nextSources) {\n        this.nextSources = nextSources;\n    }\n    OnErrorResumeNextOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new OnErrorResumeNextSubscriber(subscriber, this.nextSources));\n    };\n    return OnErrorResumeNextOperator;\n}());\nvar OnErrorResumeNextSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(OnErrorResumeNextSubscriber, _super);\n    function OnErrorResumeNextSubscriber(destination, nextSources) {\n        var _this = _super.call(this, destination) || this;\n        _this.destination = destination;\n        _this.nextSources = nextSources;\n        return _this;\n    }\n    OnErrorResumeNextSubscriber.prototype.notifyError = function (error, innerSub) {\n        this.subscribeToNextSource();\n    };\n    OnErrorResumeNextSubscriber.prototype.notifyComplete = function (innerSub) {\n        this.subscribeToNextSource();\n    };\n    OnErrorResumeNextSubscriber.prototype._error = function (err) {\n        this.subscribeToNextSource();\n    };\n    OnErrorResumeNextSubscriber.prototype._complete = function () {\n        this.subscribeToNextSource();\n    };\n    OnErrorResumeNextSubscriber.prototype.subscribeToNextSource = function () {\n        var next = this.nextSources.shift();\n        if (next) {\n            this.add(subscribeToResult(this, next));\n        }\n        else {\n            this.destination.complete();\n        }\n    };\n    return OnErrorResumeNextSubscriber;\n}(OuterSubscriber));\n//# sourceMappingURL=onErrorResumeNext.js.map\n","/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\n/**\n * Groups pairs of consecutive emissions together and emits them as an array of\n * two values.\n *\n * <span class=\"informal\">Puts the current value and previous value together as\n * an array, and emits that.</span>\n *\n * <img src=\"./img/pairwise.png\" width=\"100%\">\n *\n * The Nth emission from the source Observable will cause the output Observable\n * to emit an array [(N-1)th, Nth] of the previous and the current value, as a\n * pair. For this reason, `pairwise` emits on the second and subsequent\n * emissions from the source Observable, but not on the first emission, because\n * there is no previous value in that case.\n *\n * @example <caption>On every click (starting from the second), emit the relative distance to the previous click</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var pairs = clicks.pairwise();\n * var distance = pairs.map(pair => {\n *   var x0 = pair[0].clientX;\n *   var y0 = pair[0].clientY;\n *   var x1 = pair[1].clientX;\n *   var y1 = pair[1].clientY;\n *   return Math.sqrt(Math.pow(x0 - x1, 2) + Math.pow(y0 - y1, 2));\n * });\n * distance.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n *\n * @return {Observable<Array<T>>} An Observable of pairs (as arrays) of\n * consecutive values from the source Observable.\n * @method pairwise\n * @owner Observable\n */\nexport function pairwise() {\n    return function (source) { return source.lift(new PairwiseOperator()); };\n}\nvar PairwiseOperator = /*@__PURE__*/ (function () {\n    function PairwiseOperator() {\n    }\n    PairwiseOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new PairwiseSubscriber(subscriber));\n    };\n    return PairwiseOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar PairwiseSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(PairwiseSubscriber, _super);\n    function PairwiseSubscriber(destination) {\n        var _this = _super.call(this, destination) || this;\n        _this.hasPrev = false;\n        return _this;\n    }\n    PairwiseSubscriber.prototype._next = function (value) {\n        if (this.hasPrev) {\n            this.destination.next([this.prev, value]);\n        }\n        else {\n            this.hasPrev = true;\n        }\n        this.prev = value;\n    };\n    return PairwiseSubscriber;\n}(Subscriber));\n//# sourceMappingURL=pairwise.js.map\n","/** PURE_IMPORTS_START tslib,_Subscriber,_observable_empty PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\nimport { empty } from '../observable/empty';\n/**\n * Returns an Observable that repeats the stream of items emitted by the source Observable at most count times.\n *\n * <img src=\"./img/repeat.png\" width=\"100%\">\n *\n * @param {number} [count] The number of times the source Observable items are repeated, a count of 0 will yield\n * an empty Observable.\n * @return {Observable} An Observable that repeats the stream of items emitted by the source Observable at most\n * count times.\n * @method repeat\n * @owner Observable\n */\nexport function repeat(count) {\n    if (count === void 0) {\n        count = -1;\n    }\n    return function (source) {\n        if (count === 0) {\n            return empty();\n        }\n        else if (count < 0) {\n            return source.lift(new RepeatOperator(-1, source));\n        }\n        else {\n            return source.lift(new RepeatOperator(count - 1, source));\n        }\n    };\n}\nvar RepeatOperator = /*@__PURE__*/ (function () {\n    function RepeatOperator(count, source) {\n        this.count = count;\n        this.source = source;\n    }\n    RepeatOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new RepeatSubscriber(subscriber, this.count, this.source));\n    };\n    return RepeatOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar RepeatSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(RepeatSubscriber, _super);\n    function RepeatSubscriber(destination, count, source) {\n        var _this = _super.call(this, destination) || this;\n        _this.count = count;\n        _this.source = source;\n        return _this;\n    }\n    RepeatSubscriber.prototype.complete = function () {\n        if (!this.isStopped) {\n            var _a = this, source = _a.source, count = _a.count;\n            if (count === 0) {\n                return _super.prototype.complete.call(this);\n            }\n            else if (count > -1) {\n                this.count = count - 1;\n            }\n            source.subscribe(this._unsubscribeAndRecycle());\n        }\n    };\n    return RepeatSubscriber;\n}(Subscriber));\n//# sourceMappingURL=repeat.js.map\n","/** PURE_IMPORTS_START tslib,_Subject,_util_tryCatch,_util_errorObject,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subject } from '../Subject';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n/**\n * Returns an Observable that mirrors the source Observable with the exception of a `complete`. If the source\n * Observable calls `complete`, this method will emit to the Observable returned from `notifier`. If that Observable\n * calls `complete` or `error`, then this method will call `complete` or `error` on the child subscription. Otherwise\n * this method will resubscribe to the source Observable.\n *\n * <img src=\"./img/repeatWhen.png\" width=\"100%\">\n *\n * @param {function(notifications: Observable): Observable} notifier - Receives an Observable of notifications with\n * which a user can `complete` or `error`, aborting the repetition.\n * @return {Observable} The source Observable modified with repeat logic.\n * @method repeatWhen\n * @owner Observable\n */\nexport function repeatWhen(notifier) {\n    return function (source) { return source.lift(new RepeatWhenOperator(notifier)); };\n}\nvar RepeatWhenOperator = /*@__PURE__*/ (function () {\n    function RepeatWhenOperator(notifier) {\n        this.notifier = notifier;\n    }\n    RepeatWhenOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new RepeatWhenSubscriber(subscriber, this.notifier, source));\n    };\n    return RepeatWhenOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar RepeatWhenSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(RepeatWhenSubscriber, _super);\n    function RepeatWhenSubscriber(destination, notifier, source) {\n        var _this = _super.call(this, destination) || this;\n        _this.notifier = notifier;\n        _this.source = source;\n        _this.sourceIsBeingSubscribedTo = true;\n        return _this;\n    }\n    RepeatWhenSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.sourceIsBeingSubscribedTo = true;\n        this.source.subscribe(this);\n    };\n    RepeatWhenSubscriber.prototype.notifyComplete = function (innerSub) {\n        if (this.sourceIsBeingSubscribedTo === false) {\n            return _super.prototype.complete.call(this);\n        }\n    };\n    RepeatWhenSubscriber.prototype.complete = function () {\n        this.sourceIsBeingSubscribedTo = false;\n        if (!this.isStopped) {\n            if (!this.retries) {\n                this.subscribeToRetries();\n            }\n            if (!this.retriesSubscription || this.retriesSubscription.closed) {\n                return _super.prototype.complete.call(this);\n            }\n            this._unsubscribeAndRecycle();\n            this.notifications.next();\n        }\n    };\n    /** @deprecated This is an internal implementation detail, do not use. */\n    RepeatWhenSubscriber.prototype._unsubscribe = function () {\n        var _a = this, notifications = _a.notifications, retriesSubscription = _a.retriesSubscription;\n        if (notifications) {\n            notifications.unsubscribe();\n            this.notifications = null;\n        }\n        if (retriesSubscription) {\n            retriesSubscription.unsubscribe();\n            this.retriesSubscription = null;\n        }\n        this.retries = null;\n    };\n    /** @deprecated This is an internal implementation detail, do not use. */\n    RepeatWhenSubscriber.prototype._unsubscribeAndRecycle = function () {\n        var _unsubscribe = this._unsubscribe;\n        this._unsubscribe = null;\n        _super.prototype._unsubscribeAndRecycle.call(this);\n        this._unsubscribe = _unsubscribe;\n        return this;\n    };\n    RepeatWhenSubscriber.prototype.subscribeToRetries = function () {\n        this.notifications = new Subject();\n        var retries = tryCatch(this.notifier)(this.notifications);\n        if (retries === errorObject) {\n            return _super.prototype.complete.call(this);\n        }\n        this.retries = retries;\n        this.retriesSubscription = subscribeToResult(this, retries);\n    };\n    return RepeatWhenSubscriber;\n}(OuterSubscriber));\n//# sourceMappingURL=repeatWhen.js.map\n","/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\n/**\n * Returns an Observable that mirrors the source Observable with the exception of an `error`. If the source Observable\n * calls `error`, this method will resubscribe to the source Observable for a maximum of `count` resubscriptions (given\n * as a number parameter) rather than propagating the `error` call.\n *\n * <img src=\"./img/retry.png\" width=\"100%\">\n *\n * Any and all items emitted by the source Observable will be emitted by the resulting Observable, even those emitted\n * during failed subscriptions. For example, if an Observable fails at first but emits [1, 2] then succeeds the second\n * time and emits: [1, 2, 3, 4, 5] then the complete stream of emissions and notifications\n * would be: [1, 2, 1, 2, 3, 4, 5, `complete`].\n * @param {number} count - Number of retry attempts before failing.\n * @return {Observable} The source Observable modified with the retry logic.\n * @method retry\n * @owner Observable\n */\nexport function retry(count) {\n    if (count === void 0) {\n        count = -1;\n    }\n    return function (source) { return source.lift(new RetryOperator(count, source)); };\n}\nvar RetryOperator = /*@__PURE__*/ (function () {\n    function RetryOperator(count, source) {\n        this.count = count;\n        this.source = source;\n    }\n    RetryOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new RetrySubscriber(subscriber, this.count, this.source));\n    };\n    return RetryOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar RetrySubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(RetrySubscriber, _super);\n    function RetrySubscriber(destination, count, source) {\n        var _this = _super.call(this, destination) || this;\n        _this.count = count;\n        _this.source = source;\n        return _this;\n    }\n    RetrySubscriber.prototype.error = function (err) {\n        if (!this.isStopped) {\n            var _a = this, source = _a.source, count = _a.count;\n            if (count === 0) {\n                return _super.prototype.error.call(this, err);\n            }\n            else if (count > -1) {\n                this.count = count - 1;\n            }\n            source.subscribe(this._unsubscribeAndRecycle());\n        }\n    };\n    return RetrySubscriber;\n}(Subscriber));\n//# sourceMappingURL=retry.js.map\n","/** PURE_IMPORTS_START tslib,_Subject,_util_tryCatch,_util_errorObject,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subject } from '../Subject';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n/**\n * Returns an Observable that mirrors the source Observable with the exception of an `error`. If the source Observable\n * calls `error`, this method will emit the Throwable that caused the error to the Observable returned from `notifier`.\n * If that Observable calls `complete` or `error` then this method will call `complete` or `error` on the child\n * subscription. Otherwise this method will resubscribe to the source Observable.\n *\n * <img src=\"./img/retryWhen.png\" width=\"100%\">\n *\n * @param {function(errors: Observable): Observable} notifier - Receives an Observable of notifications with which a\n * user can `complete` or `error`, aborting the retry.\n * @return {Observable} The source Observable modified with retry logic.\n * @method retryWhen\n * @owner Observable\n */\nexport function retryWhen(notifier) {\n    return function (source) { return source.lift(new RetryWhenOperator(notifier, source)); };\n}\nvar RetryWhenOperator = /*@__PURE__*/ (function () {\n    function RetryWhenOperator(notifier, source) {\n        this.notifier = notifier;\n        this.source = source;\n    }\n    RetryWhenOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new RetryWhenSubscriber(subscriber, this.notifier, this.source));\n    };\n    return RetryWhenOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar RetryWhenSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(RetryWhenSubscriber, _super);\n    function RetryWhenSubscriber(destination, notifier, source) {\n        var _this = _super.call(this, destination) || this;\n        _this.notifier = notifier;\n        _this.source = source;\n        return _this;\n    }\n    RetryWhenSubscriber.prototype.error = function (err) {\n        if (!this.isStopped) {\n            var errors = this.errors;\n            var retries = this.retries;\n            var retriesSubscription = this.retriesSubscription;\n            if (!retries) {\n                errors = new Subject();\n                retries = tryCatch(this.notifier)(errors);\n                if (retries === errorObject) {\n                    return _super.prototype.error.call(this, errorObject.e);\n                }\n                retriesSubscription = subscribeToResult(this, retries);\n            }\n            else {\n                this.errors = null;\n                this.retriesSubscription = null;\n            }\n            this._unsubscribeAndRecycle();\n            this.errors = errors;\n            this.retries = retries;\n            this.retriesSubscription = retriesSubscription;\n            errors.next(err);\n        }\n    };\n    /** @deprecated This is an internal implementation detail, do not use. */\n    RetryWhenSubscriber.prototype._unsubscribe = function () {\n        var _a = this, errors = _a.errors, retriesSubscription = _a.retriesSubscription;\n        if (errors) {\n            errors.unsubscribe();\n            this.errors = null;\n        }\n        if (retriesSubscription) {\n            retriesSubscription.unsubscribe();\n            this.retriesSubscription = null;\n        }\n        this.retries = null;\n    };\n    RetryWhenSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        var _unsubscribe = this._unsubscribe;\n        this._unsubscribe = null;\n        this._unsubscribeAndRecycle();\n        this._unsubscribe = _unsubscribe;\n        this.source.subscribe(this);\n    };\n    return RetryWhenSubscriber;\n}(OuterSubscriber));\n//# sourceMappingURL=retryWhen.js.map\n","/** PURE_IMPORTS_START tslib,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n/**\n * Emits the most recently emitted value from the source Observable whenever\n * another Observable, the `notifier`, emits.\n *\n * <span class=\"informal\">It's like {@link sampleTime}, but samples whenever\n * the `notifier` Observable emits something.</span>\n *\n * <img src=\"./img/sample.png\" width=\"100%\">\n *\n * Whenever the `notifier` Observable emits a value or completes, `sample`\n * looks at the source Observable and emits whichever value it has most recently\n * emitted since the previous sampling, unless the source has not emitted\n * anything since the previous sampling. The `notifier` is subscribed to as soon\n * as the output Observable is subscribed.\n *\n * @example <caption>On every click, sample the most recent \"seconds\" timer</caption>\n * var seconds = Rx.Observable.interval(1000);\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = seconds.sample(clicks);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounce}\n * @see {@link sampleTime}\n * @see {@link throttle}\n *\n * @param {Observable<any>} notifier The Observable to use for sampling the\n * source Observable.\n * @return {Observable<T>} An Observable that emits the results of sampling the\n * values emitted by the source Observable whenever the notifier Observable\n * emits value or completes.\n * @method sample\n * @owner Observable\n */\nexport function sample(notifier) {\n    return function (source) { return source.lift(new SampleOperator(notifier)); };\n}\nvar SampleOperator = /*@__PURE__*/ (function () {\n    function SampleOperator(notifier) {\n        this.notifier = notifier;\n    }\n    SampleOperator.prototype.call = function (subscriber, source) {\n        var sampleSubscriber = new SampleSubscriber(subscriber);\n        var subscription = source.subscribe(sampleSubscriber);\n        subscription.add(subscribeToResult(sampleSubscriber, this.notifier));\n        return subscription;\n    };\n    return SampleOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SampleSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(SampleSubscriber, _super);\n    function SampleSubscriber() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.hasValue = false;\n        return _this;\n    }\n    SampleSubscriber.prototype._next = function (value) {\n        this.value = value;\n        this.hasValue = true;\n    };\n    SampleSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.emitValue();\n    };\n    SampleSubscriber.prototype.notifyComplete = function () {\n        this.emitValue();\n    };\n    SampleSubscriber.prototype.emitValue = function () {\n        if (this.hasValue) {\n            this.hasValue = false;\n            this.destination.next(this.value);\n        }\n    };\n    return SampleSubscriber;\n}(OuterSubscriber));\n//# sourceMappingURL=sample.js.map\n","/** PURE_IMPORTS_START tslib,_Subscriber,_util_tryCatch,_util_errorObject PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\n/**\n * Compares all values of two observables in sequence using an optional comparor function\n * and returns an observable of a single boolean value representing whether or not the two sequences\n * are equal.\n *\n * <span class=\"informal\">Checks to see of all values emitted by both observables are equal, in order.</span>\n *\n * <img src=\"./img/sequenceEqual.png\" width=\"100%\">\n *\n * `sequenceEqual` subscribes to two observables and buffers incoming values from each observable. Whenever either\n * observable emits a value, the value is buffered and the buffers are shifted and compared from the bottom\n * up; If any value pair doesn't match, the returned observable will emit `false` and complete. If one of the\n * observables completes, the operator will wait for the other observable to complete; If the other\n * observable emits before completing, the returned observable will emit `false` and complete. If one observable never\n * completes or emits after the other complets, the returned observable will never complete.\n *\n * @example <caption>figure out if the Konami code matches</caption>\n * var code = Rx.Observable.from([\n *  \"ArrowUp\",\n *  \"ArrowUp\",\n *  \"ArrowDown\",\n *  \"ArrowDown\",\n *  \"ArrowLeft\",\n *  \"ArrowRight\",\n *  \"ArrowLeft\",\n *  \"ArrowRight\",\n *  \"KeyB\",\n *  \"KeyA\",\n *  \"Enter\" // no start key, clearly.\n * ]);\n *\n * var keys = Rx.Observable.fromEvent(document, 'keyup')\n *  .map(e => e.code);\n * var matches = keys.bufferCount(11, 1)\n *  .mergeMap(\n *    last11 =>\n *      Rx.Observable.from(last11)\n *        .sequenceEqual(code)\n *   );\n * matches.subscribe(matched => console.log('Successful cheat at Contra? ', matched));\n *\n * @see {@link combineLatest}\n * @see {@link zip}\n * @see {@link withLatestFrom}\n *\n * @param {Observable} compareTo The observable sequence to compare the source sequence to.\n * @param {function} [comparor] An optional function to compare each value pair\n * @return {Observable} An Observable of a single boolean value representing whether or not\n * the values emitted by both observables were equal in sequence.\n * @method sequenceEqual\n * @owner Observable\n */\nexport function sequenceEqual(compareTo, comparor) {\n    return function (source) { return source.lift(new SequenceEqualOperator(compareTo, comparor)); };\n}\nvar SequenceEqualOperator = /*@__PURE__*/ (function () {\n    function SequenceEqualOperator(compareTo, comparor) {\n        this.compareTo = compareTo;\n        this.comparor = comparor;\n    }\n    SequenceEqualOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new SequenceEqualSubscriber(subscriber, this.compareTo, this.comparor));\n    };\n    return SequenceEqualOperator;\n}());\nexport { SequenceEqualOperator };\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SequenceEqualSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(SequenceEqualSubscriber, _super);\n    function SequenceEqualSubscriber(destination, compareTo, comparor) {\n        var _this = _super.call(this, destination) || this;\n        _this.compareTo = compareTo;\n        _this.comparor = comparor;\n        _this._a = [];\n        _this._b = [];\n        _this._oneComplete = false;\n        _this.add(compareTo.subscribe(new SequenceEqualCompareToSubscriber(destination, _this)));\n        return _this;\n    }\n    SequenceEqualSubscriber.prototype._next = function (value) {\n        if (this._oneComplete && this._b.length === 0) {\n            this.emit(false);\n        }\n        else {\n            this._a.push(value);\n            this.checkValues();\n        }\n    };\n    SequenceEqualSubscriber.prototype._complete = function () {\n        if (this._oneComplete) {\n            this.emit(this._a.length === 0 && this._b.length === 0);\n        }\n        else {\n            this._oneComplete = true;\n        }\n    };\n    SequenceEqualSubscriber.prototype.checkValues = function () {\n        var _c = this, _a = _c._a, _b = _c._b, comparor = _c.comparor;\n        while (_a.length > 0 && _b.length > 0) {\n            var a = _a.shift();\n            var b = _b.shift();\n            var areEqual = false;\n            if (comparor) {\n                areEqual = tryCatch(comparor)(a, b);\n                if (areEqual === errorObject) {\n                    this.destination.error(errorObject.e);\n                }\n            }\n            else {\n                areEqual = a === b;\n            }\n            if (!areEqual) {\n                this.emit(false);\n            }\n        }\n    };\n    SequenceEqualSubscriber.prototype.emit = function (value) {\n        var destination = this.destination;\n        destination.next(value);\n        destination.complete();\n    };\n    SequenceEqualSubscriber.prototype.nextB = function (value) {\n        if (this._oneComplete && this._a.length === 0) {\n            this.emit(false);\n        }\n        else {\n            this._b.push(value);\n            this.checkValues();\n        }\n    };\n    return SequenceEqualSubscriber;\n}(Subscriber));\nexport { SequenceEqualSubscriber };\nvar SequenceEqualCompareToSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(SequenceEqualCompareToSubscriber, _super);\n    function SequenceEqualCompareToSubscriber(destination, parent) {\n        var _this = _super.call(this, destination) || this;\n        _this.parent = parent;\n        return _this;\n    }\n    SequenceEqualCompareToSubscriber.prototype._next = function (value) {\n        this.parent.nextB(value);\n    };\n    SequenceEqualCompareToSubscriber.prototype._error = function (err) {\n        this.parent.error(err);\n    };\n    SequenceEqualCompareToSubscriber.prototype._complete = function () {\n        this.parent._complete();\n    };\n    return SequenceEqualCompareToSubscriber;\n}(Subscriber));\n//# sourceMappingURL=sequenceEqual.js.map\n","/** PURE_IMPORTS_START _multicast,_refCount,_Subject PURE_IMPORTS_END */\nimport { multicast } from './multicast';\nimport { refCount } from './refCount';\nimport { Subject } from '../Subject';\nfunction shareSubjectFactory() {\n    return new Subject();\n}\n/**\n * Returns a new Observable that multicasts (shares) the original Observable. As long as there is at least one\n * Subscriber this Observable will be subscribed and emitting data. When all subscribers have unsubscribed it will\n * unsubscribe from the source Observable. Because the Observable is multicasting it makes the stream `hot`.\n * This is an alias for .multicast(() => new Subject()).refCount().\n *\n * <img src=\"./img/share.png\" width=\"100%\">\n *\n * @return {Observable<T>} An Observable that upon connection causes the source Observable to emit items to its Observers.\n * @method share\n * @owner Observable\n */\nexport function share() {\n    return function (source) { return refCount()(multicast(shareSubjectFactory)(source)); };\n}\n//# sourceMappingURL=share.js.map\n","/** PURE_IMPORTS_START tslib,_Subscriber,_scheduler_async,_throttle PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\nimport { async } from '../scheduler/async';\nimport { defaultThrottleConfig } from './throttle';\n/**\n * Emits a value from the source Observable, then ignores subsequent source\n * values for `duration` milliseconds, then repeats this process.\n *\n * <span class=\"informal\">Lets a value pass, then ignores source values for the\n * next `duration` milliseconds.</span>\n *\n * <img src=\"./img/throttleTime.png\" width=\"100%\">\n *\n * `throttleTime` emits the source Observable values on the output Observable\n * when its internal timer is disabled, and ignores source values when the timer\n * is enabled. Initially, the timer is disabled. As soon as the first source\n * value arrives, it is forwarded to the output Observable, and then the timer\n * is enabled. After `duration` milliseconds (or the time unit determined\n * internally by the optional `scheduler`) has passed, the timer is disabled,\n * and this process repeats for the next source value. Optionally takes a\n * {@link IScheduler} for managing timers.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.throttleTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounceTime}\n * @see {@link delay}\n * @see {@link sampleTime}\n * @see {@link throttle}\n *\n * @param {number} duration Time to wait before emitting another value after\n * emitting the last value, measured in milliseconds or the time unit determined\n * internally by the optional `scheduler`.\n * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for\n * managing the timers that handle the throttling.\n * @param {Object} config a configuration object to define `leading` and\n * `trailing` behavior. Defaults to `{ leading: true, trailing: false }`.\n * @return {Observable<T>} An Observable that performs the throttle operation to\n * limit the rate of emissions from the source.\n * @method throttleTime\n * @owner Observable\n */\nexport function throttleTime(duration, scheduler, config) {\n    if (scheduler === void 0) {\n        scheduler = async;\n    }\n    if (config === void 0) {\n        config = defaultThrottleConfig;\n    }\n    return function (source) { return source.lift(new ThrottleTimeOperator(duration, scheduler, config.leading, config.trailing)); };\n}\nvar ThrottleTimeOperator = /*@__PURE__*/ (function () {\n    function ThrottleTimeOperator(duration, scheduler, leading, trailing) {\n        this.duration = duration;\n        this.scheduler = scheduler;\n        this.leading = leading;\n        this.trailing = trailing;\n    }\n    ThrottleTimeOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new ThrottleTimeSubscriber(subscriber, this.duration, this.scheduler, this.leading, this.trailing));\n    };\n    return ThrottleTimeOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar ThrottleTimeSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(ThrottleTimeSubscriber, _super);\n    function ThrottleTimeSubscriber(destination, duration, scheduler, leading, trailing) {\n        var _this = _super.call(this, destination) || this;\n        _this.duration = duration;\n        _this.scheduler = scheduler;\n        _this.leading = leading;\n        _this.trailing = trailing;\n        _this._hasTrailingValue = false;\n        _this._trailingValue = null;\n        return _this;\n    }\n    ThrottleTimeSubscriber.prototype._next = function (value) {\n        if (this.throttled) {\n            if (this.trailing) {\n                this._trailingValue = value;\n                this._hasTrailingValue = true;\n            }\n        }\n        else {\n            this.add(this.throttled = this.scheduler.schedule(dispatchNext, this.duration, { subscriber: this }));\n            if (this.leading) {\n                this.destination.next(value);\n            }\n        }\n    };\n    ThrottleTimeSubscriber.prototype._complete = function () {\n        if (this._hasTrailingValue) {\n            this.destination.next(this._trailingValue);\n            this.destination.complete();\n        }\n        else {\n            this.destination.complete();\n        }\n    };\n    ThrottleTimeSubscriber.prototype.clearThrottle = function () {\n        var throttled = this.throttled;\n        if (throttled) {\n            if (this.trailing && this._hasTrailingValue) {\n                this.destination.next(this._trailingValue);\n                this._trailingValue = null;\n                this._hasTrailingValue = false;\n            }\n            throttled.unsubscribe();\n            this.remove(throttled);\n            this.throttled = null;\n        }\n    };\n    return ThrottleTimeSubscriber;\n}(Subscriber));\nfunction dispatchNext(arg) {\n    var subscriber = arg.subscriber;\n    subscriber.clearThrottle();\n}\n//# sourceMappingURL=throttleTime.js.map\n","/** PURE_IMPORTS_START tslib,_Subscriber,_util_EmptyError PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\nimport { EmptyError } from '../util/EmptyError';\n/**\n * Returns an Observable that emits the single item emitted by the source Observable that matches a specified\n * predicate, if that Observable emits one such item. If the source Observable emits more than one such item or no\n * items, notify of an IllegalArgumentException or NoSuchElementException respectively. If the source Observable\n * emits items but none match the specified predicate then `undefined` is emiited.\n *\n * <img src=\"./img/single.png\" width=\"100%\">\n *\n * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`\n * callback if the Observable completes before any `next` notification was sent.\n * @param {Function} predicate - A predicate function to evaluate items emitted by the source Observable.\n * @return {Observable<T>} An Observable that emits the single item emitted by the source Observable that matches\n * the predicate or `undefined` when no items match.\n *\n * @method single\n * @owner Observable\n */\nexport function single(predicate) {\n    return function (source) { return source.lift(new SingleOperator(predicate, source)); };\n}\nvar SingleOperator = /*@__PURE__*/ (function () {\n    function SingleOperator(predicate, source) {\n        this.predicate = predicate;\n        this.source = source;\n    }\n    SingleOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new SingleSubscriber(subscriber, this.predicate, this.source));\n    };\n    return SingleOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SingleSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(SingleSubscriber, _super);\n    function SingleSubscriber(destination, predicate, source) {\n        var _this = _super.call(this, destination) || this;\n        _this.predicate = predicate;\n        _this.source = source;\n        _this.seenValue = false;\n        _this.index = 0;\n        return _this;\n    }\n    SingleSubscriber.prototype.applySingleValue = function (value) {\n        if (this.seenValue) {\n            this.destination.error('Sequence contains more than one element');\n        }\n        else {\n            this.seenValue = true;\n            this.singleValue = value;\n        }\n    };\n    SingleSubscriber.prototype._next = function (value) {\n        var index = this.index++;\n        if (this.predicate) {\n            this.tryNext(value, index);\n        }\n        else {\n            this.applySingleValue(value);\n        }\n    };\n    SingleSubscriber.prototype.tryNext = function (value, index) {\n        try {\n            if (this.predicate(value, index, this.source)) {\n                this.applySingleValue(value);\n            }\n        }\n        catch (err) {\n            this.destination.error(err);\n        }\n    };\n    SingleSubscriber.prototype._complete = function () {\n        var destination = this.destination;\n        if (this.index > 0) {\n            destination.next(this.seenValue ? this.singleValue : undefined);\n            destination.complete();\n        }\n        else {\n            destination.error(new EmptyError);\n        }\n    };\n    return SingleSubscriber;\n}(Subscriber));\n//# sourceMappingURL=single.js.map\n","/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\n/**\n * Returns an Observable that skips the first `count` items emitted by the source Observable.\n *\n * <img src=\"./img/skip.png\" width=\"100%\">\n *\n * @param {Number} count - The number of times, items emitted by source Observable should be skipped.\n * @return {Observable} An Observable that skips values emitted by the source Observable.\n *\n * @method skip\n * @owner Observable\n */\nexport function skip(count) {\n    return function (source) { return source.lift(new SkipOperator(count)); };\n}\nvar SkipOperator = /*@__PURE__*/ (function () {\n    function SkipOperator(total) {\n        this.total = total;\n    }\n    SkipOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new SkipSubscriber(subscriber, this.total));\n    };\n    return SkipOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SkipSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(SkipSubscriber, _super);\n    function SkipSubscriber(destination, total) {\n        var _this = _super.call(this, destination) || this;\n        _this.total = total;\n        _this.count = 0;\n        return _this;\n    }\n    SkipSubscriber.prototype._next = function (x) {\n        if (++this.count > this.total) {\n            this.destination.next(x);\n        }\n    };\n    return SkipSubscriber;\n}(Subscriber));\n//# sourceMappingURL=skip.js.map\n","/** PURE_IMPORTS_START tslib,_Subscriber,_util_ArgumentOutOfRangeError PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\nimport { ArgumentOutOfRangeError } from '../util/ArgumentOutOfRangeError';\n/**\n * Skip the last `count` values emitted by the source Observable.\n *\n * <img src=\"./img/skipLast.png\" width=\"100%\">\n *\n * `skipLast` returns an Observable that accumulates a queue with a length\n * enough to store the first `count` values. As more values are received,\n * values are taken from the front of the queue and produced on the result\n * sequence. This causes values to be delayed.\n *\n * @example <caption>Skip the last 2 values of an Observable with many values</caption>\n * var many = Rx.Observable.range(1, 5);\n * var skipLastTwo = many.skipLast(2);\n * skipLastTwo.subscribe(x => console.log(x));\n *\n * // Results in:\n * // 1 2 3\n *\n * @see {@link skip}\n * @see {@link skipUntil}\n * @see {@link skipWhile}\n * @see {@link take}\n *\n * @throws {ArgumentOutOfRangeError} When using `skipLast(i)`, it throws\n * ArgumentOutOrRangeError if `i < 0`.\n *\n * @param {number} count Number of elements to skip from the end of the source Observable.\n * @returns {Observable<T>} An Observable that skips the last count values\n * emitted by the source Observable.\n * @method skipLast\n * @owner Observable\n */\nexport function skipLast(count) {\n    return function (source) { return source.lift(new SkipLastOperator(count)); };\n}\nvar SkipLastOperator = /*@__PURE__*/ (function () {\n    function SkipLastOperator(_skipCount) {\n        this._skipCount = _skipCount;\n        if (this._skipCount < 0) {\n            throw new ArgumentOutOfRangeError;\n        }\n    }\n    SkipLastOperator.prototype.call = function (subscriber, source) {\n        if (this._skipCount === 0) {\n            // If we don't want to skip any values then just subscribe\n            // to Subscriber without any further logic.\n            return source.subscribe(new Subscriber(subscriber));\n        }\n        else {\n            return source.subscribe(new SkipLastSubscriber(subscriber, this._skipCount));\n        }\n    };\n    return SkipLastOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SkipLastSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(SkipLastSubscriber, _super);\n    function SkipLastSubscriber(destination, _skipCount) {\n        var _this = _super.call(this, destination) || this;\n        _this._skipCount = _skipCount;\n        _this._count = 0;\n        _this._ring = new Array(_skipCount);\n        return _this;\n    }\n    SkipLastSubscriber.prototype._next = function (value) {\n        var skipCount = this._skipCount;\n        var count = this._count++;\n        if (count < skipCount) {\n            this._ring[count] = value;\n        }\n        else {\n            var currentIndex = count % skipCount;\n            var ring = this._ring;\n            var oldValue = ring[currentIndex];\n            ring[currentIndex] = value;\n            this.destination.next(oldValue);\n        }\n    };\n    return SkipLastSubscriber;\n}(Subscriber));\n//# sourceMappingURL=skipLast.js.map\n","/** PURE_IMPORTS_START tslib,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n/**\n * Returns an Observable that skips items emitted by the source Observable until a second Observable emits an item.\n *\n * <img src=\"./img/skipUntil.png\" width=\"100%\">\n *\n * @param {Observable} notifier - The second Observable that has to emit an item before the source Observable's elements begin to\n * be mirrored by the resulting Observable.\n * @return {Observable<T>} An Observable that skips items from the source Observable until the second Observable emits\n * an item, then emits the remaining items.\n * @method skipUntil\n * @owner Observable\n */\nexport function skipUntil(notifier) {\n    return function (source) { return source.lift(new SkipUntilOperator(notifier)); };\n}\nvar SkipUntilOperator = /*@__PURE__*/ (function () {\n    function SkipUntilOperator(notifier) {\n        this.notifier = notifier;\n    }\n    SkipUntilOperator.prototype.call = function (destination, source) {\n        return source.subscribe(new SkipUntilSubscriber(destination, this.notifier));\n    };\n    return SkipUntilOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SkipUntilSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(SkipUntilSubscriber, _super);\n    function SkipUntilSubscriber(destination, notifier) {\n        var _this = _super.call(this, destination) || this;\n        _this.hasValue = false;\n        _this.add(_this.innerSubscription = subscribeToResult(_this, notifier));\n        return _this;\n    }\n    SkipUntilSubscriber.prototype._next = function (value) {\n        if (this.hasValue) {\n            _super.prototype._next.call(this, value);\n        }\n    };\n    SkipUntilSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.hasValue = true;\n        this.innerSubscription.unsubscribe();\n    };\n    SkipUntilSubscriber.prototype.notifyComplete = function () {\n        /* do nothing */\n    };\n    return SkipUntilSubscriber;\n}(OuterSubscriber));\n//# sourceMappingURL=skipUntil.js.map\n","/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\n/**\n * Returns an Observable that skips all items emitted by the source Observable as long as a specified condition holds\n * true, but emits all further source items as soon as the condition becomes false.\n *\n * <img src=\"./img/skipWhile.png\" width=\"100%\">\n *\n * @param {Function} predicate - A function to test each item emitted from the source Observable.\n * @return {Observable<T>} An Observable that begins emitting items emitted by the source Observable when the\n * specified predicate becomes false.\n * @method skipWhile\n * @owner Observable\n */\nexport function skipWhile(predicate) {\n    return function (source) { return source.lift(new SkipWhileOperator(predicate)); };\n}\nvar SkipWhileOperator = /*@__PURE__*/ (function () {\n    function SkipWhileOperator(predicate) {\n        this.predicate = predicate;\n    }\n    SkipWhileOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new SkipWhileSubscriber(subscriber, this.predicate));\n    };\n    return SkipWhileOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SkipWhileSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(SkipWhileSubscriber, _super);\n    function SkipWhileSubscriber(destination, predicate) {\n        var _this = _super.call(this, destination) || this;\n        _this.predicate = predicate;\n        _this.skipping = true;\n        _this.index = 0;\n        return _this;\n    }\n    SkipWhileSubscriber.prototype._next = function (value) {\n        var destination = this.destination;\n        if (this.skipping) {\n            this.tryCallPredicate(value);\n        }\n        if (!this.skipping) {\n            destination.next(value);\n        }\n    };\n    SkipWhileSubscriber.prototype.tryCallPredicate = function (value) {\n        try {\n            var result = this.predicate(value, this.index++);\n            this.skipping = Boolean(result);\n        }\n        catch (err) {\n            this.destination.error(err);\n        }\n    };\n    return SkipWhileSubscriber;\n}(Subscriber));\n//# sourceMappingURL=skipWhile.js.map\n","/** PURE_IMPORTS_START tslib,_OuterSubscriber,_util_subscribeToResult,_map,_observable_from PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { map } from './map';\nimport { from } from '../observable/from';\n/* tslint:enable:max-line-length */\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable, emitting values only from the most recently projected Observable.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link switch}.</span>\n *\n * <img src=\"./img/switchMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an (so-called \"inner\") Observable. Each time it observes one of these\n * inner Observables, the output Observable begins emitting the items emitted by\n * that inner Observable. When a new inner Observable is emitted, `switchMap`\n * stops emitting items from the earlier-emitted inner Observable and begins\n * emitting items from the new one. It continues to behave like this for\n * subsequent inner Observables.\n *\n * @example <caption>Rerun an interval Observable on every click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.switchMap((ev) => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMap}\n * @see {@link exhaustMap}\n * @see {@link mergeMap}\n * @see {@link switch}\n * @see {@link switchMapTo}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional `resultSelector`) to each item emitted\n * by the source Observable and taking only the values from the most recently\n * projected inner Observable.\n * @method switchMap\n * @owner Observable\n */\nexport function switchMap(project, resultSelector) {\n    if (typeof resultSelector === 'function') {\n        return function (source) { return source.pipe(switchMap(function (a, i) { return from(project(a, i)).pipe(map(function (b, ii) { return resultSelector(a, b, i, ii); })); })); };\n    }\n    return function (source) { return source.lift(new SwitchMapOperator(project)); };\n}\nvar SwitchMapOperator = /*@__PURE__*/ (function () {\n    function SwitchMapOperator(project) {\n        this.project = project;\n    }\n    SwitchMapOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new SwitchMapSubscriber(subscriber, this.project));\n    };\n    return SwitchMapOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SwitchMapSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(SwitchMapSubscriber, _super);\n    function SwitchMapSubscriber(destination, project) {\n        var _this = _super.call(this, destination) || this;\n        _this.project = project;\n        _this.index = 0;\n        return _this;\n    }\n    SwitchMapSubscriber.prototype._next = function (value) {\n        var result;\n        var index = this.index++;\n        try {\n            result = this.project(value, index);\n        }\n        catch (error) {\n            this.destination.error(error);\n            return;\n        }\n        this._innerSub(result, value, index);\n    };\n    SwitchMapSubscriber.prototype._innerSub = function (result, value, index) {\n        var innerSubscription = this.innerSubscription;\n        if (innerSubscription) {\n            innerSubscription.unsubscribe();\n        }\n        this.add(this.innerSubscription = subscribeToResult(this, result, value, index));\n    };\n    SwitchMapSubscriber.prototype._complete = function () {\n        var innerSubscription = this.innerSubscription;\n        if (!innerSubscription || innerSubscription.closed) {\n            _super.prototype._complete.call(this);\n        }\n    };\n    SwitchMapSubscriber.prototype._unsubscribe = function () {\n        this.innerSubscription = null;\n    };\n    SwitchMapSubscriber.prototype.notifyComplete = function (innerSub) {\n        this.remove(innerSub);\n        this.innerSubscription = null;\n        if (this.isStopped) {\n            _super.prototype._complete.call(this);\n        }\n    };\n    SwitchMapSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.destination.next(innerValue);\n    };\n    return SwitchMapSubscriber;\n}(OuterSubscriber));\n//# sourceMappingURL=switchMap.js.map\n","/** PURE_IMPORTS_START tslib,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n/**\n * Emits the values emitted by the source Observable until a `notifier`\n * Observable emits a value.\n *\n * <span class=\"informal\">Lets values pass until a second Observable,\n * `notifier`, emits a value. Then, it completes.</span>\n *\n * <img src=\"./img/takeUntil.png\" width=\"100%\">\n *\n * `takeUntil` subscribes and begins mirroring the source Observable. It also\n * monitors a second Observable, `notifier` that you provide. If the `notifier`\n * emits a value, the output Observable stops mirroring the source Observable\n * and completes. If the `notifier` doesn't emit any value and completes\n * then `takeUntil` will pass all values.\n *\n * @example <caption>Tick every second until the first click happens</caption>\n * var interval = Rx.Observable.interval(1000);\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = interval.takeUntil(clicks);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link take}\n * @see {@link takeLast}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @param {Observable} notifier The Observable whose first emitted value will\n * cause the output Observable of `takeUntil` to stop emitting values from the\n * source Observable.\n * @return {Observable<T>} An Observable that emits the values from the source\n * Observable until such time as `notifier` emits its first value.\n * @method takeUntil\n * @owner Observable\n */\nexport function takeUntil(notifier) {\n    return function (source) { return source.lift(new TakeUntilOperator(notifier)); };\n}\nvar TakeUntilOperator = /*@__PURE__*/ (function () {\n    function TakeUntilOperator(notifier) {\n        this.notifier = notifier;\n    }\n    TakeUntilOperator.prototype.call = function (subscriber, source) {\n        var takeUntilSubscriber = new TakeUntilSubscriber(subscriber);\n        var notifierSubscription = subscribeToResult(takeUntilSubscriber, this.notifier);\n        if (notifierSubscription && !notifierSubscription.closed) {\n            takeUntilSubscriber.add(notifierSubscription);\n            return source.subscribe(takeUntilSubscriber);\n        }\n        return takeUntilSubscriber;\n    };\n    return TakeUntilOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar TakeUntilSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(TakeUntilSubscriber, _super);\n    function TakeUntilSubscriber(destination) {\n        return _super.call(this, destination) || this;\n    }\n    TakeUntilSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.complete();\n    };\n    TakeUntilSubscriber.prototype.notifyComplete = function () {\n        // noop\n    };\n    return TakeUntilSubscriber;\n}(OuterSubscriber));\n//# sourceMappingURL=takeUntil.js.map\n","/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\n/**\n * Emits values emitted by the source Observable so long as each value satisfies\n * the given `predicate`, and then completes as soon as this `predicate` is not\n * satisfied.\n *\n * <span class=\"informal\">Takes values from the source only while they pass the\n * condition given. When the first value does not satisfy, it completes.</span>\n *\n * <img src=\"./img/takeWhile.png\" width=\"100%\">\n *\n * `takeWhile` subscribes and begins mirroring the source Observable. Each value\n * emitted on the source is given to the `predicate` function which returns a\n * boolean, representing a condition to be satisfied by the source values. The\n * output Observable emits the source values until such time as the `predicate`\n * returns false, at which point `takeWhile` stops mirroring the source\n * Observable and completes the output Observable.\n *\n * @example <caption>Emit click events only while the clientX property is greater than 200</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.takeWhile(ev => ev.clientX > 200);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link take}\n * @see {@link takeLast}\n * @see {@link takeUntil}\n * @see {@link skip}\n *\n * @param {function(value: T, index: number): boolean} predicate A function that\n * evaluates a value emitted by the source Observable and returns a boolean.\n * Also takes the (zero-based) index as the second argument.\n * @return {Observable<T>} An Observable that emits the values from the source\n * Observable so long as each value satisfies the condition defined by the\n * `predicate`, then completes.\n * @method takeWhile\n * @owner Observable\n */\nexport function takeWhile(predicate) {\n    return function (source) { return source.lift(new TakeWhileOperator(predicate)); };\n}\nvar TakeWhileOperator = /*@__PURE__*/ (function () {\n    function TakeWhileOperator(predicate) {\n        this.predicate = predicate;\n    }\n    TakeWhileOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new TakeWhileSubscriber(subscriber, this.predicate));\n    };\n    return TakeWhileOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar TakeWhileSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(TakeWhileSubscriber, _super);\n    function TakeWhileSubscriber(destination, predicate) {\n        var _this = _super.call(this, destination) || this;\n        _this.predicate = predicate;\n        _this.index = 0;\n        return _this;\n    }\n    TakeWhileSubscriber.prototype._next = function (value) {\n        var destination = this.destination;\n        var result;\n        try {\n            result = this.predicate(value, this.index++);\n        }\n        catch (err) {\n            destination.error(err);\n            return;\n        }\n        this.nextOrComplete(value, result);\n    };\n    TakeWhileSubscriber.prototype.nextOrComplete = function (value, predicateResult) {\n        var destination = this.destination;\n        if (Boolean(predicateResult)) {\n            destination.next(value);\n        }\n        else {\n            destination.complete();\n        }\n    };\n    return TakeWhileSubscriber;\n}(Subscriber));\n//# sourceMappingURL=takeWhile.js.map\n","/** PURE_IMPORTS_START tslib,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nexport var defaultThrottleConfig = {\n    leading: true,\n    trailing: false\n};\n/**\n * Emits a value from the source Observable, then ignores subsequent source\n * values for a duration determined by another Observable, then repeats this\n * process.\n *\n * <span class=\"informal\">It's like {@link throttleTime}, but the silencing\n * duration is determined by a second Observable.</span>\n *\n * <img src=\"./img/throttle.png\" width=\"100%\">\n *\n * `throttle` emits the source Observable values on the output Observable\n * when its internal timer is disabled, and ignores source values when the timer\n * is enabled. Initially, the timer is disabled. As soon as the first source\n * value arrives, it is forwarded to the output Observable, and then the timer\n * is enabled by calling the `durationSelector` function with the source value,\n * which returns the \"duration\" Observable. When the duration Observable emits a\n * value or completes, the timer is disabled, and this process repeats for the\n * next source value.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.throttle(ev => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounce}\n * @see {@link delayWhen}\n * @see {@link sample}\n * @see {@link throttleTime}\n *\n * @param {function(value: T): SubscribableOrPromise} durationSelector A function\n * that receives a value from the source Observable, for computing the silencing\n * duration for each source value, returned as an Observable or a Promise.\n * @param {Object} config a configuration object to define `leading` and `trailing` behavior. Defaults\n * to `{ leading: true, trailing: false }`.\n * @return {Observable<T>} An Observable that performs the throttle operation to\n * limit the rate of emissions from the source.\n * @method throttle\n * @owner Observable\n */\nexport function throttle(durationSelector, config) {\n    if (config === void 0) {\n        config = defaultThrottleConfig;\n    }\n    return function (source) { return source.lift(new ThrottleOperator(durationSelector, config.leading, config.trailing)); };\n}\nvar ThrottleOperator = /*@__PURE__*/ (function () {\n    function ThrottleOperator(durationSelector, leading, trailing) {\n        this.durationSelector = durationSelector;\n        this.leading = leading;\n        this.trailing = trailing;\n    }\n    ThrottleOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new ThrottleSubscriber(subscriber, this.durationSelector, this.leading, this.trailing));\n    };\n    return ThrottleOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc\n * @ignore\n * @extends {Ignored}\n */\nvar ThrottleSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(ThrottleSubscriber, _super);\n    function ThrottleSubscriber(destination, durationSelector, _leading, _trailing) {\n        var _this = _super.call(this, destination) || this;\n        _this.destination = destination;\n        _this.durationSelector = durationSelector;\n        _this._leading = _leading;\n        _this._trailing = _trailing;\n        _this._hasValue = false;\n        return _this;\n    }\n    ThrottleSubscriber.prototype._next = function (value) {\n        this._hasValue = true;\n        this._sendValue = value;\n        if (!this._throttled) {\n            if (this._leading) {\n                this.send();\n            }\n            else {\n                this.throttle(value);\n            }\n        }\n    };\n    ThrottleSubscriber.prototype.send = function () {\n        var _a = this, _hasValue = _a._hasValue, _sendValue = _a._sendValue;\n        if (_hasValue) {\n            this.destination.next(_sendValue);\n            this.throttle(_sendValue);\n        }\n        this._hasValue = false;\n        this._sendValue = null;\n    };\n    ThrottleSubscriber.prototype.throttle = function (value) {\n        var duration = this.tryDurationSelector(value);\n        if (duration) {\n            this.add(this._throttled = subscribeToResult(this, duration));\n        }\n    };\n    ThrottleSubscriber.prototype.tryDurationSelector = function (value) {\n        try {\n            return this.durationSelector(value);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return null;\n        }\n    };\n    ThrottleSubscriber.prototype.throttlingDone = function () {\n        var _a = this, _throttled = _a._throttled, _trailing = _a._trailing;\n        if (_throttled) {\n            _throttled.unsubscribe();\n        }\n        this._throttled = null;\n        if (_trailing) {\n            this.send();\n        }\n    };\n    ThrottleSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.throttlingDone();\n    };\n    ThrottleSubscriber.prototype.notifyComplete = function () {\n        this.throttlingDone();\n    };\n    return ThrottleSubscriber;\n}(OuterSubscriber));\n//# sourceMappingURL=throttle.js.map\n","/** PURE_IMPORTS_START tslib,_scheduler_async,_util_isDate,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { async } from '../scheduler/async';\nimport { isDate } from '../util/isDate';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n/* tslint:enable:max-line-length */\n/**\n *\n * Errors if Observable does not emit a value in given time span, in case of which\n * subscribes to the second Observable.\n *\n * <span class=\"informal\">It's a version of `timeout` operator that let's you specify fallback Observable.</span>\n *\n * <img src=\"./img/timeoutWith.png\" width=\"100%\">\n *\n * `timeoutWith` is a variation of `timeout` operator. It behaves exactly the same,\n * still accepting as a first argument either a number or a Date, which control - respectively -\n * when values of source Observable should be emitted or when it should complete.\n *\n * The only difference is that it accepts a second, required parameter. This parameter\n * should be an Observable which will be subscribed when source Observable fails any timeout check.\n * So whenever regular `timeout` would emit an error, `timeoutWith` will instead start re-emitting\n * values from second Observable. Note that this fallback Observable is not checked for timeouts\n * itself, so it can emit values and complete at arbitrary points in time. From the moment of a second\n * subscription, Observable returned from `timeoutWith` simply mirrors fallback stream. When that\n * stream completes, it completes as well.\n *\n * Scheduler, which in case of `timeout` is provided as as second argument, can be still provided\n * here - as a third, optional parameter. It still is used to schedule timeout checks and -\n * as a consequence - when second Observable will be subscribed, since subscription happens\n * immediately after failing check.\n *\n * @example <caption>Add fallback observable</caption>\n * const seconds = Rx.Observable.interval(1000);\n * const minutes = Rx.Observable.interval(60 * 1000);\n *\n * seconds.timeoutWith(900, minutes)\n *     .subscribe(\n *         value => console.log(value), // After 900ms, will start emitting `minutes`,\n *                                      // since first value of `seconds` will not arrive fast enough.\n *         err => console.log(err) // Would be called after 900ms in case of `timeout`,\n *                                 // but here will never be called.\n *     );\n *\n * @param {number|Date} due Number specifying period within which Observable must emit values\n *                          or Date specifying before when Observable should complete\n * @param {Observable<T>} withObservable Observable which will be subscribed if source fails timeout check.\n * @param {Scheduler} [scheduler] Scheduler controlling when timeout checks occur.\n * @return {Observable<T>} Observable that mirrors behaviour of source or, when timeout check fails, of an Observable\n *                          passed as a second parameter.\n * @method timeoutWith\n * @owner Observable\n */\nexport function timeoutWith(due, withObservable, scheduler) {\n    if (scheduler === void 0) {\n        scheduler = async;\n    }\n    return function (source) {\n        var absoluteTimeout = isDate(due);\n        var waitFor = absoluteTimeout ? (+due - scheduler.now()) : Math.abs(due);\n        return source.lift(new TimeoutWithOperator(waitFor, absoluteTimeout, withObservable, scheduler));\n    };\n}\nvar TimeoutWithOperator = /*@__PURE__*/ (function () {\n    function TimeoutWithOperator(waitFor, absoluteTimeout, withObservable, scheduler) {\n        this.waitFor = waitFor;\n        this.absoluteTimeout = absoluteTimeout;\n        this.withObservable = withObservable;\n        this.scheduler = scheduler;\n    }\n    TimeoutWithOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new TimeoutWithSubscriber(subscriber, this.absoluteTimeout, this.waitFor, this.withObservable, this.scheduler));\n    };\n    return TimeoutWithOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar TimeoutWithSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(TimeoutWithSubscriber, _super);\n    function TimeoutWithSubscriber(destination, absoluteTimeout, waitFor, withObservable, scheduler) {\n        var _this = _super.call(this, destination) || this;\n        _this.absoluteTimeout = absoluteTimeout;\n        _this.waitFor = waitFor;\n        _this.withObservable = withObservable;\n        _this.scheduler = scheduler;\n        _this.action = null;\n        _this.scheduleTimeout();\n        return _this;\n    }\n    TimeoutWithSubscriber.dispatchTimeout = function (subscriber) {\n        var withObservable = subscriber.withObservable;\n        subscriber._unsubscribeAndRecycle();\n        subscriber.add(subscribeToResult(subscriber, withObservable));\n    };\n    TimeoutWithSubscriber.prototype.scheduleTimeout = function () {\n        var action = this.action;\n        if (action) {\n            // Recycle the action if we've already scheduled one. All the production\n            // Scheduler Actions mutate their state/delay time and return themeselves.\n            // VirtualActions are immutable, so they create and return a clone. In this\n            // case, we need to set the action reference to the most recent VirtualAction,\n            // to ensure that's the one we clone from next time.\n            this.action = action.schedule(this, this.waitFor);\n        }\n        else {\n            this.add(this.action = this.scheduler.schedule(TimeoutWithSubscriber.dispatchTimeout, this.waitFor, this));\n        }\n    };\n    TimeoutWithSubscriber.prototype._next = function (value) {\n        if (!this.absoluteTimeout) {\n            this.scheduleTimeout();\n        }\n        _super.prototype._next.call(this, value);\n    };\n    /** @deprecated This is an internal implementation detail, do not use. */\n    TimeoutWithSubscriber.prototype._unsubscribe = function () {\n        this.action = null;\n        this.scheduler = null;\n        this.withObservable = null;\n    };\n    return TimeoutWithSubscriber;\n}(OuterSubscriber));\n//# sourceMappingURL=timeoutWith.js.map\n","/** PURE_IMPORTS_START tslib,_Subject,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subject } from '../Subject';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n/**\n * Branch out the source Observable values as a nested Observable whenever\n * `windowBoundaries` emits.\n *\n * <span class=\"informal\">It's like {@link buffer}, but emits a nested Observable\n * instead of an array.</span>\n *\n * <img src=\"./img/window.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits connected, non-overlapping\n * windows. It emits the current window and opens a new one whenever the\n * Observable `windowBoundaries` emits an item. Because each window is an\n * Observable, the output is a higher-order Observable.\n *\n * @example <caption>In every window of 1 second each, emit at most 2 click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var interval = Rx.Observable.interval(1000);\n * var result = clicks.window(interval)\n *   .map(win => win.take(2)) // each window has at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @see {@link windowCount}\n * @see {@link windowTime}\n * @see {@link windowToggle}\n * @see {@link windowWhen}\n * @see {@link buffer}\n *\n * @param {Observable<any>} windowBoundaries An Observable that completes the\n * previous window and starts a new window.\n * @return {Observable<Observable<T>>} An Observable of windows, which are\n * Observables emitting values of the source Observable.\n * @method window\n * @owner Observable\n */\nexport function window(windowBoundaries) {\n    return function windowOperatorFunction(source) {\n        return source.lift(new WindowOperator(windowBoundaries));\n    };\n}\nvar WindowOperator = /*@__PURE__*/ (function () {\n    function WindowOperator(windowBoundaries) {\n        this.windowBoundaries = windowBoundaries;\n    }\n    WindowOperator.prototype.call = function (subscriber, source) {\n        var windowSubscriber = new WindowSubscriber(subscriber);\n        var sourceSubscription = source.subscribe(windowSubscriber);\n        if (!sourceSubscription.closed) {\n            windowSubscriber.add(subscribeToResult(windowSubscriber, this.windowBoundaries));\n        }\n        return sourceSubscription;\n    };\n    return WindowOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar WindowSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(WindowSubscriber, _super);\n    function WindowSubscriber(destination) {\n        var _this = _super.call(this, destination) || this;\n        _this.window = new Subject();\n        destination.next(_this.window);\n        return _this;\n    }\n    WindowSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.openWindow();\n    };\n    WindowSubscriber.prototype.notifyError = function (error, innerSub) {\n        this._error(error);\n    };\n    WindowSubscriber.prototype.notifyComplete = function (innerSub) {\n        this._complete();\n    };\n    WindowSubscriber.prototype._next = function (value) {\n        this.window.next(value);\n    };\n    WindowSubscriber.prototype._error = function (err) {\n        this.window.error(err);\n        this.destination.error(err);\n    };\n    WindowSubscriber.prototype._complete = function () {\n        this.window.complete();\n        this.destination.complete();\n    };\n    /** @deprecated This is an internal implementation detail, do not use. */\n    WindowSubscriber.prototype._unsubscribe = function () {\n        this.window = null;\n    };\n    WindowSubscriber.prototype.openWindow = function () {\n        var prevWindow = this.window;\n        if (prevWindow) {\n            prevWindow.complete();\n        }\n        var destination = this.destination;\n        var newWindow = this.window = new Subject();\n        destination.next(newWindow);\n    };\n    return WindowSubscriber;\n}(OuterSubscriber));\n//# sourceMappingURL=window.js.map\n","/** PURE_IMPORTS_START tslib,_Subscriber,_Subject PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\nimport { Subject } from '../Subject';\n/**\n * Branch out the source Observable values as a nested Observable with each\n * nested Observable emitting at most `windowSize` values.\n *\n * <span class=\"informal\">It's like {@link bufferCount}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowCount.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits windows every `startWindowEvery`\n * items, each containing no more than `windowSize` items. When the source\n * Observable completes or encounters an error, the output Observable emits\n * the current window and propagates the notification from the source\n * Observable. If `startWindowEvery` is not provided, then new windows are\n * started immediately at the start of the source and when each window completes\n * with size `windowSize`.\n *\n * @example <caption>Ignore every 3rd click event, starting from the first one</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowCount(3)\n *   .map(win => win.skip(1)) // skip first of every 3 clicks\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Ignore every 3rd click event, starting from the third one</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowCount(2, 3)\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @see {@link window}\n * @see {@link windowTime}\n * @see {@link windowToggle}\n * @see {@link windowWhen}\n * @see {@link bufferCount}\n *\n * @param {number} windowSize The maximum number of values emitted by each\n * window.\n * @param {number} [startWindowEvery] Interval at which to start a new window.\n * For example if `startWindowEvery` is `2`, then a new window will be started\n * on every other value from the source. A new window is started at the\n * beginning of the source by default.\n * @return {Observable<Observable<T>>} An Observable of windows, which in turn\n * are Observable of values.\n * @method windowCount\n * @owner Observable\n */\nexport function windowCount(windowSize, startWindowEvery) {\n    if (startWindowEvery === void 0) {\n        startWindowEvery = 0;\n    }\n    return function windowCountOperatorFunction(source) {\n        return source.lift(new WindowCountOperator(windowSize, startWindowEvery));\n    };\n}\nvar WindowCountOperator = /*@__PURE__*/ (function () {\n    function WindowCountOperator(windowSize, startWindowEvery) {\n        this.windowSize = windowSize;\n        this.startWindowEvery = startWindowEvery;\n    }\n    WindowCountOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new WindowCountSubscriber(subscriber, this.windowSize, this.startWindowEvery));\n    };\n    return WindowCountOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar WindowCountSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(WindowCountSubscriber, _super);\n    function WindowCountSubscriber(destination, windowSize, startWindowEvery) {\n        var _this = _super.call(this, destination) || this;\n        _this.destination = destination;\n        _this.windowSize = windowSize;\n        _this.startWindowEvery = startWindowEvery;\n        _this.windows = [new Subject()];\n        _this.count = 0;\n        destination.next(_this.windows[0]);\n        return _this;\n    }\n    WindowCountSubscriber.prototype._next = function (value) {\n        var startWindowEvery = (this.startWindowEvery > 0) ? this.startWindowEvery : this.windowSize;\n        var destination = this.destination;\n        var windowSize = this.windowSize;\n        var windows = this.windows;\n        var len = windows.length;\n        for (var i = 0; i < len && !this.closed; i++) {\n            windows[i].next(value);\n        }\n        var c = this.count - windowSize + 1;\n        if (c >= 0 && c % startWindowEvery === 0 && !this.closed) {\n            windows.shift().complete();\n        }\n        if (++this.count % startWindowEvery === 0 && !this.closed) {\n            var window_1 = new Subject();\n            windows.push(window_1);\n            destination.next(window_1);\n        }\n    };\n    WindowCountSubscriber.prototype._error = function (err) {\n        var windows = this.windows;\n        if (windows) {\n            while (windows.length > 0 && !this.closed) {\n                windows.shift().error(err);\n            }\n        }\n        this.destination.error(err);\n    };\n    WindowCountSubscriber.prototype._complete = function () {\n        var windows = this.windows;\n        if (windows) {\n            while (windows.length > 0 && !this.closed) {\n                windows.shift().complete();\n            }\n        }\n        this.destination.complete();\n    };\n    WindowCountSubscriber.prototype._unsubscribe = function () {\n        this.count = 0;\n        this.windows = null;\n    };\n    return WindowCountSubscriber;\n}(Subscriber));\n//# sourceMappingURL=windowCount.js.map\n","/** PURE_IMPORTS_START tslib,_Subject,_scheduler_async,_Subscriber,_util_isNumeric,_util_isScheduler PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subject } from '../Subject';\nimport { async } from '../scheduler/async';\nimport { Subscriber } from '../Subscriber';\nimport { isNumeric } from '../util/isNumeric';\nimport { isScheduler } from '../util/isScheduler';\nexport function windowTime(windowTimeSpan) {\n    var scheduler = async;\n    var windowCreationInterval = null;\n    var maxWindowSize = Number.POSITIVE_INFINITY;\n    if (isScheduler(arguments[3])) {\n        scheduler = arguments[3];\n    }\n    if (isScheduler(arguments[2])) {\n        scheduler = arguments[2];\n    }\n    else if (isNumeric(arguments[2])) {\n        maxWindowSize = arguments[2];\n    }\n    if (isScheduler(arguments[1])) {\n        scheduler = arguments[1];\n    }\n    else if (isNumeric(arguments[1])) {\n        windowCreationInterval = arguments[1];\n    }\n    return function windowTimeOperatorFunction(source) {\n        return source.lift(new WindowTimeOperator(windowTimeSpan, windowCreationInterval, maxWindowSize, scheduler));\n    };\n}\nvar WindowTimeOperator = /*@__PURE__*/ (function () {\n    function WindowTimeOperator(windowTimeSpan, windowCreationInterval, maxWindowSize, scheduler) {\n        this.windowTimeSpan = windowTimeSpan;\n        this.windowCreationInterval = windowCreationInterval;\n        this.maxWindowSize = maxWindowSize;\n        this.scheduler = scheduler;\n    }\n    WindowTimeOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new WindowTimeSubscriber(subscriber, this.windowTimeSpan, this.windowCreationInterval, this.maxWindowSize, this.scheduler));\n    };\n    return WindowTimeOperator;\n}());\nvar CountedSubject = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(CountedSubject, _super);\n    function CountedSubject() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this._numberOfNextedValues = 0;\n        return _this;\n    }\n    CountedSubject.prototype.next = function (value) {\n        this._numberOfNextedValues++;\n        _super.prototype.next.call(this, value);\n    };\n    Object.defineProperty(CountedSubject.prototype, \"numberOfNextedValues\", {\n        get: function () {\n            return this._numberOfNextedValues;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return CountedSubject;\n}(Subject));\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar WindowTimeSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(WindowTimeSubscriber, _super);\n    function WindowTimeSubscriber(destination, windowTimeSpan, windowCreationInterval, maxWindowSize, scheduler) {\n        var _this = _super.call(this, destination) || this;\n        _this.destination = destination;\n        _this.windowTimeSpan = windowTimeSpan;\n        _this.windowCreationInterval = windowCreationInterval;\n        _this.maxWindowSize = maxWindowSize;\n        _this.scheduler = scheduler;\n        _this.windows = [];\n        var window = _this.openWindow();\n        if (windowCreationInterval !== null && windowCreationInterval >= 0) {\n            var closeState = { subscriber: _this, window: window, context: null };\n            var creationState = { windowTimeSpan: windowTimeSpan, windowCreationInterval: windowCreationInterval, subscriber: _this, scheduler: scheduler };\n            _this.add(scheduler.schedule(dispatchWindowClose, windowTimeSpan, closeState));\n            _this.add(scheduler.schedule(dispatchWindowCreation, windowCreationInterval, creationState));\n        }\n        else {\n            var timeSpanOnlyState = { subscriber: _this, window: window, windowTimeSpan: windowTimeSpan };\n            _this.add(scheduler.schedule(dispatchWindowTimeSpanOnly, windowTimeSpan, timeSpanOnlyState));\n        }\n        return _this;\n    }\n    WindowTimeSubscriber.prototype._next = function (value) {\n        var windows = this.windows;\n        var len = windows.length;\n        for (var i = 0; i < len; i++) {\n            var window_1 = windows[i];\n            if (!window_1.closed) {\n                window_1.next(value);\n                if (window_1.numberOfNextedValues >= this.maxWindowSize) {\n                    this.closeWindow(window_1);\n                }\n            }\n        }\n    };\n    WindowTimeSubscriber.prototype._error = function (err) {\n        var windows = this.windows;\n        while (windows.length > 0) {\n            windows.shift().error(err);\n        }\n        this.destination.error(err);\n    };\n    WindowTimeSubscriber.prototype._complete = function () {\n        var windows = this.windows;\n        while (windows.length > 0) {\n            var window_2 = windows.shift();\n            if (!window_2.closed) {\n                window_2.complete();\n            }\n        }\n        this.destination.complete();\n    };\n    WindowTimeSubscriber.prototype.openWindow = function () {\n        var window = new CountedSubject();\n        this.windows.push(window);\n        var destination = this.destination;\n        destination.next(window);\n        return window;\n    };\n    WindowTimeSubscriber.prototype.closeWindow = function (window) {\n        window.complete();\n        var windows = this.windows;\n        windows.splice(windows.indexOf(window), 1);\n    };\n    return WindowTimeSubscriber;\n}(Subscriber));\nfunction dispatchWindowTimeSpanOnly(state) {\n    var subscriber = state.subscriber, windowTimeSpan = state.windowTimeSpan, window = state.window;\n    if (window) {\n        subscriber.closeWindow(window);\n    }\n    state.window = subscriber.openWindow();\n    this.schedule(state, windowTimeSpan);\n}\nfunction dispatchWindowCreation(state) {\n    var windowTimeSpan = state.windowTimeSpan, subscriber = state.subscriber, scheduler = state.scheduler, windowCreationInterval = state.windowCreationInterval;\n    var window = subscriber.openWindow();\n    var action = this;\n    var context = { action: action, subscription: null };\n    var timeSpanState = { subscriber: subscriber, window: window, context: context };\n    context.subscription = scheduler.schedule(dispatchWindowClose, windowTimeSpan, timeSpanState);\n    action.add(context.subscription);\n    action.schedule(state, windowCreationInterval);\n}\nfunction dispatchWindowClose(state) {\n    var subscriber = state.subscriber, window = state.window, context = state.context;\n    if (context && context.action && context.subscription) {\n        context.action.remove(context.subscription);\n    }\n    subscriber.closeWindow(window);\n}\n//# sourceMappingURL=windowTime.js.map\n","/**\r\n * @license Angular v6.0.0-rc.5+167.sha-4ecae64\r\n * (c) 2010-2018 Google, Inc. https://angular.io/\r\n * License: MIT\r\n */\r\n\r\nimport { __assign, __extends, __read, __spread, __values } from 'tslib';\r\nimport { Observable, Subject, Subscription, merge } from 'rxjs';\r\nimport { share } from 'rxjs/operators';\r\n\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * Construct an `InjectableDef` which defines how a token will be constructed by the DI system, and\r\n * in which injectors (if any) it will be available.\r\n *\r\n * This should be assigned to a static `ngInjectableDef` field on a type, which will then be an\r\n * `InjectableType`.\r\n *\r\n * Options:\r\n * * `providedIn` determines which injectors will include the injectable, by either associating it\r\n *   with an `@NgModule` or other `InjectorType`, or by specifying that this injectable should be\r\n *   provided in the `'root'` injector, which will be the application-level injector in most apps.\r\n * * `factory` gives the zero argument function which will create an instance of the injectable.\r\n *   The factory can call `inject` to access the `Injector` and request injection of dependencies.\r\n *\r\n * @experimental\r\n */\r\nfunction defineInjectable(opts) {\r\n    return {\r\n        providedIn: opts.providedIn || null, factory: opts.factory, value: undefined,\r\n    };\r\n}\r\n/**\r\n * Construct an `InjectorDef` which configures an injector.\r\n *\r\n * This should be assigned to a static `ngInjectorDef` field on a type, which will then be an\r\n * `InjectorType`.\r\n *\r\n * Options:\r\n *\r\n * * `factory`: an `InjectorType` is an instantiable type, so a zero argument `factory` function to\r\n *   create the type must be provided. If that factory function needs to inject arguments, it can\r\n *   use the `inject` function.\r\n * * `providers`: an optional array of providers to add to the injector. Each provider must\r\n *   either have a factory or point to a type which has an `ngInjectableDef` static property (the\r\n *   type must be an `InjectableType`).\r\n * * `imports`: an optional array of imports of other `InjectorType`s or `InjectorTypeWithModule`s\r\n *   whose providers will also be added to the injector. Locally provided types will override\r\n *   providers from imports.\r\n *\r\n * @experimental\r\n */\r\nfunction defineInjector(options) {\r\n    return {\r\n        factory: options.factory, providers: options.providers || [], imports: options.imports || [],\r\n    };\r\n}\r\n\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * Creates a token that can be used in a DI Provider.\r\n *\r\n * Use an `InjectionToken` whenever the type you are injecting is not reified (does not have a\r\n * runtime representation) such as when injecting an interface, callable type, array or\r\n * parametrized type.\r\n *\r\n * `InjectionToken` is parameterized on `T` which is the type of object which will be returned by\r\n * the `Injector`. This provides additional level of type safety.\r\n *\r\n * ```\r\n * interface MyInterface {...}\r\n * var myInterface = injector.get(new InjectionToken<MyInterface>('SomeToken'));\r\n * // myInterface is inferred to be MyInterface.\r\n * ```\r\n *\r\n * When creating an `InjectionToken`, you can optionally specify a factory function which returns\r\n * (possibly by creating) a default value of the parameterized type `T`. This sets up the\r\n * `InjectionToken` using this factory as a provider as if it was defined explicitly in the\r\n * application's root injector. If the factory function, which takes zero arguments, needs to inject\r\n * dependencies, it can do so using the `inject` function. See below for an example.\r\n *\r\n * Additionally, if a `factory` is specified you can also specify the `providedIn` option, which\r\n * overrides the above behavior and marks the token as belonging to a particular `@NgModule`. As\r\n * mentioned above, `'root'` is the default value for `providedIn`.\r\n *\r\n * ### Example\r\n *\r\n * #### Tree-shakeable InjectionToken\r\n *\r\n * {@example core/di/ts/injector_spec.ts region='ShakeableInjectionToken'}\r\n *\r\n * #### Plain InjectionToken\r\n *\r\n * {@example core/di/ts/injector_spec.ts region='InjectionToken'}\r\n *\r\n *\r\n */\r\nvar InjectionToken = /** @class */ (function () {\r\n    function InjectionToken(_desc, options) {\r\n        this._desc = _desc;\r\n        /** @internal */\r\n        this.ngMetadataName = 'InjectionToken';\r\n        if (options !== undefined) {\r\n            this.ngInjectableDef = defineInjectable({\r\n                providedIn: options.providedIn || 'root',\r\n                factory: options.factory,\r\n            });\r\n        }\r\n        else {\r\n            this.ngInjectableDef = undefined;\r\n        }\r\n    }\r\n    InjectionToken.prototype.toString = function () { return \"InjectionToken \" + this._desc; };\r\n    return InjectionToken;\r\n}());\r\n\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nvar ANNOTATIONS = '__annotations__';\r\nvar PARAMETERS = '__parameters__';\r\nvar PROP_METADATA = '__prop__metadata__';\r\n/**\r\n * @suppress {globalThis}\r\n */\r\nfunction makeDecorator(name, props, parentClass, chainFn, typeFn) {\r\n    var metaCtor = makeMetadataCtor(props);\r\n    function DecoratorFactory() {\r\n        var args = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            args[_i] = arguments[_i];\r\n        }\r\n        if (this instanceof DecoratorFactory) {\r\n            metaCtor.call.apply(metaCtor, __spread([this], args));\r\n            return this;\r\n        }\r\n        var annotationInstance = new ((_a = DecoratorFactory).bind.apply(_a, __spread([void 0], args)))();\r\n        var TypeDecorator = function TypeDecorator(cls) {\r\n            typeFn && typeFn.apply(void 0, __spread([cls], args));\r\n            // Use of Object.defineProperty is important since it creates non-enumerable property which\r\n            // prevents the property is copied during subclassing.\r\n            var annotations = cls.hasOwnProperty(ANNOTATIONS) ?\r\n                cls[ANNOTATIONS] :\r\n                Object.defineProperty(cls, ANNOTATIONS, { value: [] })[ANNOTATIONS];\r\n            annotations.push(annotationInstance);\r\n            return cls;\r\n        };\r\n        if (chainFn)\r\n            chainFn(TypeDecorator);\r\n        return TypeDecorator;\r\n        var _a;\r\n    }\r\n    if (parentClass) {\r\n        DecoratorFactory.prototype = Object.create(parentClass.prototype);\r\n    }\r\n    DecoratorFactory.prototype.ngMetadataName = name;\r\n    DecoratorFactory.annotationCls = DecoratorFactory;\r\n    return DecoratorFactory;\r\n}\r\nfunction makeMetadataCtor(props) {\r\n    return function ctor() {\r\n        var args = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            args[_i] = arguments[_i];\r\n        }\r\n        if (props) {\r\n            var values = props.apply(void 0, __spread(args));\r\n            for (var propName in values) {\r\n                this[propName] = values[propName];\r\n            }\r\n        }\r\n    };\r\n}\r\nfunction makeParamDecorator(name, props, parentClass) {\r\n    var metaCtor = makeMetadataCtor(props);\r\n    function ParamDecoratorFactory() {\r\n        var args = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            args[_i] = arguments[_i];\r\n        }\r\n        if (this instanceof ParamDecoratorFactory) {\r\n            metaCtor.apply(this, args);\r\n            return this;\r\n        }\r\n        var annotationInstance = new ((_a = ParamDecoratorFactory).bind.apply(_a, __spread([void 0], args)))();\r\n        ParamDecorator.annotation = annotationInstance;\r\n        return ParamDecorator;\r\n        function ParamDecorator(cls, unusedKey, index) {\r\n            // Use of Object.defineProperty is important since it creates non-enumerable property which\r\n            // prevents the property is copied during subclassing.\r\n            var parameters = cls.hasOwnProperty(PARAMETERS) ?\r\n                cls[PARAMETERS] :\r\n                Object.defineProperty(cls, PARAMETERS, { value: [] })[PARAMETERS];\r\n            // there might be gaps if some in between parameters do not have annotations.\r\n            // we pad with nulls.\r\n            while (parameters.length <= index) {\r\n                parameters.push(null);\r\n            }\r\n            (parameters[index] = parameters[index] || []).push(annotationInstance);\r\n            return cls;\r\n        }\r\n        var _a;\r\n    }\r\n    if (parentClass) {\r\n        ParamDecoratorFactory.prototype = Object.create(parentClass.prototype);\r\n    }\r\n    ParamDecoratorFactory.prototype.ngMetadataName = name;\r\n    ParamDecoratorFactory.annotationCls = ParamDecoratorFactory;\r\n    return ParamDecoratorFactory;\r\n}\r\nfunction makePropDecorator(name, props, parentClass) {\r\n    var metaCtor = makeMetadataCtor(props);\r\n    function PropDecoratorFactory() {\r\n        var args = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            args[_i] = arguments[_i];\r\n        }\r\n        if (this instanceof PropDecoratorFactory) {\r\n            metaCtor.apply(this, args);\r\n            return this;\r\n        }\r\n        var decoratorInstance = new ((_a = PropDecoratorFactory).bind.apply(_a, __spread([void 0], args)))();\r\n        return function PropDecorator(target, name) {\r\n            var constructor = target.constructor;\r\n            // Use of Object.defineProperty is important since it creates non-enumerable property which\r\n            // prevents the property is copied during subclassing.\r\n            var meta = constructor.hasOwnProperty(PROP_METADATA) ?\r\n                constructor[PROP_METADATA] :\r\n                Object.defineProperty(constructor, PROP_METADATA, { value: {} })[PROP_METADATA];\r\n            meta[name] = meta.hasOwnProperty(name) && meta[name] || [];\r\n            meta[name].unshift(decoratorInstance);\r\n        };\r\n        var _a;\r\n    }\r\n    if (parentClass) {\r\n        PropDecoratorFactory.prototype = Object.create(parentClass.prototype);\r\n    }\r\n    PropDecoratorFactory.prototype.ngMetadataName = name;\r\n    PropDecoratorFactory.annotationCls = PropDecoratorFactory;\r\n    return PropDecoratorFactory;\r\n}\r\n\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * This token can be used to create a virtual provider that will populate the\r\n * `entryComponents` fields of components and ng modules based on its `useValue`.\r\n * All components that are referenced in the `useValue` value (either directly\r\n * or in a nested array or map) will be added to the `entryComponents` property.\r\n *\r\n * ### Example\r\n * The following example shows how the router can populate the `entryComponents`\r\n * field of an NgModule based on the router configuration which refers\r\n * to components.\r\n *\r\n * ```typescript\r\n * // helper function inside the router\r\n * function provideRoutes(routes) {\r\n *   return [\r\n *     {provide: ROUTES, useValue: routes},\r\n *     {provide: ANALYZE_FOR_ENTRY_COMPONENTS, useValue: routes, multi: true}\r\n *   ];\r\n * }\r\n *\r\n * // user code\r\n * let routes = [\r\n *   {path: '/root', component: RootComp},\r\n *   {path: '/teams', component: TeamsComp}\r\n * ];\r\n *\r\n * @NgModule({\r\n *   providers: [provideRoutes(routes)]\r\n * })\r\n * class ModuleWithRoutes {}\r\n * ```\r\n *\r\n * @experimental\r\n */\r\nvar ANALYZE_FOR_ENTRY_COMPONENTS = new InjectionToken('AnalyzeForEntryComponents');\r\n/**\r\n * Attribute decorator and metadata.\r\n *\r\n *\r\n * @Annotation\r\n */\r\nvar Attribute = makeParamDecorator('Attribute', function (attributeName) { return ({ attributeName: attributeName }); });\r\n/**\r\n * Base class for query metadata.\r\n *\r\n * See {@link ContentChildren}, {@link ContentChild}, {@link ViewChildren}, {@link ViewChild} for\r\n * more information.\r\n *\r\n *\r\n */\r\nvar Query = /** @class */ (function () {\r\n    function Query() {\r\n    }\r\n    return Query;\r\n}());\r\n/**\r\n * ContentChildren decorator and metadata.\r\n *\r\n *\r\n *  @Annotation\r\n */\r\nvar ContentChildren = makePropDecorator('ContentChildren', function (selector, data) {\r\n    if (data === void 0) { data = {}; }\r\n    return (__assign({ selector: selector, first: false, isViewQuery: false, descendants: false }, data));\r\n}, Query);\r\n/**\r\n * ContentChild decorator and metadata.\r\n *\r\n *\r\n * @Annotation\r\n */\r\nvar ContentChild = makePropDecorator('ContentChild', function (selector, data) {\r\n    if (data === void 0) { data = {}; }\r\n    return (__assign({ selector: selector, first: true, isViewQuery: false, descendants: true }, data));\r\n}, Query);\r\n/**\r\n * ViewChildren decorator and metadata.\r\n *\r\n *\r\n * @Annotation\r\n */\r\nvar ViewChildren = makePropDecorator('ViewChildren', function (selector, data) {\r\n    if (data === void 0) { data = {}; }\r\n    return (__assign({ selector: selector, first: false, isViewQuery: true, descendants: true }, data));\r\n}, Query);\r\n/**\r\n * ViewChild decorator and metadata.\r\n *\r\n *\r\n * @Annotation\r\n */\r\nvar ViewChild = makePropDecorator('ViewChild', function (selector, data) {\r\n    return (__assign({ selector: selector, first: true, isViewQuery: true, descendants: true }, data));\r\n}, Query);\r\n\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * Describes within the change detector which strategy will be used the next time change\r\n * detection is triggered.\r\n *\r\n */\r\n/**\r\n * Describes within the change detector which strategy will be used the next time change\r\n * detection is triggered.\r\n *\r\n */\r\nvar ChangeDetectionStrategy;\r\n/**\r\n * Describes within the change detector which strategy will be used the next time change\r\n * detection is triggered.\r\n *\r\n */\r\n(function (ChangeDetectionStrategy) {\r\n    /**\r\n     * `OnPush` means that the change detector's mode will be initially set to `CheckOnce`.\r\n     */\r\n    ChangeDetectionStrategy[ChangeDetectionStrategy[\"OnPush\"] = 0] = \"OnPush\";\r\n    /**\r\n     * `Default` means that the change detector's mode will be initially set to `CheckAlways`.\r\n     */\r\n    ChangeDetectionStrategy[ChangeDetectionStrategy[\"Default\"] = 1] = \"Default\";\r\n})(ChangeDetectionStrategy || (ChangeDetectionStrategy = {}));\r\n/**\r\n * Describes the status of the detector.\r\n */\r\n/**\r\n * Describes the status of the detector.\r\n */\r\nvar ChangeDetectorStatus;\r\n/**\r\n * Describes the status of the detector.\r\n */\r\n(function (ChangeDetectorStatus) {\r\n    /**\r\n     * `CheckOnce` means that after calling detectChanges the mode of the change detector\r\n     * will become `Checked`.\r\n     */\r\n    ChangeDetectorStatus[ChangeDetectorStatus[\"CheckOnce\"] = 0] = \"CheckOnce\";\r\n    /**\r\n     * `Checked` means that the change detector should be skipped until its mode changes to\r\n     * `CheckOnce`.\r\n     */\r\n    ChangeDetectorStatus[ChangeDetectorStatus[\"Checked\"] = 1] = \"Checked\";\r\n    /**\r\n     * `CheckAlways` means that after calling detectChanges the mode of the change detector\r\n     * will remain `CheckAlways`.\r\n     */\r\n    ChangeDetectorStatus[ChangeDetectorStatus[\"CheckAlways\"] = 2] = \"CheckAlways\";\r\n    /**\r\n     * `Detached` means that the change detector sub tree is not a part of the main tree and\r\n     * should be skipped.\r\n     */\r\n    ChangeDetectorStatus[ChangeDetectorStatus[\"Detached\"] = 3] = \"Detached\";\r\n    /**\r\n     * `Errored` means that the change detector encountered an error checking a binding\r\n     * or calling a directive lifecycle method and is now in an inconsistent state. Change\r\n     * detectors in this state will no longer detect changes.\r\n     */\r\n    ChangeDetectorStatus[ChangeDetectorStatus[\"Errored\"] = 4] = \"Errored\";\r\n    /**\r\n     * `Destroyed` means that the change detector is destroyed.\r\n     */\r\n    ChangeDetectorStatus[ChangeDetectorStatus[\"Destroyed\"] = 5] = \"Destroyed\";\r\n})(ChangeDetectorStatus || (ChangeDetectorStatus = {}));\r\nfunction isDefaultChangeDetectionStrategy(changeDetectionStrategy) {\r\n    return changeDetectionStrategy == null ||\r\n        changeDetectionStrategy === ChangeDetectionStrategy.Default;\r\n}\r\n\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * Directive decorator and metadata.\r\n *\r\n *\r\n * @Annotation\r\n */\r\nvar Directive = makeDecorator('Directive', function (dir) {\r\n    if (dir === void 0) { dir = {}; }\r\n    return dir;\r\n});\r\n/**\r\n * Component decorator and metadata.\r\n *\r\n *\r\n * @Annotation\r\n */\r\nvar Component = makeDecorator('Component', function (c) {\r\n    if (c === void 0) { c = {}; }\r\n    return (__assign({ changeDetection: ChangeDetectionStrategy.Default }, c));\r\n}, Directive);\r\n/**\r\n * Pipe decorator and metadata.\r\n *\r\n * Use the `@Pipe` annotation to declare that a given class is a pipe. A pipe\r\n * class must also implement {@link PipeTransform} interface.\r\n *\r\n * To use the pipe include a reference to the pipe class in\r\n * {@link NgModule#declarations}.\r\n *\r\n *\r\n * @Annotation\r\n */\r\nvar Pipe = makeDecorator('Pipe', function (p) { return (__assign({ pure: true }, p)); });\r\n/**\r\n * Input decorator and metadata.\r\n *\r\n *\r\n * @Annotation\r\n */\r\nvar Input = makePropDecorator('Input', function (bindingPropertyName) { return ({ bindingPropertyName: bindingPropertyName }); });\r\n/**\r\n * Output decorator and metadata.\r\n *\r\n *\r\n * @Annotation\r\n */\r\nvar Output = makePropDecorator('Output', function (bindingPropertyName) { return ({ bindingPropertyName: bindingPropertyName }); });\r\n/**\r\n * HostBinding decorator and metadata.\r\n *\r\n *\r\n * @Annotation\r\n */\r\nvar HostBinding = makePropDecorator('HostBinding', function (hostPropertyName) { return ({ hostPropertyName: hostPropertyName }); });\r\n/**\r\n * HostListener decorator and metadata.\r\n *\r\n *\r\n * @Annotation\r\n */\r\nvar HostListener = makePropDecorator('HostListener', function (eventName, args) { return ({ eventName: eventName, args: args }); });\r\n\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * @description\r\n *\r\n * Represents a type that a Component or other object is instances of.\r\n *\r\n * An example of a `Type` is `MyCustomComponent` class, which in JavaScript is be represented by\r\n * the `MyCustomComponent` constructor function.\r\n *\r\n *\r\n */\r\nvar Type = Function;\r\nfunction isType(v) {\r\n    return typeof v === 'function';\r\n}\r\n\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nvar __window = typeof window !== 'undefined' && window;\r\nvar __self = typeof self !== 'undefined' && typeof WorkerGlobalScope !== 'undefined' &&\r\n    self instanceof WorkerGlobalScope && self;\r\nvar __global = typeof global !== 'undefined' && global;\r\nvar _global = __window || __global || __self;\r\nvar promise = Promise.resolve(0);\r\nvar _symbolIterator = null;\r\nfunction getSymbolIterator() {\r\n    if (!_symbolIterator) {\r\n        var Symbol_1 = _global['Symbol'];\r\n        if (Symbol_1 && Symbol_1.iterator) {\r\n            _symbolIterator = Symbol_1.iterator;\r\n        }\r\n        else {\r\n            // es6-shim specific logic\r\n            var keys = Object.getOwnPropertyNames(Map.prototype);\r\n            for (var i = 0; i < keys.length; ++i) {\r\n                var key = keys[i];\r\n                if (key !== 'entries' && key !== 'size' &&\r\n                    Map.prototype[key] === Map.prototype['entries']) {\r\n                    _symbolIterator = key;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return _symbolIterator;\r\n}\r\nfunction scheduleMicroTask(fn) {\r\n    if (typeof Zone === 'undefined') {\r\n        // use promise to schedule microTask instead of use Zone\r\n        promise.then(function () { fn && fn.apply(null, null); });\r\n    }\r\n    else {\r\n        Zone.current.scheduleMicroTask('scheduleMicrotask', fn);\r\n    }\r\n}\r\n// JS has NaN !== NaN\r\nfunction looseIdentical(a, b) {\r\n    return a === b || typeof a === 'number' && typeof b === 'number' && isNaN(a) && isNaN(b);\r\n}\r\nfunction stringify(token) {\r\n    if (typeof token === 'string') {\r\n        return token;\r\n    }\r\n    if (token instanceof Array) {\r\n        return '[' + token.map(stringify).join(', ') + ']';\r\n    }\r\n    if (token == null) {\r\n        return '' + token;\r\n    }\r\n    if (token.overriddenName) {\r\n        return \"\" + token.overriddenName;\r\n    }\r\n    if (token.name) {\r\n        return \"\" + token.name;\r\n    }\r\n    var res = token.toString();\r\n    if (res == null) {\r\n        return '' + res;\r\n    }\r\n    var newLineIndex = res.indexOf('\\n');\r\n    return newLineIndex === -1 ? res : res.substring(0, newLineIndex);\r\n}\r\n\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * Attention: These regex has to hold even if the code is minified!\r\n */\r\nvar DELEGATE_CTOR = /^function\\s+\\S+\\(\\)\\s*{[\\s\\S]+\\.apply\\(this,\\s*arguments\\)/;\r\nvar INHERITED_CLASS = /^class\\s+[A-Za-z\\d$_]*\\s*extends\\s+[A-Za-z\\d$_]+\\s*{/;\r\nvar INHERITED_CLASS_WITH_CTOR = /^class\\s+[A-Za-z\\d$_]*\\s*extends\\s+[A-Za-z\\d$_]+\\s*{[\\s\\S]*constructor\\s*\\(/;\r\nvar ReflectionCapabilities = /** @class */ (function () {\r\n    function ReflectionCapabilities(reflect) {\r\n        this._reflect = reflect || _global['Reflect'];\r\n    }\r\n    ReflectionCapabilities.prototype.isReflectionEnabled = function () { return true; };\r\n    ReflectionCapabilities.prototype.factory = function (t) { return function () {\r\n        var args = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            args[_i] = arguments[_i];\r\n        }\r\n        return new (t.bind.apply(t, __spread([void 0], args)))();\r\n    }; };\r\n    /** @internal */\r\n    /** @internal */\r\n    ReflectionCapabilities.prototype._zipTypesAndAnnotations = /** @internal */\r\n    function (paramTypes, paramAnnotations) {\r\n        var result;\r\n        if (typeof paramTypes === 'undefined') {\r\n            result = new Array(paramAnnotations.length);\r\n        }\r\n        else {\r\n            result = new Array(paramTypes.length);\r\n        }\r\n        for (var i = 0; i < result.length; i++) {\r\n            // TS outputs Object for parameters without types, while Traceur omits\r\n            // the annotations. For now we preserve the Traceur behavior to aid\r\n            // migration, but this can be revisited.\r\n            if (typeof paramTypes === 'undefined') {\r\n                result[i] = [];\r\n            }\r\n            else if (paramTypes[i] != Object) {\r\n                result[i] = [paramTypes[i]];\r\n            }\r\n            else {\r\n                result[i] = [];\r\n            }\r\n            if (paramAnnotations && paramAnnotations[i] != null) {\r\n                result[i] = result[i].concat(paramAnnotations[i]);\r\n            }\r\n        }\r\n        return result;\r\n    };\r\n    ReflectionCapabilities.prototype._ownParameters = function (type, parentCtor) {\r\n        var typeStr = type.toString();\r\n        // If we have no decorators, we only have function.length as metadata.\r\n        // In that case, to detect whether a child class declared an own constructor or not,\r\n        // we need to look inside of that constructor to check whether it is\r\n        // just calling the parent.\r\n        // This also helps to work around for https://github.com/Microsoft/TypeScript/issues/12439\r\n        // that sets 'design:paramtypes' to []\r\n        // if a class inherits from another class but has no ctor declared itself.\r\n        if (DELEGATE_CTOR.exec(typeStr) ||\r\n            (INHERITED_CLASS.exec(typeStr) && !INHERITED_CLASS_WITH_CTOR.exec(typeStr))) {\r\n            return null;\r\n        }\r\n        // Prefer the direct API.\r\n        if (type.parameters && type.parameters !== parentCtor.parameters) {\r\n            return type.parameters;\r\n        }\r\n        // API of tsickle for lowering decorators to properties on the class.\r\n        var tsickleCtorParams = type.ctorParameters;\r\n        if (tsickleCtorParams && tsickleCtorParams !== parentCtor.ctorParameters) {\r\n            // Newer tsickle uses a function closure\r\n            // Retain the non-function case for compatibility with older tsickle\r\n            var ctorParameters = typeof tsickleCtorParams === 'function' ? tsickleCtorParams() : tsickleCtorParams;\r\n            var paramTypes_1 = ctorParameters.map(function (ctorParam) { return ctorParam && ctorParam.type; });\r\n            var paramAnnotations_1 = ctorParameters.map(function (ctorParam) {\r\n                return ctorParam && convertTsickleDecoratorIntoMetadata(ctorParam.decorators);\r\n            });\r\n            return this._zipTypesAndAnnotations(paramTypes_1, paramAnnotations_1);\r\n        }\r\n        // API for metadata created by invoking the decorators.\r\n        var paramAnnotations = type.hasOwnProperty(PARAMETERS) && type[PARAMETERS];\r\n        var paramTypes = this._reflect && this._reflect.getOwnMetadata &&\r\n            this._reflect.getOwnMetadata('design:paramtypes', type);\r\n        if (paramTypes || paramAnnotations) {\r\n            return this._zipTypesAndAnnotations(paramTypes, paramAnnotations);\r\n        }\r\n        // If a class has no decorators, at least create metadata\r\n        // based on function.length.\r\n        // Note: We know that this is a real constructor as we checked\r\n        // the content of the constructor above.\r\n        return new Array(type.length).fill(undefined);\r\n    };\r\n    ReflectionCapabilities.prototype.parameters = function (type) {\r\n        // Note: only report metadata if we have at least one class decorator\r\n        // to stay in sync with the static reflector.\r\n        if (!isType(type)) {\r\n            return [];\r\n        }\r\n        var parentCtor = getParentCtor(type);\r\n        var parameters = this._ownParameters(type, parentCtor);\r\n        if (!parameters && parentCtor !== Object) {\r\n            parameters = this.parameters(parentCtor);\r\n        }\r\n        return parameters || [];\r\n    };\r\n    ReflectionCapabilities.prototype._ownAnnotations = function (typeOrFunc, parentCtor) {\r\n        // Prefer the direct API.\r\n        if (typeOrFunc.annotations && typeOrFunc.annotations !== parentCtor.annotations) {\r\n            var annotations = typeOrFunc.annotations;\r\n            if (typeof annotations === 'function' && annotations.annotations) {\r\n                annotations = annotations.annotations;\r\n            }\r\n            return annotations;\r\n        }\r\n        // API of tsickle for lowering decorators to properties on the class.\r\n        if (typeOrFunc.decorators && typeOrFunc.decorators !== parentCtor.decorators) {\r\n            return convertTsickleDecoratorIntoMetadata(typeOrFunc.decorators);\r\n        }\r\n        // API for metadata created by invoking the decorators.\r\n        if (typeOrFunc.hasOwnProperty(ANNOTATIONS)) {\r\n            return typeOrFunc[ANNOTATIONS];\r\n        }\r\n        return null;\r\n    };\r\n    ReflectionCapabilities.prototype.annotations = function (typeOrFunc) {\r\n        if (!isType(typeOrFunc)) {\r\n            return [];\r\n        }\r\n        var parentCtor = getParentCtor(typeOrFunc);\r\n        var ownAnnotations = this._ownAnnotations(typeOrFunc, parentCtor) || [];\r\n        var parentAnnotations = parentCtor !== Object ? this.annotations(parentCtor) : [];\r\n        return parentAnnotations.concat(ownAnnotations);\r\n    };\r\n    ReflectionCapabilities.prototype._ownPropMetadata = function (typeOrFunc, parentCtor) {\r\n        // Prefer the direct API.\r\n        if (typeOrFunc.propMetadata &&\r\n            typeOrFunc.propMetadata !== parentCtor.propMetadata) {\r\n            var propMetadata = typeOrFunc.propMetadata;\r\n            if (typeof propMetadata === 'function' && propMetadata.propMetadata) {\r\n                propMetadata = propMetadata.propMetadata;\r\n            }\r\n            return propMetadata;\r\n        }\r\n        // API of tsickle for lowering decorators to properties on the class.\r\n        if (typeOrFunc.propDecorators &&\r\n            typeOrFunc.propDecorators !== parentCtor.propDecorators) {\r\n            var propDecorators_1 = typeOrFunc.propDecorators;\r\n            var propMetadata_1 = {};\r\n            Object.keys(propDecorators_1).forEach(function (prop) {\r\n                propMetadata_1[prop] = convertTsickleDecoratorIntoMetadata(propDecorators_1[prop]);\r\n            });\r\n            return propMetadata_1;\r\n        }\r\n        // API for metadata created by invoking the decorators.\r\n        if (typeOrFunc.hasOwnProperty(PROP_METADATA)) {\r\n            return typeOrFunc[PROP_METADATA];\r\n        }\r\n        return null;\r\n    };\r\n    ReflectionCapabilities.prototype.propMetadata = function (typeOrFunc) {\r\n        if (!isType(typeOrFunc)) {\r\n            return {};\r\n        }\r\n        var parentCtor = getParentCtor(typeOrFunc);\r\n        var propMetadata = {};\r\n        if (parentCtor !== Object) {\r\n            var parentPropMetadata_1 = this.propMetadata(parentCtor);\r\n            Object.keys(parentPropMetadata_1).forEach(function (propName) {\r\n                propMetadata[propName] = parentPropMetadata_1[propName];\r\n            });\r\n        }\r\n        var ownPropMetadata = this._ownPropMetadata(typeOrFunc, parentCtor);\r\n        if (ownPropMetadata) {\r\n            Object.keys(ownPropMetadata).forEach(function (propName) {\r\n                var decorators = [];\r\n                if (propMetadata.hasOwnProperty(propName)) {\r\n                    decorators.push.apply(decorators, __spread(propMetadata[propName]));\r\n                }\r\n                decorators.push.apply(decorators, __spread(ownPropMetadata[propName]));\r\n                propMetadata[propName] = decorators;\r\n            });\r\n        }\r\n        return propMetadata;\r\n    };\r\n    ReflectionCapabilities.prototype.hasLifecycleHook = function (type, lcProperty) {\r\n        return type instanceof Type && lcProperty in type.prototype;\r\n    };\r\n    ReflectionCapabilities.prototype.guards = function (type) { return {}; };\r\n    ReflectionCapabilities.prototype.getter = function (name) { return new Function('o', 'return o.' + name + ';'); };\r\n    ReflectionCapabilities.prototype.setter = function (name) {\r\n        return new Function('o', 'v', 'return o.' + name + ' = v;');\r\n    };\r\n    ReflectionCapabilities.prototype.method = function (name) {\r\n        var functionBody = \"if (!o.\" + name + \") throw new Error('\\\"\" + name + \"\\\" is undefined');\\n        return o.\" + name + \".apply(o, args);\";\r\n        return new Function('o', 'args', functionBody);\r\n    };\r\n    // There is not a concept of import uri in Js, but this is useful in developing Dart applications.\r\n    // There is not a concept of import uri in Js, but this is useful in developing Dart applications.\r\n    ReflectionCapabilities.prototype.importUri = \r\n    // There is not a concept of import uri in Js, but this is useful in developing Dart applications.\r\n    function (type) {\r\n        // StaticSymbol\r\n        if (typeof type === 'object' && type['filePath']) {\r\n            return type['filePath'];\r\n        }\r\n        // Runtime type\r\n        return \"./\" + stringify(type);\r\n    };\r\n    ReflectionCapabilities.prototype.resourceUri = function (type) { return \"./\" + stringify(type); };\r\n    ReflectionCapabilities.prototype.resolveIdentifier = function (name, moduleUrl, members, runtime) {\r\n        return runtime;\r\n    };\r\n    ReflectionCapabilities.prototype.resolveEnum = function (enumIdentifier, name) { return enumIdentifier[name]; };\r\n    return ReflectionCapabilities;\r\n}());\r\nfunction convertTsickleDecoratorIntoMetadata(decoratorInvocations) {\r\n    if (!decoratorInvocations) {\r\n        return [];\r\n    }\r\n    return decoratorInvocations.map(function (decoratorInvocation) {\r\n        var decoratorType = decoratorInvocation.type;\r\n        var annotationCls = decoratorType.annotationCls;\r\n        var annotationArgs = decoratorInvocation.args ? decoratorInvocation.args : [];\r\n        return new (annotationCls.bind.apply(annotationCls, __spread([void 0], annotationArgs)))();\r\n    });\r\n}\r\nfunction getParentCtor(ctor) {\r\n    var parentProto = ctor.prototype ? Object.getPrototypeOf(ctor.prototype) : null;\r\n    var parentCtor = parentProto ? parentProto.constructor : null;\r\n    // Note: We always use `Object` as the null value\r\n    // to simplify checking later on.\r\n    return parentCtor || Object;\r\n}\r\n\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nfunction getClosureSafeProperty(objWithPropertyToExtract, target) {\r\n    for (var key in objWithPropertyToExtract) {\r\n        if (objWithPropertyToExtract[key] === target) {\r\n            return key;\r\n        }\r\n    }\r\n    throw Error('Could not find renamed property on target object.');\r\n}\r\n\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * Allows to refer to references which are not yet defined.\r\n *\r\n * For instance, `forwardRef` is used when the `token` which we need to refer to for the purposes of\r\n * DI is declared,\r\n * but not yet defined. It is also used when the `token` which we use when creating a query is not\r\n * yet defined.\r\n *\r\n * ### Example\r\n * {@example core/di/ts/forward_ref/forward_ref_spec.ts region='forward_ref'}\r\n * @experimental\r\n */\r\nfunction forwardRef(forwardRefFn) {\r\n    forwardRefFn.__forward_ref__ = forwardRef;\r\n    forwardRefFn.toString = function () { return stringify(this()); };\r\n    return forwardRefFn;\r\n}\r\n/**\r\n * Lazily retrieves the reference value from a forwardRef.\r\n *\r\n * Acts as the identity function when given a non-forward-ref value.\r\n *\r\n * ### Example ([live demo](http://plnkr.co/edit/GU72mJrk1fiodChcmiDR?p=preview))\r\n *\r\n * {@example core/di/ts/forward_ref/forward_ref_spec.ts region='resolve_forward_ref'}\r\n *\r\n * See: {@link forwardRef}\r\n * @experimental\r\n */\r\nfunction resolveForwardRef(type) {\r\n    if (typeof type === 'function' && type.hasOwnProperty('__forward_ref__') &&\r\n        type.__forward_ref__ === forwardRef) {\r\n        return type();\r\n    }\r\n    else {\r\n        return type;\r\n    }\r\n}\r\n\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * Inject decorator and metadata.\r\n *\r\n *\r\n * @Annotation\r\n */\r\nvar Inject = makeParamDecorator('Inject', function (token) { return ({ token: token }); });\r\n/**\r\n * Optional decorator and metadata.\r\n *\r\n *\r\n * @Annotation\r\n */\r\nvar Optional = makeParamDecorator('Optional');\r\n/**\r\n * Self decorator and metadata.\r\n *\r\n *\r\n * @Annotation\r\n */\r\nvar Self = makeParamDecorator('Self');\r\n/**\r\n * SkipSelf decorator and metadata.\r\n *\r\n *\r\n * @Annotation\r\n */\r\nvar SkipSelf = makeParamDecorator('SkipSelf');\r\n/**\r\n * Host decorator and metadata.\r\n *\r\n *\r\n * @Annotation\r\n */\r\nvar Host = makeParamDecorator('Host');\r\n\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nvar SOURCE = '__source';\r\nvar _THROW_IF_NOT_FOUND = new Object();\r\nvar THROW_IF_NOT_FOUND = _THROW_IF_NOT_FOUND;\r\n/**\r\n * An InjectionToken that gets the current `Injector` for `createInjector()`-style injectors.\r\n *\r\n * Requesting this token instead of `Injector` allows `StaticInjector` to be tree-shaken from a\r\n * project.\r\n *\r\n * @experimental\r\n */\r\nvar INJECTOR = new InjectionToken('INJECTOR');\r\nvar NullInjector = /** @class */ (function () {\r\n    function NullInjector() {\r\n    }\r\n    NullInjector.prototype.get = function (token, notFoundValue) {\r\n        if (notFoundValue === void 0) { notFoundValue = _THROW_IF_NOT_FOUND; }\r\n        if (notFoundValue === _THROW_IF_NOT_FOUND) {\r\n            throw new Error(\"NullInjectorError: No provider for \" + stringify(token) + \"!\");\r\n        }\r\n        return notFoundValue;\r\n    };\r\n    return NullInjector;\r\n}());\r\n/**\r\n * @usageNotes\r\n * ```\r\n * const injector: Injector = ...;\r\n * injector.get(...);\r\n * ```\r\n *\r\n * @description\r\n *\r\n * Concrete injectors implement this interface.\r\n *\r\n * For more details, see the {@linkDocs guide/dependency-injection \"Dependency Injection Guide\"}.\r\n *\r\n * ### Example\r\n *\r\n * {@example core/di/ts/injector_spec.ts region='Injector'}\r\n *\r\n * `Injector` returns itself when given `Injector` as a token:\r\n * {@example core/di/ts/injector_spec.ts region='injectInjector'}\r\n *\r\n *\r\n */\r\nvar Injector = /** @class */ (function () {\r\n    function Injector() {\r\n    }\r\n    /**\r\n     * Create a new Injector which is configure using `StaticProvider`s.\r\n     *\r\n     * ### Example\r\n     *\r\n     * {@example core/di/ts/provider_spec.ts region='ConstructorProvider'}\r\n     */\r\n    /**\r\n       * Create a new Injector which is configure using `StaticProvider`s.\r\n       *\r\n       * ### Example\r\n       *\r\n       * {@example core/di/ts/provider_spec.ts region='ConstructorProvider'}\r\n       */\r\n    Injector.create = /**\r\n       * Create a new Injector which is configure using `StaticProvider`s.\r\n       *\r\n       * ### Example\r\n       *\r\n       * {@example core/di/ts/provider_spec.ts region='ConstructorProvider'}\r\n       */\r\n    function (options, parent) {\r\n        if (Array.isArray(options)) {\r\n            return new StaticInjector(options, parent);\r\n        }\r\n        else {\r\n            return new StaticInjector(options.providers, options.parent, options.name || null);\r\n        }\r\n    };\r\n    Injector.THROW_IF_NOT_FOUND = _THROW_IF_NOT_FOUND;\r\n    Injector.NULL = new NullInjector();\r\n    Injector.ngInjectableDef = defineInjectable({\r\n        providedIn: 'any',\r\n        factory: function () { return inject(INJECTOR); },\r\n    });\r\n    return Injector;\r\n}());\r\nvar IDENT = function (value) {\r\n    return value;\r\n};\r\nvar EMPTY = [];\r\nvar CIRCULAR = IDENT;\r\nvar MULTI_PROVIDER_FN = function () {\r\n    return Array.prototype.slice.call(arguments);\r\n};\r\nvar GET_PROPERTY_NAME$1 = {};\r\nvar USE_VALUE$1 = getClosureSafeProperty$1({ provide: String, useValue: GET_PROPERTY_NAME$1 });\r\nvar NG_TOKEN_PATH = 'ngTokenPath';\r\nvar NG_TEMP_TOKEN_PATH = 'ngTempTokenPath';\r\nvar NULL_INJECTOR = Injector.NULL;\r\nvar NEW_LINE = /\\n/gm;\r\nvar NO_NEW_LINE = 'ɵ';\r\nvar StaticInjector = /** @class */ (function () {\r\n    function StaticInjector(providers, parent, source) {\r\n        if (parent === void 0) { parent = NULL_INJECTOR; }\r\n        if (source === void 0) { source = null; }\r\n        this.parent = parent;\r\n        this.source = source;\r\n        var records = this._records = new Map();\r\n        records.set(Injector, { token: Injector, fn: IDENT, deps: EMPTY, value: this, useNew: false });\r\n        records.set(INJECTOR, { token: INJECTOR, fn: IDENT, deps: EMPTY, value: this, useNew: false });\r\n        recursivelyProcessProviders(records, providers);\r\n    }\r\n    StaticInjector.prototype.get = function (token, notFoundValue, flags) {\r\n        if (flags === void 0) { flags = 0 /* Default */; }\r\n        var record = this._records.get(token);\r\n        try {\r\n            return tryResolveToken(token, record, this._records, this.parent, notFoundValue, flags);\r\n        }\r\n        catch (e) {\r\n            var tokenPath = e[NG_TEMP_TOKEN_PATH];\r\n            if (token[SOURCE]) {\r\n                tokenPath.unshift(token[SOURCE]);\r\n            }\r\n            e.message = formatError('\\n' + e.message, tokenPath, this.source);\r\n            e[NG_TOKEN_PATH] = tokenPath;\r\n            e[NG_TEMP_TOKEN_PATH] = null;\r\n            throw e;\r\n        }\r\n    };\r\n    StaticInjector.prototype.toString = function () {\r\n        var tokens = [], records = this._records;\r\n        records.forEach(function (v, token) { return tokens.push(stringify(token)); });\r\n        return \"StaticInjector[\" + tokens.join(', ') + \"]\";\r\n    };\r\n    return StaticInjector;\r\n}());\r\nfunction resolveProvider(provider) {\r\n    var deps = computeDeps(provider);\r\n    var fn = IDENT;\r\n    var value = EMPTY;\r\n    var useNew = false;\r\n    var provide = resolveForwardRef(provider.provide);\r\n    if (USE_VALUE$1 in provider) {\r\n        // We need to use USE_VALUE in provider since provider.useValue could be defined as undefined.\r\n        value = provider.useValue;\r\n    }\r\n    else if (provider.useFactory) {\r\n        fn = provider.useFactory;\r\n    }\r\n    else if (provider.useExisting) {\r\n        // Just use IDENT\r\n    }\r\n    else if (provider.useClass) {\r\n        useNew = true;\r\n        fn = resolveForwardRef(provider.useClass);\r\n    }\r\n    else if (typeof provide == 'function') {\r\n        useNew = true;\r\n        fn = provide;\r\n    }\r\n    else {\r\n        throw staticError('StaticProvider does not have [useValue|useFactory|useExisting|useClass] or [provide] is not newable', provider);\r\n    }\r\n    return { deps: deps, fn: fn, useNew: useNew, value: value };\r\n}\r\nfunction multiProviderMixError(token) {\r\n    return staticError('Cannot mix multi providers and regular providers', token);\r\n}\r\nfunction recursivelyProcessProviders(records, provider) {\r\n    if (provider) {\r\n        provider = resolveForwardRef(provider);\r\n        if (provider instanceof Array) {\r\n            // if we have an array recurse into the array\r\n            for (var i = 0; i < provider.length; i++) {\r\n                recursivelyProcessProviders(records, provider[i]);\r\n            }\r\n        }\r\n        else if (typeof provider === 'function') {\r\n            // Functions were supported in ReflectiveInjector, but are not here. For safety give useful\r\n            // error messages\r\n            throw staticError('Function/Class not supported', provider);\r\n        }\r\n        else if (provider && typeof provider === 'object' && provider.provide) {\r\n            // At this point we have what looks like a provider: {provide: ?, ....}\r\n            var token = resolveForwardRef(provider.provide);\r\n            var resolvedProvider = resolveProvider(provider);\r\n            if (provider.multi === true) {\r\n                // This is a multi provider.\r\n                var multiProvider = records.get(token);\r\n                if (multiProvider) {\r\n                    if (multiProvider.fn !== MULTI_PROVIDER_FN) {\r\n                        throw multiProviderMixError(token);\r\n                    }\r\n                }\r\n                else {\r\n                    // Create a placeholder factory which will look up the constituents of the multi provider.\r\n                    records.set(token, multiProvider = {\r\n                        token: provider.provide,\r\n                        deps: [],\r\n                        useNew: false,\r\n                        fn: MULTI_PROVIDER_FN,\r\n                        value: EMPTY\r\n                    });\r\n                }\r\n                // Treat the provider as the token.\r\n                token = provider;\r\n                multiProvider.deps.push({ token: token, options: 6 /* Default */ });\r\n            }\r\n            var record = records.get(token);\r\n            if (record && record.fn == MULTI_PROVIDER_FN) {\r\n                throw multiProviderMixError(token);\r\n            }\r\n            records.set(token, resolvedProvider);\r\n        }\r\n        else {\r\n            throw staticError('Unexpected provider', provider);\r\n        }\r\n    }\r\n}\r\nfunction tryResolveToken(token, record, records, parent, notFoundValue, flags) {\r\n    try {\r\n        return resolveToken(token, record, records, parent, notFoundValue, flags);\r\n    }\r\n    catch (e) {\r\n        // ensure that 'e' is of type Error.\r\n        if (!(e instanceof Error)) {\r\n            e = new Error(e);\r\n        }\r\n        var path = e[NG_TEMP_TOKEN_PATH] = e[NG_TEMP_TOKEN_PATH] || [];\r\n        path.unshift(token);\r\n        if (record && record.value == CIRCULAR) {\r\n            // Reset the Circular flag.\r\n            record.value = EMPTY;\r\n        }\r\n        throw e;\r\n    }\r\n}\r\nfunction resolveToken(token, record, records, parent, notFoundValue, flags) {\r\n    var value;\r\n    if (record && !(flags & 4 /* SkipSelf */)) {\r\n        // If we don't have a record, this implies that we don't own the provider hence don't know how\r\n        // to resolve it.\r\n        value = record.value;\r\n        if (value == CIRCULAR) {\r\n            throw Error(NO_NEW_LINE + 'Circular dependency');\r\n        }\r\n        else if (value === EMPTY) {\r\n            record.value = CIRCULAR;\r\n            var obj = undefined;\r\n            var useNew = record.useNew;\r\n            var fn = record.fn;\r\n            var depRecords = record.deps;\r\n            var deps = EMPTY;\r\n            if (depRecords.length) {\r\n                deps = [];\r\n                for (var i = 0; i < depRecords.length; i++) {\r\n                    var depRecord = depRecords[i];\r\n                    var options = depRecord.options;\r\n                    var childRecord = options & 2 /* CheckSelf */ ? records.get(depRecord.token) : undefined;\r\n                    deps.push(tryResolveToken(\r\n                    // Current Token to resolve\r\n                    depRecord.token, childRecord, records, \r\n                    // If we don't know how to resolve dependency and we should not check parent for it,\r\n                    // than pass in Null injector.\r\n                    !childRecord && !(options & 4 /* CheckParent */) ? NULL_INJECTOR : parent, options & 1 /* Optional */ ? null : Injector.THROW_IF_NOT_FOUND, 0 /* Default */));\r\n                }\r\n            }\r\n            record.value = value = useNew ? new ((_a = fn).bind.apply(_a, __spread([void 0], deps)))() : fn.apply(obj, deps);\r\n        }\r\n    }\r\n    else if (!(flags & 2 /* Self */)) {\r\n        value = parent.get(token, notFoundValue, 0 /* Default */);\r\n    }\r\n    return value;\r\n    var _a;\r\n}\r\nfunction computeDeps(provider) {\r\n    var deps = EMPTY;\r\n    var providerDeps = provider.deps;\r\n    if (providerDeps && providerDeps.length) {\r\n        deps = [];\r\n        for (var i = 0; i < providerDeps.length; i++) {\r\n            var options = 6;\r\n            var token = resolveForwardRef(providerDeps[i]);\r\n            if (token instanceof Array) {\r\n                for (var j = 0, annotations = token; j < annotations.length; j++) {\r\n                    var annotation = annotations[j];\r\n                    if (annotation instanceof Optional || annotation == Optional) {\r\n                        options = options | 1 /* Optional */;\r\n                    }\r\n                    else if (annotation instanceof SkipSelf || annotation == SkipSelf) {\r\n                        options = options & ~2 /* CheckSelf */;\r\n                    }\r\n                    else if (annotation instanceof Self || annotation == Self) {\r\n                        options = options & ~4 /* CheckParent */;\r\n                    }\r\n                    else if (annotation instanceof Inject) {\r\n                        token = annotation.token;\r\n                    }\r\n                    else {\r\n                        token = resolveForwardRef(annotation);\r\n                    }\r\n                }\r\n            }\r\n            deps.push({ token: token, options: options });\r\n        }\r\n    }\r\n    else if (provider.useExisting) {\r\n        var token = resolveForwardRef(provider.useExisting);\r\n        deps = [{ token: token, options: 6 /* Default */ }];\r\n    }\r\n    else if (!providerDeps && !(USE_VALUE$1 in provider)) {\r\n        // useValue & useExisting are the only ones which are exempt from deps all others need it.\r\n        throw staticError('\\'deps\\' required', provider);\r\n    }\r\n    return deps;\r\n}\r\nfunction formatError(text, obj, source) {\r\n    if (source === void 0) { source = null; }\r\n    text = text && text.charAt(0) === '\\n' && text.charAt(1) == NO_NEW_LINE ? text.substr(2) : text;\r\n    var context = stringify(obj);\r\n    if (obj instanceof Array) {\r\n        context = obj.map(stringify).join(' -> ');\r\n    }\r\n    else if (typeof obj === 'object') {\r\n        var parts = [];\r\n        for (var key in obj) {\r\n            if (obj.hasOwnProperty(key)) {\r\n                var value = obj[key];\r\n                parts.push(key + ':' + (typeof value === 'string' ? JSON.stringify(value) : stringify(value)));\r\n            }\r\n        }\r\n        context = \"{\" + parts.join(', ') + \"}\";\r\n    }\r\n    return \"StaticInjectorError\" + (source ? '(' + source + ')' : '') + \"[\" + context + \"]: \" + text.replace(NEW_LINE, '\\n  ');\r\n}\r\nfunction staticError(text, obj) {\r\n    return new Error(formatError(text, obj));\r\n}\r\nfunction getClosureSafeProperty$1(objWithPropertyToExtract) {\r\n    for (var key in objWithPropertyToExtract) {\r\n        if (objWithPropertyToExtract[key] === GET_PROPERTY_NAME$1) {\r\n            return key;\r\n        }\r\n    }\r\n    throw Error('!prop');\r\n}\r\n/**\r\n * Current injector value used by `inject`.\r\n * - `undefined`: it is an error to call `inject`\r\n * - `null`: `inject` can be called but there is no injector (limp-mode).\r\n * - Injector instance: Use the injector for resolution.\r\n */\r\nvar _currentInjector = undefined;\r\nfunction setCurrentInjector(injector) {\r\n    var former = _currentInjector;\r\n    _currentInjector = injector;\r\n    return former;\r\n}\r\nfunction inject(token, flags) {\r\n    if (flags === void 0) { flags = 0 /* Default */; }\r\n    if (_currentInjector === undefined) {\r\n        throw new Error(\"inject() must be called from an injection context\");\r\n    }\r\n    else if (_currentInjector === null) {\r\n        var injectableDef = token.ngInjectableDef;\r\n        if (injectableDef && injectableDef.providedIn == 'root') {\r\n            return injectableDef.value === undefined ? injectableDef.value = injectableDef.factory() :\r\n                injectableDef.value;\r\n        }\r\n        if (flags & 8 /* Optional */)\r\n            return null;\r\n        throw new Error(\"Injector: NOT_FOUND [\" + stringify(token) + \"]\");\r\n    }\r\n    else {\r\n        return _currentInjector.get(token, flags & 8 /* Optional */ ? null : undefined, flags);\r\n    }\r\n}\r\nfunction injectArgs(types) {\r\n    var args = [];\r\n    for (var i = 0; i < types.length; i++) {\r\n        var arg = types[i];\r\n        if (Array.isArray(arg)) {\r\n            if (arg.length === 0) {\r\n                throw new Error('Arguments array must have arguments.');\r\n            }\r\n            var type = undefined;\r\n            var flags = 0;\r\n            for (var j = 0; j < arg.length; j++) {\r\n                var meta = arg[j];\r\n                if (meta instanceof Optional || meta.__proto__.ngMetadataName === 'Optional') {\r\n                    flags |= 8 /* Optional */;\r\n                }\r\n                else if (meta instanceof SkipSelf || meta.__proto__.ngMetadataName === 'SkipSelf') {\r\n                    flags |= 4 /* SkipSelf */;\r\n                }\r\n                else if (meta instanceof Self || meta.__proto__.ngMetadataName === 'Self') {\r\n                    flags |= 2 /* Self */;\r\n                }\r\n                else if (meta instanceof Inject) {\r\n                    type = meta.token;\r\n                }\r\n                else {\r\n                    type = meta;\r\n                }\r\n            }\r\n            args.push(inject((type), flags));\r\n        }\r\n        else {\r\n            args.push(inject(arg));\r\n        }\r\n    }\r\n    return args;\r\n}\r\n\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nvar GET_PROPERTY_NAME = {};\r\nvar ɵ0 = GET_PROPERTY_NAME;\r\nvar USE_VALUE = getClosureSafeProperty({ provide: String, useValue: ɵ0 }, GET_PROPERTY_NAME);\r\nvar EMPTY_ARRAY = [];\r\nfunction convertInjectableProviderToFactory(type, provider) {\r\n    if (!provider) {\r\n        var reflectionCapabilities = new ReflectionCapabilities();\r\n        var deps_1 = reflectionCapabilities.parameters(type);\r\n        // TODO - convert to flags.\r\n        return function () { return new (type.bind.apply(type, __spread([void 0], injectArgs(deps_1))))(); };\r\n    }\r\n    if (USE_VALUE in provider) {\r\n        var valueProvider_1 = provider;\r\n        return function () { return valueProvider_1.useValue; };\r\n    }\r\n    else if (provider.useExisting) {\r\n        var existingProvider_1 = provider;\r\n        return function () { return inject(existingProvider_1.useExisting); };\r\n    }\r\n    else if (provider.useFactory) {\r\n        var factoryProvider_1 = provider;\r\n        return function () { return factoryProvider_1.useFactory.apply(factoryProvider_1, __spread(injectArgs(factoryProvider_1.deps || EMPTY_ARRAY))); };\r\n    }\r\n    else if (provider.useClass) {\r\n        var classProvider_1 = provider;\r\n        var deps_2 = provider.deps;\r\n        if (!deps_2) {\r\n            var reflectionCapabilities = new ReflectionCapabilities();\r\n            deps_2 = reflectionCapabilities.parameters(type);\r\n        }\r\n        return function () {\r\n            return new ((_a = classProvider_1.useClass).bind.apply(_a, __spread([void 0], injectArgs(deps_2))))();\r\n            var _a;\r\n        };\r\n    }\r\n    else {\r\n        var deps_3 = provider.deps;\r\n        if (!deps_3) {\r\n            var reflectionCapabilities = new ReflectionCapabilities();\r\n            deps_3 = reflectionCapabilities.parameters(type);\r\n        }\r\n        return function () { return new (type.bind.apply(type, __spread([void 0], injectArgs((deps_3)))))(); };\r\n    }\r\n}\r\n/**\r\n* Injectable decorator and metadata.\r\n*\r\n*\r\n* @Annotation\r\n*/\r\nvar Injectable = makeDecorator('Injectable', undefined, undefined, undefined, function (injectableType, options) {\r\n    if (options && options.providedIn !== undefined &&\r\n        injectableType.ngInjectableDef === undefined) {\r\n        injectableType.ngInjectableDef = defineInjectable({\r\n            providedIn: options.providedIn,\r\n            factory: convertInjectableProviderToFactory(injectableType, options)\r\n        });\r\n    }\r\n});\r\n\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * Defines a schema that will allow:\r\n * - any non-Angular elements with a `-` in their name,\r\n * - any properties on elements with a `-` in their name which is the common rule for custom\r\n * elements.\r\n *\r\n *\r\n */\r\nvar CUSTOM_ELEMENTS_SCHEMA = {\r\n    name: 'custom-elements'\r\n};\r\n/**\r\n * Defines a schema that will allow any property on any element.\r\n *\r\n * @experimental\r\n */\r\nvar NO_ERRORS_SCHEMA = {\r\n    name: 'no-errors-schema'\r\n};\r\n/**\r\n * NgModule decorator and metadata.\r\n *\r\n *\r\n * @Annotation\r\n */\r\nvar NgModule = makeDecorator('NgModule', function (ngModule) { return ngModule; }, undefined, undefined, function (moduleType, metadata) {\r\n    var imports = (metadata && metadata.imports) || [];\r\n    if (metadata && metadata.exports) {\r\n        imports = __spread(imports, [metadata.exports]);\r\n    }\r\n    moduleType.ngInjectorDef = defineInjector({\r\n        factory: convertInjectableProviderToFactory(moduleType, { useClass: moduleType }),\r\n        providers: metadata && metadata.providers,\r\n        imports: imports,\r\n    });\r\n});\r\n\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * Defines template and style encapsulation options available for Component's {@link Component}.\r\n *\r\n * See {@link Component#encapsulation encapsulation}.\r\n *\r\n */\r\n/**\r\n * Defines template and style encapsulation options available for Component's {@link Component}.\r\n *\r\n * See {@link Component#encapsulation encapsulation}.\r\n *\r\n */\r\nvar ViewEncapsulation;\r\n/**\r\n * Defines template and style encapsulation options available for Component's {@link Component}.\r\n *\r\n * See {@link Component#encapsulation encapsulation}.\r\n *\r\n */\r\n(function (ViewEncapsulation) {\r\n    /**\r\n     * Emulate `Native` scoping of styles by adding an attribute containing surrogate id to the Host\r\n     * Element and pre-processing the style rules provided via {@link Component#styles styles} or\r\n     * {@link Component#styleUrls styleUrls}, and adding the new Host Element attribute to all\r\n     * selectors.\r\n     *\r\n     * This is the default option.\r\n     */\r\n    ViewEncapsulation[ViewEncapsulation[\"Emulated\"] = 0] = \"Emulated\";\r\n    /**\r\n     * Use the native encapsulation mechanism of the renderer.\r\n     *\r\n     * For the DOM this means using [Shadow DOM](https://w3c.github.io/webcomponents/spec/shadow/) and\r\n     * creating a ShadowRoot for Component's Host Element.\r\n     */\r\n    ViewEncapsulation[ViewEncapsulation[\"Native\"] = 1] = \"Native\";\r\n    /**\r\n     * Don't provide any template or style encapsulation.\r\n     */\r\n    ViewEncapsulation[ViewEncapsulation[\"None\"] = 2] = \"None\";\r\n})(ViewEncapsulation || (ViewEncapsulation = {}));\r\n\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * @description Represents the version of Angular\r\n *\r\n *\r\n */\r\nvar Version = /** @class */ (function () {\r\n    function Version(full) {\r\n        this.full = full;\r\n        this.major = full.split('.')[0];\r\n        this.minor = full.split('.')[1];\r\n        this.patch = full.split('.').slice(2).join('.');\r\n    }\r\n    return Version;\r\n}());\r\nvar VERSION = new Version('6.0.0-rc.5+167.sha-4ecae64');\r\n\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nvar ERROR_DEBUG_CONTEXT = 'ngDebugContext';\r\nvar ERROR_ORIGINAL_ERROR = 'ngOriginalError';\r\nvar ERROR_LOGGER = 'ngErrorLogger';\r\n\r\nfunction getDebugContext(error) {\r\n    return error[ERROR_DEBUG_CONTEXT];\r\n}\r\nfunction getOriginalError(error) {\r\n    return error[ERROR_ORIGINAL_ERROR];\r\n}\r\nfunction getErrorLogger(error) {\r\n    return error[ERROR_LOGGER] || defaultErrorLogger;\r\n}\r\nfunction defaultErrorLogger(console) {\r\n    var values = [];\r\n    for (var _i = 1; _i < arguments.length; _i++) {\r\n        values[_i - 1] = arguments[_i];\r\n    }\r\n    console.error.apply(console, __spread(values));\r\n}\r\n\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n *\r\n * @description\r\n * Provides a hook for centralized exception handling.\r\n *\r\n * The default implementation of `ErrorHandler` prints error messages to the `console`. To\r\n * intercept error handling, write a custom exception handler that replaces this default as\r\n * appropriate for your app.\r\n *\r\n * ### Example\r\n *\r\n * ```\r\n * class MyErrorHandler implements ErrorHandler {\r\n *   handleError(error) {\r\n *     // do something with the exception\r\n *   }\r\n * }\r\n *\r\n * @NgModule({\r\n *   providers: [{provide: ErrorHandler, useClass: MyErrorHandler}]\r\n * })\r\n * class MyModule {}\r\n * ```\r\n *\r\n *\r\n */\r\nvar ErrorHandler = /** @class */ (function () {\r\n    function ErrorHandler() {\r\n        /**\r\n           * @internal\r\n           */\r\n        this._console = console;\r\n    }\r\n    ErrorHandler.prototype.handleError = function (error) {\r\n        var originalError = this._findOriginalError(error);\r\n        var context = this._findContext(error);\r\n        // Note: Browser consoles show the place from where console.error was called.\r\n        // We can use this to give users additional information about the error.\r\n        var errorLogger = getErrorLogger(error);\r\n        errorLogger(this._console, \"ERROR\", error);\r\n        if (originalError) {\r\n            errorLogger(this._console, \"ORIGINAL ERROR\", originalError);\r\n        }\r\n        if (context) {\r\n            errorLogger(this._console, 'ERROR CONTEXT', context);\r\n        }\r\n    };\r\n    /** @internal */\r\n    /** @internal */\r\n    ErrorHandler.prototype._findContext = /** @internal */\r\n    function (error) {\r\n        if (error) {\r\n            return getDebugContext(error) ? getDebugContext(error) :\r\n                this._findContext(getOriginalError(error));\r\n        }\r\n        return null;\r\n    };\r\n    /** @internal */\r\n    /** @internal */\r\n    ErrorHandler.prototype._findOriginalError = /** @internal */\r\n    function (error) {\r\n        var e = getOriginalError(error);\r\n        while (e && getOriginalError(e)) {\r\n            e = getOriginalError(e);\r\n        }\r\n        return e;\r\n    };\r\n    return ErrorHandler;\r\n}());\r\nfunction wrappedError(message, originalError) {\r\n    var msg = message + \" caused by: \" + (originalError instanceof Error ? originalError.message : originalError);\r\n    var error = Error(msg);\r\n    error[ERROR_ORIGINAL_ERROR] = originalError;\r\n    return error;\r\n}\r\n\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nfunction findFirstClosedCycle(keys) {\r\n    var res = [];\r\n    for (var i = 0; i < keys.length; ++i) {\r\n        if (res.indexOf(keys[i]) > -1) {\r\n            res.push(keys[i]);\r\n            return res;\r\n        }\r\n        res.push(keys[i]);\r\n    }\r\n    return res;\r\n}\r\nfunction constructResolvingPath(keys) {\r\n    if (keys.length > 1) {\r\n        var reversed = findFirstClosedCycle(keys.slice().reverse());\r\n        var tokenStrs = reversed.map(function (k) { return stringify(k.token); });\r\n        return ' (' + tokenStrs.join(' -> ') + ')';\r\n    }\r\n    return '';\r\n}\r\nfunction injectionError(injector, key, constructResolvingMessage, originalError) {\r\n    var keys = [key];\r\n    var errMsg = constructResolvingMessage(keys);\r\n    var error = (originalError ? wrappedError(errMsg, originalError) : Error(errMsg));\r\n    error.addKey = addKey;\r\n    error.keys = keys;\r\n    error.injectors = [injector];\r\n    error.constructResolvingMessage = constructResolvingMessage;\r\n    error[ERROR_ORIGINAL_ERROR] = originalError;\r\n    return error;\r\n}\r\nfunction addKey(injector, key) {\r\n    this.injectors.push(injector);\r\n    this.keys.push(key);\r\n    // Note: This updated message won't be reflected in the `.stack` property\r\n    this.message = this.constructResolvingMessage(this.keys);\r\n}\r\n/**\r\n * Thrown when trying to retrieve a dependency by key from {@link Injector}, but the\r\n * {@link Injector} does not have a {@link Provider} for the given key.\r\n *\r\n * ### Example ([live demo](http://plnkr.co/edit/vq8D3FRB9aGbnWJqtEPE?p=preview))\r\n *\r\n * ```typescript\r\n * class A {\r\n *   constructor(b:B) {}\r\n * }\r\n *\r\n * expect(() => Injector.resolveAndCreate([A])).toThrowError();\r\n * ```\r\n */\r\nfunction noProviderError(injector, key) {\r\n    return injectionError(injector, key, function (keys) {\r\n        var first = stringify(keys[0].token);\r\n        return \"No provider for \" + first + \"!\" + constructResolvingPath(keys);\r\n    });\r\n}\r\n/**\r\n * Thrown when dependencies form a cycle.\r\n *\r\n * ### Example ([live demo](http://plnkr.co/edit/wYQdNos0Tzql3ei1EV9j?p=info))\r\n *\r\n * ```typescript\r\n * var injector = Injector.resolveAndCreate([\r\n *   {provide: \"one\", useFactory: (two) => \"two\", deps: [[new Inject(\"two\")]]},\r\n *   {provide: \"two\", useFactory: (one) => \"one\", deps: [[new Inject(\"one\")]]}\r\n * ]);\r\n *\r\n * expect(() => injector.get(\"one\")).toThrowError();\r\n * ```\r\n *\r\n * Retrieving `A` or `B` throws a `CyclicDependencyError` as the graph above cannot be constructed.\r\n */\r\nfunction cyclicDependencyError(injector, key) {\r\n    return injectionError(injector, key, function (keys) {\r\n        return \"Cannot instantiate cyclic dependency!\" + constructResolvingPath(keys);\r\n    });\r\n}\r\n/**\r\n * Thrown when a constructing type returns with an Error.\r\n *\r\n * The `InstantiationError` class contains the original error plus the dependency graph which caused\r\n * this object to be instantiated.\r\n *\r\n * ### Example ([live demo](http://plnkr.co/edit/7aWYdcqTQsP0eNqEdUAf?p=preview))\r\n *\r\n * ```typescript\r\n * class A {\r\n *   constructor() {\r\n *     throw new Error('message');\r\n *   }\r\n * }\r\n *\r\n * var injector = Injector.resolveAndCreate([A]);\r\n\r\n * try {\r\n *   injector.get(A);\r\n * } catch (e) {\r\n *   expect(e instanceof InstantiationError).toBe(true);\r\n *   expect(e.originalException.message).toEqual(\"message\");\r\n *   expect(e.originalStack).toBeDefined();\r\n * }\r\n * ```\r\n */\r\nfunction instantiationError(injector, originalException, originalStack, key) {\r\n    return injectionError(injector, key, function (keys) {\r\n        var first = stringify(keys[0].token);\r\n        return originalException.message + \": Error during instantiation of \" + first + \"!\" + constructResolvingPath(keys) + \".\";\r\n    }, originalException);\r\n}\r\n/**\r\n * Thrown when an object other then {@link Provider} (or `Type`) is passed to {@link Injector}\r\n * creation.\r\n *\r\n * ### Example ([live demo](http://plnkr.co/edit/YatCFbPAMCL0JSSQ4mvH?p=preview))\r\n *\r\n * ```typescript\r\n * expect(() => Injector.resolveAndCreate([\"not a type\"])).toThrowError();\r\n * ```\r\n */\r\nfunction invalidProviderError(provider) {\r\n    return Error(\"Invalid provider - only instances of Provider and Type are allowed, got: \" + provider);\r\n}\r\n/**\r\n * Thrown when the class has no annotation information.\r\n *\r\n * Lack of annotation information prevents the {@link Injector} from determining which dependencies\r\n * need to be injected into the constructor.\r\n *\r\n * ### Example ([live demo](http://plnkr.co/edit/rHnZtlNS7vJOPQ6pcVkm?p=preview))\r\n *\r\n * ```typescript\r\n * class A {\r\n *   constructor(b) {}\r\n * }\r\n *\r\n * expect(() => Injector.resolveAndCreate([A])).toThrowError();\r\n * ```\r\n *\r\n * This error is also thrown when the class not marked with {@link Injectable} has parameter types.\r\n *\r\n * ```typescript\r\n * class B {}\r\n *\r\n * class A {\r\n *   constructor(b:B) {} // no information about the parameter types of A is available at runtime.\r\n * }\r\n *\r\n * expect(() => Injector.resolveAndCreate([A,B])).toThrowError();\r\n * ```\r\n *\r\n */\r\nfunction noAnnotationError(typeOrFunc, params) {\r\n    var signature = [];\r\n    for (var i = 0, ii = params.length; i < ii; i++) {\r\n        var parameter = params[i];\r\n        if (!parameter || parameter.length == 0) {\r\n            signature.push('?');\r\n        }\r\n        else {\r\n            signature.push(parameter.map(stringify).join(' '));\r\n        }\r\n    }\r\n    return Error('Cannot resolve all parameters for \\'' + stringify(typeOrFunc) + '\\'(' +\r\n        signature.join(', ') + '). ' +\r\n        'Make sure that all the parameters are decorated with Inject or have valid type annotations and that \\'' +\r\n        stringify(typeOrFunc) + '\\' is decorated with Injectable.');\r\n}\r\n/**\r\n * Thrown when getting an object by index.\r\n *\r\n * ### Example ([live demo](http://plnkr.co/edit/bRs0SX2OTQiJzqvjgl8P?p=preview))\r\n *\r\n * ```typescript\r\n * class A {}\r\n *\r\n * var injector = Injector.resolveAndCreate([A]);\r\n *\r\n * expect(() => injector.getAt(100)).toThrowError();\r\n * ```\r\n *\r\n */\r\nfunction outOfBoundsError(index) {\r\n    return Error(\"Index \" + index + \" is out-of-bounds.\");\r\n}\r\n// TODO: add a working example after alpha38 is released\r\n/**\r\n * Thrown when a multi provider and a regular provider are bound to the same token.\r\n *\r\n * ### Example\r\n *\r\n * ```typescript\r\n * expect(() => Injector.resolveAndCreate([\r\n *   { provide: \"Strings\", useValue: \"string1\", multi: true},\r\n *   { provide: \"Strings\", useValue: \"string2\", multi: false}\r\n * ])).toThrowError();\r\n * ```\r\n */\r\nfunction mixingMultiProvidersWithRegularProvidersError(provider1, provider2) {\r\n    return Error(\"Cannot mix multi providers and regular providers, got: \" + provider1 + \" \" + provider2);\r\n}\r\n\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * A unique object used for retrieving items from the {@link ReflectiveInjector}.\r\n *\r\n * Keys have:\r\n * - a system-wide unique `id`.\r\n * - a `token`.\r\n *\r\n * `Key` is used internally by {@link ReflectiveInjector} because its system-wide unique `id` allows\r\n * the\r\n * injector to store created objects in a more efficient way.\r\n *\r\n * `Key` should not be created directly. {@link ReflectiveInjector} creates keys automatically when\r\n * resolving\r\n * providers.\r\n * @deprecated No replacement\r\n */\r\nvar ReflectiveKey = /** @class */ (function () {\r\n    /**\r\n     * Private\r\n     */\r\n    function ReflectiveKey(token, id) {\r\n        this.token = token;\r\n        this.id = id;\r\n        if (!token) {\r\n            throw new Error('Token must be defined!');\r\n        }\r\n        this.displayName = stringify(this.token);\r\n    }\r\n    /**\r\n     * Retrieves a `Key` for a token.\r\n     */\r\n    /**\r\n       * Retrieves a `Key` for a token.\r\n       */\r\n    ReflectiveKey.get = /**\r\n       * Retrieves a `Key` for a token.\r\n       */\r\n    function (token) {\r\n        return _globalKeyRegistry.get(resolveForwardRef(token));\r\n    };\r\n    Object.defineProperty(ReflectiveKey, \"numberOfKeys\", {\r\n        /**\r\n         * @returns the number of keys registered in the system.\r\n         */\r\n        get: /**\r\n           * @returns the number of keys registered in the system.\r\n           */\r\n        function () { return _globalKeyRegistry.numberOfKeys; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return ReflectiveKey;\r\n}());\r\nvar KeyRegistry = /** @class */ (function () {\r\n    function KeyRegistry() {\r\n        this._allKeys = new Map();\r\n    }\r\n    KeyRegistry.prototype.get = function (token) {\r\n        if (token instanceof ReflectiveKey)\r\n            return token;\r\n        if (this._allKeys.has(token)) {\r\n            return this._allKeys.get(token);\r\n        }\r\n        var newKey = new ReflectiveKey(token, ReflectiveKey.numberOfKeys);\r\n        this._allKeys.set(token, newKey);\r\n        return newKey;\r\n    };\r\n    Object.defineProperty(KeyRegistry.prototype, \"numberOfKeys\", {\r\n        get: function () { return this._allKeys.size; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return KeyRegistry;\r\n}());\r\nvar _globalKeyRegistry = new KeyRegistry();\r\n\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * Provides access to reflection data about symbols. Used internally by Angular\r\n * to power dependency injection and compilation.\r\n */\r\nvar Reflector = /** @class */ (function () {\r\n    function Reflector(reflectionCapabilities) {\r\n        this.reflectionCapabilities = reflectionCapabilities;\r\n    }\r\n    Reflector.prototype.updateCapabilities = function (caps) { this.reflectionCapabilities = caps; };\r\n    Reflector.prototype.factory = function (type) { return this.reflectionCapabilities.factory(type); };\r\n    Reflector.prototype.parameters = function (typeOrFunc) {\r\n        return this.reflectionCapabilities.parameters(typeOrFunc);\r\n    };\r\n    Reflector.prototype.annotations = function (typeOrFunc) {\r\n        return this.reflectionCapabilities.annotations(typeOrFunc);\r\n    };\r\n    Reflector.prototype.propMetadata = function (typeOrFunc) {\r\n        return this.reflectionCapabilities.propMetadata(typeOrFunc);\r\n    };\r\n    Reflector.prototype.hasLifecycleHook = function (type, lcProperty) {\r\n        return this.reflectionCapabilities.hasLifecycleHook(type, lcProperty);\r\n    };\r\n    Reflector.prototype.getter = function (name) { return this.reflectionCapabilities.getter(name); };\r\n    Reflector.prototype.setter = function (name) { return this.reflectionCapabilities.setter(name); };\r\n    Reflector.prototype.method = function (name) { return this.reflectionCapabilities.method(name); };\r\n    Reflector.prototype.importUri = function (type) { return this.reflectionCapabilities.importUri(type); };\r\n    Reflector.prototype.resourceUri = function (type) { return this.reflectionCapabilities.resourceUri(type); };\r\n    Reflector.prototype.resolveIdentifier = function (name, moduleUrl, members, runtime) {\r\n        return this.reflectionCapabilities.resolveIdentifier(name, moduleUrl, members, runtime);\r\n    };\r\n    Reflector.prototype.resolveEnum = function (identifier, name) {\r\n        return this.reflectionCapabilities.resolveEnum(identifier, name);\r\n    };\r\n    return Reflector;\r\n}());\r\n\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * The {@link Reflector} used internally in Angular to access metadata\r\n * about symbols.\r\n */\r\nvar reflector = new Reflector(new ReflectionCapabilities());\r\n\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * `Dependency` is used by the framework to extend DI.\r\n * This is internal to Angular and should not be used directly.\r\n */\r\nvar ReflectiveDependency = /** @class */ (function () {\r\n    function ReflectiveDependency(key, optional, visibility) {\r\n        this.key = key;\r\n        this.optional = optional;\r\n        this.visibility = visibility;\r\n    }\r\n    ReflectiveDependency.fromKey = function (key) {\r\n        return new ReflectiveDependency(key, false, null);\r\n    };\r\n    return ReflectiveDependency;\r\n}());\r\nvar _EMPTY_LIST = [];\r\nvar ResolvedReflectiveProvider_ = /** @class */ (function () {\r\n    function ResolvedReflectiveProvider_(key, resolvedFactories, multiProvider) {\r\n        this.key = key;\r\n        this.resolvedFactories = resolvedFactories;\r\n        this.multiProvider = multiProvider;\r\n        this.resolvedFactory = this.resolvedFactories[0];\r\n    }\r\n    return ResolvedReflectiveProvider_;\r\n}());\r\n/**\r\n * An internal resolved representation of a factory function created by resolving {@link\r\n * Provider}.\r\n * @experimental\r\n */\r\nvar ResolvedReflectiveFactory = /** @class */ (function () {\r\n    function ResolvedReflectiveFactory(/**\r\n           * Factory function which can return an instance of an object represented by a key.\r\n           */\r\n    factory, /**\r\n           * Arguments (dependencies) to the `factory` function.\r\n           */\r\n    dependencies) {\r\n        this.factory = factory;\r\n        this.dependencies = dependencies;\r\n    }\r\n    return ResolvedReflectiveFactory;\r\n}());\r\n/**\r\n * Resolve a single provider.\r\n */\r\nfunction resolveReflectiveFactory(provider) {\r\n    var factoryFn;\r\n    var resolvedDeps;\r\n    if (provider.useClass) {\r\n        var useClass = resolveForwardRef(provider.useClass);\r\n        factoryFn = reflector.factory(useClass);\r\n        resolvedDeps = _dependenciesFor(useClass);\r\n    }\r\n    else if (provider.useExisting) {\r\n        factoryFn = function (aliasInstance) { return aliasInstance; };\r\n        resolvedDeps = [ReflectiveDependency.fromKey(ReflectiveKey.get(provider.useExisting))];\r\n    }\r\n    else if (provider.useFactory) {\r\n        factoryFn = provider.useFactory;\r\n        resolvedDeps = constructDependencies(provider.useFactory, provider.deps);\r\n    }\r\n    else {\r\n        factoryFn = function () { return provider.useValue; };\r\n        resolvedDeps = _EMPTY_LIST;\r\n    }\r\n    return new ResolvedReflectiveFactory(factoryFn, resolvedDeps);\r\n}\r\n/**\r\n * Converts the {@link Provider} into {@link ResolvedProvider}.\r\n *\r\n * {@link Injector} internally only uses {@link ResolvedProvider}, {@link Provider} contains\r\n * convenience provider syntax.\r\n */\r\nfunction resolveReflectiveProvider(provider) {\r\n    return new ResolvedReflectiveProvider_(ReflectiveKey.get(provider.provide), [resolveReflectiveFactory(provider)], provider.multi || false);\r\n}\r\n/**\r\n * Resolve a list of Providers.\r\n */\r\nfunction resolveReflectiveProviders(providers) {\r\n    var normalized = _normalizeProviders(providers, []);\r\n    var resolved = normalized.map(resolveReflectiveProvider);\r\n    var resolvedProviderMap = mergeResolvedReflectiveProviders(resolved, new Map());\r\n    return Array.from(resolvedProviderMap.values());\r\n}\r\n/**\r\n * Merges a list of ResolvedProviders into a list where\r\n * each key is contained exactly once and multi providers\r\n * have been merged.\r\n */\r\nfunction mergeResolvedReflectiveProviders(providers, normalizedProvidersMap) {\r\n    for (var i = 0; i < providers.length; i++) {\r\n        var provider = providers[i];\r\n        var existing = normalizedProvidersMap.get(provider.key.id);\r\n        if (existing) {\r\n            if (provider.multiProvider !== existing.multiProvider) {\r\n                throw mixingMultiProvidersWithRegularProvidersError(existing, provider);\r\n            }\r\n            if (provider.multiProvider) {\r\n                for (var j = 0; j < provider.resolvedFactories.length; j++) {\r\n                    existing.resolvedFactories.push(provider.resolvedFactories[j]);\r\n                }\r\n            }\r\n            else {\r\n                normalizedProvidersMap.set(provider.key.id, provider);\r\n            }\r\n        }\r\n        else {\r\n            var resolvedProvider = void 0;\r\n            if (provider.multiProvider) {\r\n                resolvedProvider = new ResolvedReflectiveProvider_(provider.key, provider.resolvedFactories.slice(), provider.multiProvider);\r\n            }\r\n            else {\r\n                resolvedProvider = provider;\r\n            }\r\n            normalizedProvidersMap.set(provider.key.id, resolvedProvider);\r\n        }\r\n    }\r\n    return normalizedProvidersMap;\r\n}\r\nfunction _normalizeProviders(providers, res) {\r\n    providers.forEach(function (b) {\r\n        if (b instanceof Type) {\r\n            res.push({ provide: b, useClass: b });\r\n        }\r\n        else if (b && typeof b == 'object' && b.provide !== undefined) {\r\n            res.push(b);\r\n        }\r\n        else if (b instanceof Array) {\r\n            _normalizeProviders(b, res);\r\n        }\r\n        else {\r\n            throw invalidProviderError(b);\r\n        }\r\n    });\r\n    return res;\r\n}\r\nfunction constructDependencies(typeOrFunc, dependencies) {\r\n    if (!dependencies) {\r\n        return _dependenciesFor(typeOrFunc);\r\n    }\r\n    else {\r\n        var params_1 = dependencies.map(function (t) { return [t]; });\r\n        return dependencies.map(function (t) { return _extractToken(typeOrFunc, t, params_1); });\r\n    }\r\n}\r\nfunction _dependenciesFor(typeOrFunc) {\r\n    var params = reflector.parameters(typeOrFunc);\r\n    if (!params)\r\n        return [];\r\n    if (params.some(function (p) { return p == null; })) {\r\n        throw noAnnotationError(typeOrFunc, params);\r\n    }\r\n    return params.map(function (p) { return _extractToken(typeOrFunc, p, params); });\r\n}\r\nfunction _extractToken(typeOrFunc, metadata, params) {\r\n    var token = null;\r\n    var optional = false;\r\n    if (!Array.isArray(metadata)) {\r\n        if (metadata instanceof Inject) {\r\n            return _createDependency(metadata.token, optional, null);\r\n        }\r\n        else {\r\n            return _createDependency(metadata, optional, null);\r\n        }\r\n    }\r\n    var visibility = null;\r\n    for (var i = 0; i < metadata.length; ++i) {\r\n        var paramMetadata = metadata[i];\r\n        if (paramMetadata instanceof Type) {\r\n            token = paramMetadata;\r\n        }\r\n        else if (paramMetadata instanceof Inject) {\r\n            token = paramMetadata.token;\r\n        }\r\n        else if (paramMetadata instanceof Optional) {\r\n            optional = true;\r\n        }\r\n        else if (paramMetadata instanceof Self || paramMetadata instanceof SkipSelf) {\r\n            visibility = paramMetadata;\r\n        }\r\n        else if (paramMetadata instanceof InjectionToken) {\r\n            token = paramMetadata;\r\n        }\r\n    }\r\n    token = resolveForwardRef(token);\r\n    if (token != null) {\r\n        return _createDependency(token, optional, visibility);\r\n    }\r\n    else {\r\n        throw noAnnotationError(typeOrFunc, params);\r\n    }\r\n}\r\nfunction _createDependency(token, optional, visibility) {\r\n    return new ReflectiveDependency(ReflectiveKey.get(token), optional, visibility);\r\n}\r\n\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n// Threshold for the dynamic version\r\nvar UNDEFINED = new Object();\r\n/**\r\n * A ReflectiveDependency injection container used for instantiating objects and resolving\r\n * dependencies.\r\n *\r\n * An `Injector` is a replacement for a `new` operator, which can automatically resolve the\r\n * constructor dependencies.\r\n *\r\n * In typical use, application code asks for the dependencies in the constructor and they are\r\n * resolved by the `Injector`.\r\n *\r\n * ### Example ([live demo](http://plnkr.co/edit/jzjec0?p=preview))\r\n *\r\n * The following example creates an `Injector` configured to create `Engine` and `Car`.\r\n *\r\n * ```typescript\r\n * @Injectable()\r\n * class Engine {\r\n * }\r\n *\r\n * @Injectable()\r\n * class Car {\r\n *   constructor(public engine:Engine) {}\r\n * }\r\n *\r\n * var injector = ReflectiveInjector.resolveAndCreate([Car, Engine]);\r\n * var car = injector.get(Car);\r\n * expect(car instanceof Car).toBe(true);\r\n * expect(car.engine instanceof Engine).toBe(true);\r\n * ```\r\n *\r\n * Notice, we don't use the `new` operator because we explicitly want to have the `Injector`\r\n * resolve all of the object's dependencies automatically.\r\n *\r\n * @deprecated from v5 - slow and brings in a lot of code, Use `Injector.create` instead.\r\n */\r\nvar ReflectiveInjector = /** @class */ (function () {\r\n    function ReflectiveInjector() {\r\n    }\r\n    /**\r\n     * Turns an array of provider definitions into an array of resolved providers.\r\n     *\r\n     * A resolution is a process of flattening multiple nested arrays and converting individual\r\n     * providers into an array of {@link ResolvedReflectiveProvider}s.\r\n     *\r\n     * ### Example ([live demo](http://plnkr.co/edit/AiXTHi?p=preview))\r\n     *\r\n     * ```typescript\r\n     * @Injectable()\r\n     * class Engine {\r\n     * }\r\n     *\r\n     * @Injectable()\r\n     * class Car {\r\n     *   constructor(public engine:Engine) {}\r\n     * }\r\n     *\r\n     * var providers = ReflectiveInjector.resolve([Car, [[Engine]]]);\r\n     *\r\n     * expect(providers.length).toEqual(2);\r\n     *\r\n     * expect(providers[0] instanceof ResolvedReflectiveProvider).toBe(true);\r\n     * expect(providers[0].key.displayName).toBe(\"Car\");\r\n     * expect(providers[0].dependencies.length).toEqual(1);\r\n     * expect(providers[0].factory).toBeDefined();\r\n     *\r\n     * expect(providers[1].key.displayName).toBe(\"Engine\");\r\n     * });\r\n     * ```\r\n     *\r\n     * See {@link ReflectiveInjector#fromResolvedProviders fromResolvedProviders} for more info.\r\n     */\r\n    /**\r\n       * Turns an array of provider definitions into an array of resolved providers.\r\n       *\r\n       * A resolution is a process of flattening multiple nested arrays and converting individual\r\n       * providers into an array of {@link ResolvedReflectiveProvider}s.\r\n       *\r\n       * ### Example ([live demo](http://plnkr.co/edit/AiXTHi?p=preview))\r\n       *\r\n       * ```typescript\r\n       * @Injectable()\r\n       * class Engine {\r\n       * }\r\n       *\r\n       * @Injectable()\r\n       * class Car {\r\n       *   constructor(public engine:Engine) {}\r\n       * }\r\n       *\r\n       * var providers = ReflectiveInjector.resolve([Car, [[Engine]]]);\r\n       *\r\n       * expect(providers.length).toEqual(2);\r\n       *\r\n       * expect(providers[0] instanceof ResolvedReflectiveProvider).toBe(true);\r\n       * expect(providers[0].key.displayName).toBe(\"Car\");\r\n       * expect(providers[0].dependencies.length).toEqual(1);\r\n       * expect(providers[0].factory).toBeDefined();\r\n       *\r\n       * expect(providers[1].key.displayName).toBe(\"Engine\");\r\n       * });\r\n       * ```\r\n       *\r\n       * See {@link ReflectiveInjector#fromResolvedProviders fromResolvedProviders} for more info.\r\n       */\r\n    ReflectiveInjector.resolve = /**\r\n       * Turns an array of provider definitions into an array of resolved providers.\r\n       *\r\n       * A resolution is a process of flattening multiple nested arrays and converting individual\r\n       * providers into an array of {@link ResolvedReflectiveProvider}s.\r\n       *\r\n       * ### Example ([live demo](http://plnkr.co/edit/AiXTHi?p=preview))\r\n       *\r\n       * ```typescript\r\n       * @Injectable()\r\n       * class Engine {\r\n       * }\r\n       *\r\n       * @Injectable()\r\n       * class Car {\r\n       *   constructor(public engine:Engine) {}\r\n       * }\r\n       *\r\n       * var providers = ReflectiveInjector.resolve([Car, [[Engine]]]);\r\n       *\r\n       * expect(providers.length).toEqual(2);\r\n       *\r\n       * expect(providers[0] instanceof ResolvedReflectiveProvider).toBe(true);\r\n       * expect(providers[0].key.displayName).toBe(\"Car\");\r\n       * expect(providers[0].dependencies.length).toEqual(1);\r\n       * expect(providers[0].factory).toBeDefined();\r\n       *\r\n       * expect(providers[1].key.displayName).toBe(\"Engine\");\r\n       * });\r\n       * ```\r\n       *\r\n       * See {@link ReflectiveInjector#fromResolvedProviders fromResolvedProviders} for more info.\r\n       */\r\n    function (providers) {\r\n        return resolveReflectiveProviders(providers);\r\n    };\r\n    /**\r\n     * Resolves an array of providers and creates an injector from those providers.\r\n     *\r\n     * The passed-in providers can be an array of `Type`, {@link Provider},\r\n     * or a recursive array of more providers.\r\n     *\r\n     * ### Example ([live demo](http://plnkr.co/edit/ePOccA?p=preview))\r\n     *\r\n     * ```typescript\r\n     * @Injectable()\r\n     * class Engine {\r\n     * }\r\n     *\r\n     * @Injectable()\r\n     * class Car {\r\n     *   constructor(public engine:Engine) {}\r\n     * }\r\n     *\r\n     * var injector = ReflectiveInjector.resolveAndCreate([Car, Engine]);\r\n     * expect(injector.get(Car) instanceof Car).toBe(true);\r\n     * ```\r\n     *\r\n     * This function is slower than the corresponding `fromResolvedProviders`\r\n     * because it needs to resolve the passed-in providers first.\r\n     * See {@link ReflectiveInjector#resolve resolve} and\r\n     * {@link ReflectiveInjector#fromResolvedProviders fromResolvedProviders}.\r\n     */\r\n    /**\r\n       * Resolves an array of providers and creates an injector from those providers.\r\n       *\r\n       * The passed-in providers can be an array of `Type`, {@link Provider},\r\n       * or a recursive array of more providers.\r\n       *\r\n       * ### Example ([live demo](http://plnkr.co/edit/ePOccA?p=preview))\r\n       *\r\n       * ```typescript\r\n       * @Injectable()\r\n       * class Engine {\r\n       * }\r\n       *\r\n       * @Injectable()\r\n       * class Car {\r\n       *   constructor(public engine:Engine) {}\r\n       * }\r\n       *\r\n       * var injector = ReflectiveInjector.resolveAndCreate([Car, Engine]);\r\n       * expect(injector.get(Car) instanceof Car).toBe(true);\r\n       * ```\r\n       *\r\n       * This function is slower than the corresponding `fromResolvedProviders`\r\n       * because it needs to resolve the passed-in providers first.\r\n       * See {@link ReflectiveInjector#resolve resolve} and\r\n       * {@link ReflectiveInjector#fromResolvedProviders fromResolvedProviders}.\r\n       */\r\n    ReflectiveInjector.resolveAndCreate = /**\r\n       * Resolves an array of providers and creates an injector from those providers.\r\n       *\r\n       * The passed-in providers can be an array of `Type`, {@link Provider},\r\n       * or a recursive array of more providers.\r\n       *\r\n       * ### Example ([live demo](http://plnkr.co/edit/ePOccA?p=preview))\r\n       *\r\n       * ```typescript\r\n       * @Injectable()\r\n       * class Engine {\r\n       * }\r\n       *\r\n       * @Injectable()\r\n       * class Car {\r\n       *   constructor(public engine:Engine) {}\r\n       * }\r\n       *\r\n       * var injector = ReflectiveInjector.resolveAndCreate([Car, Engine]);\r\n       * expect(injector.get(Car) instanceof Car).toBe(true);\r\n       * ```\r\n       *\r\n       * This function is slower than the corresponding `fromResolvedProviders`\r\n       * because it needs to resolve the passed-in providers first.\r\n       * See {@link ReflectiveInjector#resolve resolve} and\r\n       * {@link ReflectiveInjector#fromResolvedProviders fromResolvedProviders}.\r\n       */\r\n    function (providers, parent) {\r\n        var ResolvedReflectiveProviders = ReflectiveInjector.resolve(providers);\r\n        return ReflectiveInjector.fromResolvedProviders(ResolvedReflectiveProviders, parent);\r\n    };\r\n    /**\r\n     * Creates an injector from previously resolved providers.\r\n     *\r\n     * This API is the recommended way to construct injectors in performance-sensitive parts.\r\n     *\r\n     * ### Example ([live demo](http://plnkr.co/edit/KrSMci?p=preview))\r\n     *\r\n     * ```typescript\r\n     * @Injectable()\r\n     * class Engine {\r\n     * }\r\n     *\r\n     * @Injectable()\r\n     * class Car {\r\n     *   constructor(public engine:Engine) {}\r\n     * }\r\n     *\r\n     * var providers = ReflectiveInjector.resolve([Car, Engine]);\r\n     * var injector = ReflectiveInjector.fromResolvedProviders(providers);\r\n     * expect(injector.get(Car) instanceof Car).toBe(true);\r\n     * ```\r\n     * @experimental\r\n     */\r\n    /**\r\n       * Creates an injector from previously resolved providers.\r\n       *\r\n       * This API is the recommended way to construct injectors in performance-sensitive parts.\r\n       *\r\n       * ### Example ([live demo](http://plnkr.co/edit/KrSMci?p=preview))\r\n       *\r\n       * ```typescript\r\n       * @Injectable()\r\n       * class Engine {\r\n       * }\r\n       *\r\n       * @Injectable()\r\n       * class Car {\r\n       *   constructor(public engine:Engine) {}\r\n       * }\r\n       *\r\n       * var providers = ReflectiveInjector.resolve([Car, Engine]);\r\n       * var injector = ReflectiveInjector.fromResolvedProviders(providers);\r\n       * expect(injector.get(Car) instanceof Car).toBe(true);\r\n       * ```\r\n       * @experimental\r\n       */\r\n    ReflectiveInjector.fromResolvedProviders = /**\r\n       * Creates an injector from previously resolved providers.\r\n       *\r\n       * This API is the recommended way to construct injectors in performance-sensitive parts.\r\n       *\r\n       * ### Example ([live demo](http://plnkr.co/edit/KrSMci?p=preview))\r\n       *\r\n       * ```typescript\r\n       * @Injectable()\r\n       * class Engine {\r\n       * }\r\n       *\r\n       * @Injectable()\r\n       * class Car {\r\n       *   constructor(public engine:Engine) {}\r\n       * }\r\n       *\r\n       * var providers = ReflectiveInjector.resolve([Car, Engine]);\r\n       * var injector = ReflectiveInjector.fromResolvedProviders(providers);\r\n       * expect(injector.get(Car) instanceof Car).toBe(true);\r\n       * ```\r\n       * @experimental\r\n       */\r\n    function (providers, parent) {\r\n        return new ReflectiveInjector_(providers, parent);\r\n    };\r\n    return ReflectiveInjector;\r\n}());\r\nvar ReflectiveInjector_ = /** @class */ (function () {\r\n    /**\r\n     * Private\r\n     */\r\n    function ReflectiveInjector_(_providers, _parent) {\r\n        /** @internal */\r\n        this._constructionCounter = 0;\r\n        this._providers = _providers;\r\n        this.parent = _parent || null;\r\n        var len = _providers.length;\r\n        this.keyIds = new Array(len);\r\n        this.objs = new Array(len);\r\n        for (var i = 0; i < len; i++) {\r\n            this.keyIds[i] = _providers[i].key.id;\r\n            this.objs[i] = UNDEFINED;\r\n        }\r\n    }\r\n    ReflectiveInjector_.prototype.get = function (token, notFoundValue) {\r\n        if (notFoundValue === void 0) { notFoundValue = THROW_IF_NOT_FOUND; }\r\n        return this._getByKey(ReflectiveKey.get(token), null, notFoundValue);\r\n    };\r\n    ReflectiveInjector_.prototype.resolveAndCreateChild = function (providers) {\r\n        var ResolvedReflectiveProviders = ReflectiveInjector.resolve(providers);\r\n        return this.createChildFromResolved(ResolvedReflectiveProviders);\r\n    };\r\n    ReflectiveInjector_.prototype.createChildFromResolved = function (providers) {\r\n        var inj = new ReflectiveInjector_(providers);\r\n        inj.parent = this;\r\n        return inj;\r\n    };\r\n    ReflectiveInjector_.prototype.resolveAndInstantiate = function (provider) {\r\n        return this.instantiateResolved(ReflectiveInjector.resolve([provider])[0]);\r\n    };\r\n    ReflectiveInjector_.prototype.instantiateResolved = function (provider) {\r\n        return this._instantiateProvider(provider);\r\n    };\r\n    ReflectiveInjector_.prototype.getProviderAtIndex = function (index) {\r\n        if (index < 0 || index >= this._providers.length) {\r\n            throw outOfBoundsError(index);\r\n        }\r\n        return this._providers[index];\r\n    };\r\n    /** @internal */\r\n    /** @internal */\r\n    ReflectiveInjector_.prototype._new = /** @internal */\r\n    function (provider) {\r\n        if (this._constructionCounter++ > this._getMaxNumberOfObjects()) {\r\n            throw cyclicDependencyError(this, provider.key);\r\n        }\r\n        return this._instantiateProvider(provider);\r\n    };\r\n    ReflectiveInjector_.prototype._getMaxNumberOfObjects = function () { return this.objs.length; };\r\n    ReflectiveInjector_.prototype._instantiateProvider = function (provider) {\r\n        if (provider.multiProvider) {\r\n            var res = new Array(provider.resolvedFactories.length);\r\n            for (var i = 0; i < provider.resolvedFactories.length; ++i) {\r\n                res[i] = this._instantiate(provider, provider.resolvedFactories[i]);\r\n            }\r\n            return res;\r\n        }\r\n        else {\r\n            return this._instantiate(provider, provider.resolvedFactories[0]);\r\n        }\r\n    };\r\n    ReflectiveInjector_.prototype._instantiate = function (provider, ResolvedReflectiveFactory$$1) {\r\n        var _this = this;\r\n        var factory = ResolvedReflectiveFactory$$1.factory;\r\n        var deps;\r\n        try {\r\n            deps =\r\n                ResolvedReflectiveFactory$$1.dependencies.map(function (dep) { return _this._getByReflectiveDependency(dep); });\r\n        }\r\n        catch (e) {\r\n            if (e.addKey) {\r\n                e.addKey(this, provider.key);\r\n            }\r\n            throw e;\r\n        }\r\n        var obj;\r\n        try {\r\n            obj = factory.apply(void 0, __spread(deps));\r\n        }\r\n        catch (e) {\r\n            throw instantiationError(this, e, e.stack, provider.key);\r\n        }\r\n        return obj;\r\n    };\r\n    ReflectiveInjector_.prototype._getByReflectiveDependency = function (dep) {\r\n        return this._getByKey(dep.key, dep.visibility, dep.optional ? null : THROW_IF_NOT_FOUND);\r\n    };\r\n    ReflectiveInjector_.prototype._getByKey = function (key, visibility, notFoundValue) {\r\n        if (key === ReflectiveInjector_.INJECTOR_KEY) {\r\n            return this;\r\n        }\r\n        if (visibility instanceof Self) {\r\n            return this._getByKeySelf(key, notFoundValue);\r\n        }\r\n        else {\r\n            return this._getByKeyDefault(key, notFoundValue, visibility);\r\n        }\r\n    };\r\n    ReflectiveInjector_.prototype._getObjByKeyId = function (keyId) {\r\n        for (var i = 0; i < this.keyIds.length; i++) {\r\n            if (this.keyIds[i] === keyId) {\r\n                if (this.objs[i] === UNDEFINED) {\r\n                    this.objs[i] = this._new(this._providers[i]);\r\n                }\r\n                return this.objs[i];\r\n            }\r\n        }\r\n        return UNDEFINED;\r\n    };\r\n    /** @internal */\r\n    /** @internal */\r\n    ReflectiveInjector_.prototype._throwOrNull = /** @internal */\r\n    function (key, notFoundValue) {\r\n        if (notFoundValue !== THROW_IF_NOT_FOUND) {\r\n            return notFoundValue;\r\n        }\r\n        else {\r\n            throw noProviderError(this, key);\r\n        }\r\n    };\r\n    /** @internal */\r\n    /** @internal */\r\n    ReflectiveInjector_.prototype._getByKeySelf = /** @internal */\r\n    function (key, notFoundValue) {\r\n        var obj = this._getObjByKeyId(key.id);\r\n        return (obj !== UNDEFINED) ? obj : this._throwOrNull(key, notFoundValue);\r\n    };\r\n    /** @internal */\r\n    /** @internal */\r\n    ReflectiveInjector_.prototype._getByKeyDefault = /** @internal */\r\n    function (key, notFoundValue, visibility) {\r\n        var inj;\r\n        if (visibility instanceof SkipSelf) {\r\n            inj = this.parent;\r\n        }\r\n        else {\r\n            inj = this;\r\n        }\r\n        while (inj instanceof ReflectiveInjector_) {\r\n            var inj_ = inj;\r\n            var obj = inj_._getObjByKeyId(key.id);\r\n            if (obj !== UNDEFINED)\r\n                return obj;\r\n            inj = inj_.parent;\r\n        }\r\n        if (inj !== null) {\r\n            return inj.get(key.token, notFoundValue);\r\n        }\r\n        else {\r\n            return this._throwOrNull(key, notFoundValue);\r\n        }\r\n    };\r\n    Object.defineProperty(ReflectiveInjector_.prototype, \"displayName\", {\r\n        get: function () {\r\n            var providers = _mapProviders(this, function (b) { return ' \"' + b.key.displayName + '\" '; })\r\n                .join(', ');\r\n            return \"ReflectiveInjector(providers: [\" + providers + \"])\";\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    ReflectiveInjector_.prototype.toString = function () { return this.displayName; };\r\n    ReflectiveInjector_.INJECTOR_KEY = ReflectiveKey.get(Injector);\r\n    return ReflectiveInjector_;\r\n}());\r\nfunction _mapProviders(injector, fn) {\r\n    var res = new Array(injector._providers.length);\r\n    for (var i = 0; i < injector._providers.length; ++i) {\r\n        res[i] = fn(injector.getProviderAtIndex(i));\r\n    }\r\n    return res;\r\n}\r\n\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * An internal token whose presence in an injector indicates that the injector should treat itself\r\n * as a root scoped injector when processing requests for unknown tokens which may indicate\r\n * they are provided in the root scope.\r\n */\r\nvar APP_ROOT = new InjectionToken('The presence of this token marks an injector as being the root injector.');\r\n\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * Marker which indicates that a value has not yet been created from the factory function.\r\n */\r\nvar NOT_YET = {};\r\n/**\r\n * Marker which indicates that the factory function for a token is in the process of being called.\r\n *\r\n * If the injector is asked to inject a token with its value set to CIRCULAR, that indicates\r\n * injection of a dependency has recursively attempted to inject the original token, and there is\r\n * a circular dependency among the providers.\r\n */\r\nvar CIRCULAR$1 = {};\r\nvar EMPTY_ARRAY$1 = [];\r\n/**\r\n * A lazily initialized NullInjector.\r\n */\r\nvar NULL_INJECTOR$1 = undefined;\r\nfunction getNullInjector() {\r\n    if (NULL_INJECTOR$1 === undefined) {\r\n        NULL_INJECTOR$1 = new NullInjector();\r\n    }\r\n    return NULL_INJECTOR$1;\r\n}\r\n/**\r\n * Create a new `Injector` which is configured using `InjectorType`s.\r\n *\r\n * @experimental\r\n */\r\nfunction createInjector(defType, parent) {\r\n    if (parent === void 0) { parent = null; }\r\n    parent = parent || getNullInjector();\r\n    return new R3Injector(defType, parent);\r\n}\r\nvar R3Injector = /** @class */ (function () {\r\n    function R3Injector(def, parent) {\r\n        var _this = this;\r\n        this.parent = parent;\r\n        /**\r\n           * Map of tokens to records which contain the instances of those tokens.\r\n           */\r\n        this.records = new Map();\r\n        /**\r\n           * The transitive set of `InjectorType`s which define this injector.\r\n           */\r\n        this.injectorDefTypes = new Set();\r\n        /**\r\n           * Set of values instantiated by this injector which contain `ngOnDestroy` lifecycle hooks.\r\n           */\r\n        this.onDestroy = new Set();\r\n        /**\r\n           * Flag indicating that this injector was previously destroyed.\r\n           */\r\n        this.destroyed = false;\r\n        // Start off by creating Records for every provider declared in every InjectorType\r\n        // included transitively in `def`.\r\n        deepForEach([def], function (injectorDef) { return _this.processInjectorType(injectorDef, new Set()); });\r\n        // Make sure the INJECTOR token provides this injector.\r\n        this.records.set(INJECTOR, makeRecord(undefined, this));\r\n        // Detect whether this injector has the APP_ROOT_SCOPE token and thus should provide\r\n        // any injectable scoped to APP_ROOT_SCOPE.\r\n        this.isRootInjector = this.records.has(APP_ROOT);\r\n        // Eagerly instantiate the InjectorType classes themselves.\r\n        this.injectorDefTypes.forEach(function (defType) { return _this.get(defType); });\r\n    }\r\n    /**\r\n     * Destroy the injector and release references to every instance or provider associated with it.\r\n     *\r\n     * Also calls the `OnDestroy` lifecycle hooks of every instance that was created for which a\r\n     * hook was found.\r\n     */\r\n    /**\r\n       * Destroy the injector and release references to every instance or provider associated with it.\r\n       *\r\n       * Also calls the `OnDestroy` lifecycle hooks of every instance that was created for which a\r\n       * hook was found.\r\n       */\r\n    R3Injector.prototype.destroy = /**\r\n       * Destroy the injector and release references to every instance or provider associated with it.\r\n       *\r\n       * Also calls the `OnDestroy` lifecycle hooks of every instance that was created for which a\r\n       * hook was found.\r\n       */\r\n    function () {\r\n        this.assertNotDestroyed();\r\n        // Set destroyed = true first, in case lifecycle hooks re-enter destroy().\r\n        this.destroyed = true;\r\n        try {\r\n            // Call all the lifecycle hooks.\r\n            this.onDestroy.forEach(function (service) { return service.ngOnDestroy(); });\r\n        }\r\n        finally {\r\n            // Release all references.\r\n            this.records.clear();\r\n            this.onDestroy.clear();\r\n            this.injectorDefTypes.clear();\r\n        }\r\n    };\r\n    R3Injector.prototype.get = function (token, notFoundValue, flags) {\r\n        if (notFoundValue === void 0) { notFoundValue = THROW_IF_NOT_FOUND; }\r\n        if (flags === void 0) { flags = 0 /* Default */; }\r\n        this.assertNotDestroyed();\r\n        // Set the injection context.\r\n        var previousInjector = setCurrentInjector(this);\r\n        try {\r\n            // Check for the SkipSelf flag.\r\n            if (!(flags & 4 /* SkipSelf */)) {\r\n                // SkipSelf isn't set, check if the record belongs to this injector.\r\n                var record = this.records.get(token);\r\n                if (record === undefined) {\r\n                    // No record, but maybe the token is scoped to this injector. Look for an ngInjectableDef\r\n                    // with a scope matching this injector.\r\n                    var def = couldBeInjectableType(token) &&\r\n                        token.ngInjectableDef ||\r\n                        undefined;\r\n                    if (def !== undefined && this.injectableDefInScope(def)) {\r\n                        // Found an ngInjectableDef and it's scoped to this injector. Pretend as if it was here\r\n                        // all along.\r\n                        record = injectableDefRecord(token);\r\n                        this.records.set(token, record);\r\n                    }\r\n                }\r\n                // If a record was found, get the instance for it and return it.\r\n                if (record !== undefined) {\r\n                    return this.hydrate(token, record);\r\n                }\r\n            }\r\n            // Select the next injector based on the Self flag - if self is set, the next injector is\r\n            // the NullInjector, otherwise it's the parent.\r\n            var next = !(flags & 2 /* Self */) ? this.parent : getNullInjector();\r\n            return this.parent.get(token, notFoundValue);\r\n        }\r\n        finally {\r\n            // Lastly, clean up the state by restoring the previous injector.\r\n            setCurrentInjector(previousInjector);\r\n        }\r\n    };\r\n    R3Injector.prototype.assertNotDestroyed = function () {\r\n        if (this.destroyed) {\r\n            throw new Error('Injector has already been destroyed.');\r\n        }\r\n    };\r\n    /**\r\n     * Add an `InjectorType` or `InjectorDefTypeWithProviders` and all of its transitive providers\r\n     * to this injector.\r\n     */\r\n    /**\r\n       * Add an `InjectorType` or `InjectorDefTypeWithProviders` and all of its transitive providers\r\n       * to this injector.\r\n       */\r\n    R3Injector.prototype.processInjectorType = /**\r\n       * Add an `InjectorType` or `InjectorDefTypeWithProviders` and all of its transitive providers\r\n       * to this injector.\r\n       */\r\n    function (defOrWrappedDef, parents) {\r\n        var _this = this;\r\n        defOrWrappedDef = resolveForwardRef(defOrWrappedDef);\r\n        // Either the defOrWrappedDef is an InjectorType (with ngInjectorDef) or an\r\n        // InjectorDefTypeWithProviders (aka ModuleWithProviders). Detecting either is a megamorphic\r\n        // read, so care is taken to only do the read once.\r\n        // First attempt to read the ngInjectorDef.\r\n        var def = defOrWrappedDef.ngInjectorDef;\r\n        // If that's not present, then attempt to read ngModule from the InjectorDefTypeWithProviders.\r\n        var ngModule = (def == null) && defOrWrappedDef.ngModule || undefined;\r\n        // Determine the InjectorType. In the case where `defOrWrappedDef` is an `InjectorType`,\r\n        // then this is easy. In the case of an InjectorDefTypeWithProviders, then the definition type\r\n        // is the `ngModule`.\r\n        var defType = (ngModule === undefined) ? defOrWrappedDef : ngModule;\r\n        // If defOrWrappedType was an InjectorDefTypeWithProviders, then .providers may hold some\r\n        // extra providers.\r\n        var providers = (ngModule !== undefined) && defOrWrappedDef.providers ||\r\n            EMPTY_ARRAY$1;\r\n        // Finally, if defOrWrappedType was an `InjectorDefTypeWithProviders`, then the actual\r\n        // `InjectorDef` is on its `ngModule`.\r\n        if (ngModule !== undefined) {\r\n            def = ngModule.ngInjectorDef;\r\n        }\r\n        // If no definition was found, throw.\r\n        if (def == null) {\r\n            throw new Error(\"Type \" + stringify(defType) + \" is missing an ngInjectorDef definition.\");\r\n        }\r\n        // Check for circular dependencies.\r\n        if (parents.has(defType)) {\r\n            throw new Error(\"Circular dependency: type \" + stringify(defType) + \" ends up importing itself.\");\r\n        }\r\n        // Track the InjectorType and add a provider for it.\r\n        this.injectorDefTypes.add(defType);\r\n        this.records.set(defType, makeRecord(def.factory));\r\n        // Add providers in the same way that @NgModule resolution did:\r\n        // First, include providers from any imports.\r\n        if (def.imports != null) {\r\n            // Before processing defType's imports, add it to the set of parents. This way, if it ends\r\n            // up deeply importing itself, this can be detected.\r\n            parents.add(defType);\r\n            try {\r\n                deepForEach(def.imports, function (imported) { return _this.processInjectorType(imported, parents); });\r\n            }\r\n            finally {\r\n                // Remove it from the parents set when finished.\r\n                parents.delete(defType);\r\n            }\r\n        }\r\n        // Next, include providers listed on the definition itself.\r\n        if (def.providers != null) {\r\n            deepForEach(def.providers, function (provider) { return _this.processProvider(provider); });\r\n        }\r\n        // Finally, include providers from an InjectorDefTypeWithProviders if there was one.\r\n        deepForEach(providers, function (provider) { return _this.processProvider(provider); });\r\n    };\r\n    /**\r\n     * Process a `SingleProvider` and add it.\r\n     */\r\n    /**\r\n       * Process a `SingleProvider` and add it.\r\n       */\r\n    R3Injector.prototype.processProvider = /**\r\n       * Process a `SingleProvider` and add it.\r\n       */\r\n    function (provider) {\r\n        // Determine the token from the provider. Either it's its own token, or has a {provide: ...}\r\n        // property.\r\n        provider = resolveForwardRef(provider);\r\n        var token = isTypeProvider(provider) ? provider : resolveForwardRef(provider.provide);\r\n        // Construct a `Record` for the provider.\r\n        var record = providerToRecord(provider);\r\n        if (!isTypeProvider(provider) && provider.multi === true) {\r\n            // If the provider indicates that it's a multi-provider, process it specially.\r\n            // First check whether it's been defined already.\r\n            var multiRecord_1 = this.records.get(token);\r\n            if (multiRecord_1) {\r\n                // It has. Throw a nice error if\r\n                if (multiRecord_1.multi === undefined) {\r\n                    throw new Error(\"Mixed multi-provider for \" + token + \".\");\r\n                }\r\n            }\r\n            else {\r\n                token = provider;\r\n                multiRecord_1 = makeRecord(undefined, NOT_YET, true);\r\n                multiRecord_1.factory = function () { return injectArgs((multiRecord_1.multi)); };\r\n                this.records.set(token, multiRecord_1);\r\n            }\r\n            token = provider;\r\n            multiRecord_1.multi.push(provider);\r\n        }\r\n        var existing = this.records.get(token);\r\n        if (existing && existing.multi !== undefined) {\r\n            throw new Error(\"Mixed multi-provider for \" + token);\r\n        }\r\n        this.records.set(token, record);\r\n    };\r\n    R3Injector.prototype.hydrate = function (token, record) {\r\n        if (record.value === CIRCULAR$1) {\r\n            throw new Error(\"Circular dep for \" + stringify(token));\r\n        }\r\n        else if (record.value === NOT_YET) {\r\n            record.value = CIRCULAR$1;\r\n            record.value = record.factory();\r\n        }\r\n        if (typeof record.value === 'object' && record.value && hasOnDestroy(record.value)) {\r\n            this.onDestroy.add(record.value);\r\n        }\r\n        return record.value;\r\n    };\r\n    R3Injector.prototype.injectableDefInScope = function (def) {\r\n        if (!def.providedIn) {\r\n            return false;\r\n        }\r\n        else if (typeof def.providedIn === 'string') {\r\n            return def.providedIn === 'any' || (def.providedIn === 'root' && this.isRootInjector);\r\n        }\r\n        else {\r\n            return this.injectorDefTypes.has(def.providedIn);\r\n        }\r\n    };\r\n    return R3Injector;\r\n}());\r\nfunction injectableDefRecord(token) {\r\n    var def = token.ngInjectableDef;\r\n    if (def === undefined) {\r\n        throw new Error(\"Type \" + stringify(token) + \" is missing an ngInjectableDef definition.\");\r\n    }\r\n    return makeRecord(def.factory);\r\n}\r\nfunction providerToRecord(provider) {\r\n    var token = resolveForwardRef(provider);\r\n    var value = NOT_YET;\r\n    var factory = undefined;\r\n    if (isTypeProvider(provider)) {\r\n        return injectableDefRecord(provider);\r\n    }\r\n    else {\r\n        token = resolveForwardRef(provider.provide);\r\n        if (isValueProvider(provider)) {\r\n            value = provider.useValue;\r\n        }\r\n        else if (isExistingProvider(provider)) {\r\n            factory = function () { return inject(provider.useExisting); };\r\n        }\r\n        else if (isFactoryProvider(provider)) {\r\n            factory = function () { return provider.useFactory.apply(provider, __spread(injectArgs(provider.deps || []))); };\r\n        }\r\n        else {\r\n            var classRef_1 = provider.useClass || token;\r\n            if (hasDeps(provider)) {\r\n                factory = function () { return new ((classRef_1).bind.apply((classRef_1), __spread([void 0], injectArgs(provider.deps))))(); };\r\n            }\r\n            else {\r\n                return injectableDefRecord(classRef_1);\r\n            }\r\n        }\r\n    }\r\n    return makeRecord(factory, value);\r\n}\r\nfunction makeRecord(factory, value, multi) {\r\n    if (value === void 0) { value = NOT_YET; }\r\n    if (multi === void 0) { multi = false; }\r\n    return {\r\n        factory: factory,\r\n        value: value,\r\n        multi: multi ? [] : undefined,\r\n    };\r\n}\r\nfunction deepForEach(input, fn) {\r\n    input.forEach(function (value) { return Array.isArray(value) ? deepForEach(value, fn) : fn(value); });\r\n}\r\nfunction isValueProvider(value) {\r\n    return USE_VALUE$1 in value;\r\n}\r\nfunction isExistingProvider(value) {\r\n    return !!value.useExisting;\r\n}\r\nfunction isFactoryProvider(value) {\r\n    return !!value.useFactory;\r\n}\r\nfunction isTypeProvider(value) {\r\n    return typeof value === 'function';\r\n}\r\nfunction hasDeps(value) {\r\n    return !!value.deps;\r\n}\r\nfunction hasOnDestroy(value) {\r\n    return typeof value === 'object' && value != null && value.ngOnDestroy &&\r\n        typeof value.ngOnDestroy === 'function';\r\n}\r\nfunction couldBeInjectableType(value) {\r\n    return (typeof value === 'function') ||\r\n        (typeof value === 'object' && value instanceof InjectionToken);\r\n}\r\n\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * Determine if the argument is shaped like a Promise\r\n */\r\nfunction isPromise(obj) {\r\n    // allow any Promise/A+ compliant thenable.\r\n    // It's up to the caller to ensure that obj.then conforms to the spec\r\n    return !!obj && typeof obj.then === 'function';\r\n}\r\n/**\r\n * Determine if the argument is an Observable\r\n */\r\nfunction isObservable(obj) {\r\n    // TODO: use Symbol.observable when https://github.com/ReactiveX/rxjs/issues/2415 will be resolved\r\n    return !!obj && typeof obj.subscribe === 'function';\r\n}\r\n\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * A function that will be executed when an application is initialized.\r\n * @experimental\r\n */\r\nvar APP_INITIALIZER = new InjectionToken('Application Initializer');\r\n/**\r\n * A class that reflects the state of running {@link APP_INITIALIZER}s.\r\n *\r\n * @experimental\r\n */\r\nvar ApplicationInitStatus = /** @class */ (function () {\r\n    function ApplicationInitStatus(appInits) {\r\n        var _this = this;\r\n        this.appInits = appInits;\r\n        this.initialized = false;\r\n        this.done = false;\r\n        this.donePromise = new Promise(function (res, rej) {\r\n            _this.resolve = res;\r\n            _this.reject = rej;\r\n        });\r\n    }\r\n    /** @internal */\r\n    /** @internal */\r\n    ApplicationInitStatus.prototype.runInitializers = /** @internal */\r\n    function () {\r\n        var _this = this;\r\n        if (this.initialized) {\r\n            return;\r\n        }\r\n        var asyncInitPromises = [];\r\n        var complete = function () {\r\n            _this.done = true;\r\n            _this.resolve();\r\n        };\r\n        if (this.appInits) {\r\n            for (var i = 0; i < this.appInits.length; i++) {\r\n                var initResult = this.appInits[i]();\r\n                if (isPromise(initResult)) {\r\n                    asyncInitPromises.push(initResult);\r\n                }\r\n            }\r\n        }\r\n        Promise.all(asyncInitPromises).then(function () { complete(); }).catch(function (e) { _this.reject(e); });\r\n        if (asyncInitPromises.length === 0) {\r\n            complete();\r\n        }\r\n        this.initialized = true;\r\n    };\r\n    ApplicationInitStatus.decorators = [\r\n        { type: Injectable }\r\n    ];\r\n    /** @nocollapse */\r\n    ApplicationInitStatus.ctorParameters = function () { return [\r\n        { type: Array, decorators: [{ type: Inject, args: [APP_INITIALIZER,] }, { type: Optional },] },\r\n    ]; };\r\n    return ApplicationInitStatus;\r\n}());\r\n\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * A DI Token representing a unique string id assigned to the application by Angular and used\r\n * primarily for prefixing application attributes and CSS styles when\r\n * {@link ViewEncapsulation#Emulated ViewEncapsulation.Emulated} is being used.\r\n *\r\n * If you need to avoid randomly generated value to be used as an application id, you can provide\r\n * a custom value via a DI provider <!-- TODO: provider --> configuring the root {@link Injector}\r\n * using this token.\r\n * @experimental\r\n */\r\nvar APP_ID = new InjectionToken('AppId');\r\nfunction _appIdRandomProviderFactory() {\r\n    return \"\" + _randomChar() + _randomChar() + _randomChar();\r\n}\r\n/**\r\n * Providers that will generate a random APP_ID_TOKEN.\r\n * @experimental\r\n */\r\nvar APP_ID_RANDOM_PROVIDER = {\r\n    provide: APP_ID,\r\n    useFactory: _appIdRandomProviderFactory,\r\n    deps: [],\r\n};\r\nfunction _randomChar() {\r\n    return String.fromCharCode(97 + Math.floor(Math.random() * 25));\r\n}\r\n/**\r\n * A function that will be executed when a platform is initialized.\r\n * @experimental\r\n */\r\nvar PLATFORM_INITIALIZER = new InjectionToken('Platform Initializer');\r\n/**\r\n * A token that indicates an opaque platform id.\r\n * @experimental\r\n */\r\nvar PLATFORM_ID = new InjectionToken('Platform ID');\r\n/**\r\n * All callbacks provided via this token will be called for every component that is bootstrapped.\r\n * Signature of the callback:\r\n *\r\n * `(componentRef: ComponentRef) => void`.\r\n *\r\n * @experimental\r\n */\r\nvar APP_BOOTSTRAP_LISTENER = new InjectionToken('appBootstrapListener');\r\n/**\r\n * A token which indicates the root directory of the application\r\n * @experimental\r\n */\r\nvar PACKAGE_ROOT_URL = new InjectionToken('Application Packages Root URL');\r\n\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nvar Console = /** @class */ (function () {\r\n    function Console() {\r\n    }\r\n    Console.prototype.log = function (message) {\r\n        // tslint:disable-next-line:no-console\r\n        console.log(message);\r\n    };\r\n    // Note: for reporting errors use `DOM.logError()` as it is platform specific\r\n    // Note: for reporting errors use `DOM.logError()` as it is platform specific\r\n    Console.prototype.warn = \r\n    // Note: for reporting errors use `DOM.logError()` as it is platform specific\r\n    function (message) {\r\n        // tslint:disable-next-line:no-console\r\n        console.warn(message);\r\n    };\r\n    Console.decorators = [\r\n        { type: Injectable }\r\n    ];\r\n    /** @nocollapse */\r\n    Console.ctorParameters = function () { return []; };\r\n    return Console;\r\n}());\r\n\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * Combination of NgModuleFactory and ComponentFactorys.\r\n *\r\n * @experimental\r\n */\r\nvar ModuleWithComponentFactories = /** @class */ (function () {\r\n    function ModuleWithComponentFactories(ngModuleFactory, componentFactories) {\r\n        this.ngModuleFactory = ngModuleFactory;\r\n        this.componentFactories = componentFactories;\r\n    }\r\n    return ModuleWithComponentFactories;\r\n}());\r\nfunction _throwError() {\r\n    throw new Error(\"Runtime compiler is not loaded\");\r\n}\r\n/**\r\n * Low-level service for running the angular compiler during runtime\r\n * to create {@link ComponentFactory}s, which\r\n * can later be used to create and render a Component instance.\r\n *\r\n * Each `@NgModule` provides an own `Compiler` to its injector,\r\n * that will use the directives/pipes of the ng module for compilation\r\n * of components.\r\n *\r\n */\r\nvar Compiler = /** @class */ (function () {\r\n    function Compiler() {\r\n    }\r\n    /**\r\n     * Compiles the given NgModule and all of its components. All templates of the components listed\r\n     * in `entryComponents` have to be inlined.\r\n     */\r\n    /**\r\n       * Compiles the given NgModule and all of its components. All templates of the components listed\r\n       * in `entryComponents` have to be inlined.\r\n       */\r\n    Compiler.prototype.compileModuleSync = /**\r\n       * Compiles the given NgModule and all of its components. All templates of the components listed\r\n       * in `entryComponents` have to be inlined.\r\n       */\r\n    function (moduleType) { throw _throwError(); };\r\n    /**\r\n     * Compiles the given NgModule and all of its components\r\n     */\r\n    /**\r\n       * Compiles the given NgModule and all of its components\r\n       */\r\n    Compiler.prototype.compileModuleAsync = /**\r\n       * Compiles the given NgModule and all of its components\r\n       */\r\n    function (moduleType) { throw _throwError(); };\r\n    /**\r\n     * Same as {@link #compileModuleSync} but also creates ComponentFactories for all components.\r\n     */\r\n    /**\r\n       * Same as {@link #compileModuleSync} but also creates ComponentFactories for all components.\r\n       */\r\n    Compiler.prototype.compileModuleAndAllComponentsSync = /**\r\n       * Same as {@link #compileModuleSync} but also creates ComponentFactories for all components.\r\n       */\r\n    function (moduleType) {\r\n        throw _throwError();\r\n    };\r\n    /**\r\n     * Same as {@link #compileModuleAsync} but also creates ComponentFactories for all components.\r\n     */\r\n    /**\r\n       * Same as {@link #compileModuleAsync} but also creates ComponentFactories for all components.\r\n       */\r\n    Compiler.prototype.compileModuleAndAllComponentsAsync = /**\r\n       * Same as {@link #compileModuleAsync} but also creates ComponentFactories for all components.\r\n       */\r\n    function (moduleType) {\r\n        throw _throwError();\r\n    };\r\n    /**\r\n     * Clears all caches.\r\n     */\r\n    /**\r\n       * Clears all caches.\r\n       */\r\n    Compiler.prototype.clearCache = /**\r\n       * Clears all caches.\r\n       */\r\n    function () { };\r\n    /**\r\n     * Clears the cache for the given component/ngModule.\r\n     */\r\n    /**\r\n       * Clears the cache for the given component/ngModule.\r\n       */\r\n    Compiler.prototype.clearCacheFor = /**\r\n       * Clears the cache for the given component/ngModule.\r\n       */\r\n    function (type) { };\r\n    Compiler.decorators = [\r\n        { type: Injectable }\r\n    ];\r\n    /** @nocollapse */\r\n    Compiler.ctorParameters = function () { return []; };\r\n    return Compiler;\r\n}());\r\n/**\r\n * Token to provide CompilerOptions in the platform injector.\r\n *\r\n * @experimental\r\n */\r\nvar COMPILER_OPTIONS = new InjectionToken('compilerOptions');\r\n/**\r\n * A factory for creating a Compiler\r\n *\r\n * @experimental\r\n */\r\nvar CompilerFactory = /** @class */ (function () {\r\n    function CompilerFactory() {\r\n    }\r\n    return CompilerFactory;\r\n}());\r\n\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * Represents an instance of a Component created via a {@link ComponentFactory}.\r\n *\r\n * `ComponentRef` provides access to the Component Instance as well other objects related to this\r\n * Component Instance and allows you to destroy the Component Instance via the {@link #destroy}\r\n * method.\r\n *\r\n */\r\nvar ComponentRef = /** @class */ (function () {\r\n    function ComponentRef() {\r\n    }\r\n    return ComponentRef;\r\n}());\r\nvar ComponentFactory = /** @class */ (function () {\r\n    function ComponentFactory() {\r\n    }\r\n    return ComponentFactory;\r\n}());\r\n\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nfunction noComponentFactoryError(component) {\r\n    var error = Error(\"No component factory found for \" + stringify(component) + \". Did you add it to @NgModule.entryComponents?\");\r\n    error[ERROR_COMPONENT] = component;\r\n    return error;\r\n}\r\nvar ERROR_COMPONENT = 'ngComponent';\r\n\r\nvar _NullComponentFactoryResolver = /** @class */ (function () {\r\n    function _NullComponentFactoryResolver() {\r\n    }\r\n    _NullComponentFactoryResolver.prototype.resolveComponentFactory = function (component) {\r\n        throw noComponentFactoryError(component);\r\n    };\r\n    return _NullComponentFactoryResolver;\r\n}());\r\nvar ComponentFactoryResolver = /** @class */ (function () {\r\n    function ComponentFactoryResolver() {\r\n    }\r\n    ComponentFactoryResolver.NULL = new _NullComponentFactoryResolver();\r\n    return ComponentFactoryResolver;\r\n}());\r\nvar CodegenComponentFactoryResolver = /** @class */ (function () {\r\n    function CodegenComponentFactoryResolver(factories, _parent, _ngModule) {\r\n        this._parent = _parent;\r\n        this._ngModule = _ngModule;\r\n        this._factories = new Map();\r\n        for (var i = 0; i < factories.length; i++) {\r\n            var factory = factories[i];\r\n            this._factories.set(factory.componentType, factory);\r\n        }\r\n    }\r\n    CodegenComponentFactoryResolver.prototype.resolveComponentFactory = function (component) {\r\n        var factory = this._factories.get(component);\r\n        if (!factory && this._parent) {\r\n            factory = this._parent.resolveComponentFactory(component);\r\n        }\r\n        if (!factory) {\r\n            throw noComponentFactoryError(component);\r\n        }\r\n        return new ComponentFactoryBoundToModule(factory, this._ngModule);\r\n    };\r\n    return CodegenComponentFactoryResolver;\r\n}());\r\nvar ComponentFactoryBoundToModule = /** @class */ (function (_super) {\r\n    __extends(ComponentFactoryBoundToModule, _super);\r\n    function ComponentFactoryBoundToModule(factory, ngModule) {\r\n        var _this = _super.call(this) || this;\r\n        _this.factory = factory;\r\n        _this.ngModule = ngModule;\r\n        _this.selector = factory.selector;\r\n        _this.componentType = factory.componentType;\r\n        _this.ngContentSelectors = factory.ngContentSelectors;\r\n        _this.inputs = factory.inputs;\r\n        _this.outputs = factory.outputs;\r\n        return _this;\r\n    }\r\n    ComponentFactoryBoundToModule.prototype.create = function (injector, projectableNodes, rootSelectorOrNode, ngModule) {\r\n        return this.factory.create(injector, projectableNodes, rootSelectorOrNode, ngModule || this.ngModule);\r\n    };\r\n    return ComponentFactoryBoundToModule;\r\n}(ComponentFactory));\r\n\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * Represents an instance of an NgModule created via a {@link NgModuleFactory}.\r\n *\r\n * `NgModuleRef` provides access to the NgModule Instance as well other objects related to this\r\n * NgModule Instance.\r\n *\r\n *\r\n */\r\nvar NgModuleRef = /** @class */ (function () {\r\n    function NgModuleRef() {\r\n    }\r\n    return NgModuleRef;\r\n}());\r\n/**\r\n * @experimental\r\n */\r\nvar NgModuleFactory = /** @class */ (function () {\r\n    function NgModuleFactory() {\r\n    }\r\n    return NgModuleFactory;\r\n}());\r\n\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nvar trace;\r\nvar events;\r\nfunction detectWTF() {\r\n    var wtf = _global /** TODO #9100 */['wtf'];\r\n    if (wtf) {\r\n        trace = wtf['trace'];\r\n        if (trace) {\r\n            events = trace['events'];\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\r\nfunction createScope(signature, flags) {\r\n    if (flags === void 0) { flags = null; }\r\n    return events.createScope(signature, flags);\r\n}\r\nfunction leave(scope, returnValue) {\r\n    trace.leaveScope(scope, returnValue);\r\n    return returnValue;\r\n}\r\nfunction startTimeRange(rangeType, action) {\r\n    return trace.beginTimeRange(rangeType, action);\r\n}\r\nfunction endTimeRange(range) {\r\n    trace.endTimeRange(range);\r\n}\r\n\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * True if WTF is enabled.\r\n */\r\nvar wtfEnabled = detectWTF();\r\nfunction noopScope(arg0, arg1) {\r\n    return null;\r\n}\r\n/**\r\n * Create trace scope.\r\n *\r\n * Scopes must be strictly nested and are analogous to stack frames, but\r\n * do not have to follow the stack frames. Instead it is recommended that they follow logical\r\n * nesting. You may want to use\r\n * [Event\r\n * Signatures](http://google.github.io/tracing-framework/instrumenting-code.html#custom-events)\r\n * as they are defined in WTF.\r\n *\r\n * Used to mark scope entry. The return value is used to leave the scope.\r\n *\r\n *     var myScope = wtfCreateScope('MyClass#myMethod(ascii someVal)');\r\n *\r\n *     someMethod() {\r\n *        var s = myScope('Foo'); // 'Foo' gets stored in tracing UI\r\n *        // DO SOME WORK HERE\r\n *        return wtfLeave(s, 123); // Return value 123\r\n *     }\r\n *\r\n * Note, adding try-finally block around the work to ensure that `wtfLeave` gets called can\r\n * negatively impact the performance of your application. For this reason we recommend that\r\n * you don't add them to ensure that `wtfLeave` gets called. In production `wtfLeave` is a noop and\r\n * so try-finally block has no value. When debugging perf issues, skipping `wtfLeave`, do to\r\n * exception, will produce incorrect trace, but presence of exception signifies logic error which\r\n * needs to be fixed before the app should be profiled. Add try-finally only when you expect that\r\n * an exception is expected during normal execution while profiling.\r\n *\r\n * @experimental\r\n */\r\nvar wtfCreateScope = wtfEnabled ? createScope : function (signature, flags) { return noopScope; };\r\n/**\r\n * Used to mark end of Scope.\r\n *\r\n * - `scope` to end.\r\n * - `returnValue` (optional) to be passed to the WTF.\r\n *\r\n * Returns the `returnValue for easy chaining.\r\n * @experimental\r\n */\r\nvar wtfLeave = wtfEnabled ? leave : function (s, r) { return r; };\r\n/**\r\n * Used to mark Async start. Async are similar to scope but they don't have to be strictly nested.\r\n * The return value is used in the call to [endAsync]. Async ranges only work if WTF has been\r\n * enabled.\r\n *\r\n *     someMethod() {\r\n *        var s = wtfStartTimeRange('HTTP:GET', 'some.url');\r\n *        var future = new Future.delay(5).then((_) {\r\n *          wtfEndTimeRange(s);\r\n *        });\r\n *     }\r\n * @experimental\r\n */\r\nvar wtfStartTimeRange = wtfEnabled ? startTimeRange : function (rangeType, action) { return null; };\r\n/**\r\n * Ends a async time range operation.\r\n * [range] is the return value from [wtfStartTimeRange] Async ranges only work if WTF has been\r\n * enabled.\r\n * @experimental\r\n */\r\nvar wtfEndTimeRange = wtfEnabled ? endTimeRange : function (r) { return null; };\r\n\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * Use by directives and components to emit custom Events.\r\n *\r\n * ### Examples\r\n *\r\n * In the following example, `Zippy` alternatively emits `open` and `close` events when its\r\n * title gets clicked:\r\n *\r\n * ```\r\n * @Component({\r\n *   selector: 'zippy',\r\n *   template: `\r\n *   <div class=\"zippy\">\r\n *     <div (click)=\"toggle()\">Toggle</div>\r\n *     <div [hidden]=\"!visible\">\r\n *       <ng-content></ng-content>\r\n *     </div>\r\n *  </div>`})\r\n * export class Zippy {\r\n *   visible: boolean = true;\r\n *   @Output() open: EventEmitter<any> = new EventEmitter();\r\n *   @Output() close: EventEmitter<any> = new EventEmitter();\r\n *\r\n *   toggle() {\r\n *     this.visible = !this.visible;\r\n *     if (this.visible) {\r\n *       this.open.emit(null);\r\n *     } else {\r\n *       this.close.emit(null);\r\n *     }\r\n *   }\r\n * }\r\n * ```\r\n *\r\n * The events payload can be accessed by the parameter `$event` on the components output event\r\n * handler:\r\n *\r\n * ```\r\n * <zippy (open)=\"onOpen($event)\" (close)=\"onClose($event)\"></zippy>\r\n * ```\r\n *\r\n * Uses Rx.Observable but provides an adapter to make it work as specified here:\r\n * https://github.com/jhusain/observable-spec\r\n *\r\n * Once a reference implementation of the spec is available, switch to it.\r\n *\r\n */\r\nvar EventEmitter = /** @class */ (function (_super) {\r\n    __extends(EventEmitter, _super);\r\n    /**\r\n     * Creates an instance of {@link EventEmitter}, which depending on `isAsync`,\r\n     * delivers events synchronously or asynchronously.\r\n     *\r\n     * @param isAsync By default, events are delivered synchronously (default value: `false`).\r\n     * Set to `true` for asynchronous event delivery.\r\n     */\r\n    function EventEmitter(isAsync) {\r\n        if (isAsync === void 0) { isAsync = false; }\r\n        var _this = _super.call(this) || this;\r\n        _this.__isAsync = isAsync;\r\n        return _this;\r\n    }\r\n    EventEmitter.prototype.emit = function (value) { _super.prototype.next.call(this, value); };\r\n    EventEmitter.prototype.subscribe = function (generatorOrNext, error, complete) {\r\n        var schedulerFn;\r\n        var errorFn = function (err) { return null; };\r\n        var completeFn = function () { return null; };\r\n        if (generatorOrNext && typeof generatorOrNext === 'object') {\r\n            schedulerFn = this.__isAsync ? function (value) {\r\n                setTimeout(function () { return generatorOrNext.next(value); });\r\n            } : function (value) { generatorOrNext.next(value); };\r\n            if (generatorOrNext.error) {\r\n                errorFn = this.__isAsync ? function (err) { setTimeout(function () { return generatorOrNext.error(err); }); } :\r\n                    function (err) { generatorOrNext.error(err); };\r\n            }\r\n            if (generatorOrNext.complete) {\r\n                completeFn = this.__isAsync ? function () { setTimeout(function () { return generatorOrNext.complete(); }); } :\r\n                    function () { generatorOrNext.complete(); };\r\n            }\r\n        }\r\n        else {\r\n            schedulerFn = this.__isAsync ? function (value) { setTimeout(function () { return generatorOrNext(value); }); } :\r\n                function (value) { generatorOrNext(value); };\r\n            if (error) {\r\n                errorFn =\r\n                    this.__isAsync ? function (err) { setTimeout(function () { return error(err); }); } : function (err) { error(err); };\r\n            }\r\n            if (complete) {\r\n                completeFn =\r\n                    this.__isAsync ? function () { setTimeout(function () { return complete(); }); } : function () { complete(); };\r\n            }\r\n        }\r\n        var sink = _super.prototype.subscribe.call(this, schedulerFn, errorFn, completeFn);\r\n        if (generatorOrNext instanceof Subscription) {\r\n            generatorOrNext.add(sink);\r\n        }\r\n        return sink;\r\n    };\r\n    return EventEmitter;\r\n}(Subject));\r\n\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * An injectable service for executing work inside or outside of the Angular zone.\r\n *\r\n * The most common use of this service is to optimize performance when starting a work consisting of\r\n * one or more asynchronous tasks that don't require UI updates or error handling to be handled by\r\n * Angular. Such tasks can be kicked off via {@link #runOutsideAngular} and if needed, these tasks\r\n * can reenter the Angular zone via {@link #run}.\r\n *\r\n * <!-- TODO: add/fix links to:\r\n *   - docs explaining zones and the use of zones in Angular and change-detection\r\n *   - link to runOutsideAngular/run (throughout this file!)\r\n *   -->\r\n *\r\n * ### Example\r\n *\r\n * ```\r\n * import {Component, NgZone} from '@angular/core';\r\n * import {NgIf} from '@angular/common';\r\n *\r\n * @Component({\r\n *   selector: 'ng-zone-demo',\r\n *   template: `\r\n *     <h2>Demo: NgZone</h2>\r\n *\r\n *     <p>Progress: {{progress}}%</p>\r\n *     <p *ngIf=\"progress >= 100\">Done processing {{label}} of Angular zone!</p>\r\n *\r\n *     <button (click)=\"processWithinAngularZone()\">Process within Angular zone</button>\r\n *     <button (click)=\"processOutsideOfAngularZone()\">Process outside of Angular zone</button>\r\n *   `,\r\n * })\r\n * export class NgZoneDemo {\r\n *   progress: number = 0;\r\n *   label: string;\r\n *\r\n *   constructor(private _ngZone: NgZone) {}\r\n *\r\n *   // Loop inside the Angular zone\r\n *   // so the UI DOES refresh after each setTimeout cycle\r\n *   processWithinAngularZone() {\r\n *     this.label = 'inside';\r\n *     this.progress = 0;\r\n *     this._increaseProgress(() => console.log('Inside Done!'));\r\n *   }\r\n *\r\n *   // Loop outside of the Angular zone\r\n *   // so the UI DOES NOT refresh after each setTimeout cycle\r\n *   processOutsideOfAngularZone() {\r\n *     this.label = 'outside';\r\n *     this.progress = 0;\r\n *     this._ngZone.runOutsideAngular(() => {\r\n *       this._increaseProgress(() => {\r\n *         // reenter the Angular zone and display done\r\n *         this._ngZone.run(() => { console.log('Outside Done!'); });\r\n *       });\r\n *     });\r\n *   }\r\n *\r\n *   _increaseProgress(doneCallback: () => void) {\r\n *     this.progress += 1;\r\n *     console.log(`Current progress: ${this.progress}%`);\r\n *\r\n *     if (this.progress < 100) {\r\n *       window.setTimeout(() => this._increaseProgress(doneCallback), 10);\r\n *     } else {\r\n *       doneCallback();\r\n *     }\r\n *   }\r\n * }\r\n * ```\r\n *\r\n * @experimental\r\n */\r\nvar NgZone = /** @class */ (function () {\r\n    function NgZone(_a) {\r\n        var _b = _a.enableLongStackTrace, enableLongStackTrace = _b === void 0 ? false : _b;\r\n        this.hasPendingMicrotasks = false;\r\n        this.hasPendingMacrotasks = false;\r\n        /**\r\n           * Whether there are no outstanding microtasks or macrotasks.\r\n           */\r\n        this.isStable = true;\r\n        /**\r\n           * Notifies when code enters Angular Zone. This gets fired first on VM Turn.\r\n           */\r\n        this.onUnstable = new EventEmitter(false);\r\n        /**\r\n           * Notifies when there is no more microtasks enqueued in the current VM Turn.\r\n           * This is a hint for Angular to do change detection, which may enqueue more microtasks.\r\n           * For this reason this event can fire multiple times per VM Turn.\r\n           */\r\n        this.onMicrotaskEmpty = new EventEmitter(false);\r\n        /**\r\n           * Notifies when the last `onMicrotaskEmpty` has run and there are no more microtasks, which\r\n           * implies we are about to relinquish VM turn.\r\n           * This event gets called just once.\r\n           */\r\n        this.onStable = new EventEmitter(false);\r\n        /**\r\n           * Notifies that an error has been delivered.\r\n           */\r\n        this.onError = new EventEmitter(false);\r\n        if (typeof Zone == 'undefined') {\r\n            throw new Error(\"In this configuration Angular requires Zone.js\");\r\n        }\r\n        Zone.assertZonePatched();\r\n        var self = this;\r\n        self._nesting = 0;\r\n        self._outer = self._inner = Zone.current;\r\n        if (Zone['wtfZoneSpec']) {\r\n            self._inner = self._inner.fork(Zone['wtfZoneSpec']);\r\n        }\r\n        if (Zone['TaskTrackingZoneSpec']) {\r\n            self._inner = self._inner.fork(new Zone['TaskTrackingZoneSpec']);\r\n        }\r\n        if (enableLongStackTrace && Zone['longStackTraceZoneSpec']) {\r\n            self._inner = self._inner.fork(Zone['longStackTraceZoneSpec']);\r\n        }\r\n        forkInnerZoneWithAngularBehavior(self);\r\n    }\r\n    NgZone.isInAngularZone = function () { return Zone.current.get('isAngularZone') === true; };\r\n    NgZone.assertInAngularZone = function () {\r\n        if (!NgZone.isInAngularZone()) {\r\n            throw new Error('Expected to be in Angular Zone, but it is not!');\r\n        }\r\n    };\r\n    NgZone.assertNotInAngularZone = function () {\r\n        if (NgZone.isInAngularZone()) {\r\n            throw new Error('Expected to not be in Angular Zone, but it is!');\r\n        }\r\n    };\r\n    /**\r\n     * Executes the `fn` function synchronously within the Angular zone and returns value returned by\r\n     * the function.\r\n     *\r\n     * Running functions via `run` allows you to reenter Angular zone from a task that was executed\r\n     * outside of the Angular zone (typically started via {@link #runOutsideAngular}).\r\n     *\r\n     * Any future tasks or microtasks scheduled from within this function will continue executing from\r\n     * within the Angular zone.\r\n     *\r\n     * If a synchronous error happens it will be rethrown and not reported via `onError`.\r\n     */\r\n    /**\r\n       * Executes the `fn` function synchronously within the Angular zone and returns value returned by\r\n       * the function.\r\n       *\r\n       * Running functions via `run` allows you to reenter Angular zone from a task that was executed\r\n       * outside of the Angular zone (typically started via {@link #runOutsideAngular}).\r\n       *\r\n       * Any future tasks or microtasks scheduled from within this function will continue executing from\r\n       * within the Angular zone.\r\n       *\r\n       * If a synchronous error happens it will be rethrown and not reported via `onError`.\r\n       */\r\n    NgZone.prototype.run = /**\r\n       * Executes the `fn` function synchronously within the Angular zone and returns value returned by\r\n       * the function.\r\n       *\r\n       * Running functions via `run` allows you to reenter Angular zone from a task that was executed\r\n       * outside of the Angular zone (typically started via {@link #runOutsideAngular}).\r\n       *\r\n       * Any future tasks or microtasks scheduled from within this function will continue executing from\r\n       * within the Angular zone.\r\n       *\r\n       * If a synchronous error happens it will be rethrown and not reported via `onError`.\r\n       */\r\n    function (fn, applyThis, applyArgs) {\r\n        return this._inner.run(fn, applyThis, applyArgs);\r\n    };\r\n    /**\r\n     * Executes the `fn` function synchronously within the Angular zone as a task and returns value\r\n     * returned by the function.\r\n     *\r\n     * Running functions via `run` allows you to reenter Angular zone from a task that was executed\r\n     * outside of the Angular zone (typically started via {@link #runOutsideAngular}).\r\n     *\r\n     * Any future tasks or microtasks scheduled from within this function will continue executing from\r\n     * within the Angular zone.\r\n     *\r\n     * If a synchronous error happens it will be rethrown and not reported via `onError`.\r\n     */\r\n    /**\r\n       * Executes the `fn` function synchronously within the Angular zone as a task and returns value\r\n       * returned by the function.\r\n       *\r\n       * Running functions via `run` allows you to reenter Angular zone from a task that was executed\r\n       * outside of the Angular zone (typically started via {@link #runOutsideAngular}).\r\n       *\r\n       * Any future tasks or microtasks scheduled from within this function will continue executing from\r\n       * within the Angular zone.\r\n       *\r\n       * If a synchronous error happens it will be rethrown and not reported via `onError`.\r\n       */\r\n    NgZone.prototype.runTask = /**\r\n       * Executes the `fn` function synchronously within the Angular zone as a task and returns value\r\n       * returned by the function.\r\n       *\r\n       * Running functions via `run` allows you to reenter Angular zone from a task that was executed\r\n       * outside of the Angular zone (typically started via {@link #runOutsideAngular}).\r\n       *\r\n       * Any future tasks or microtasks scheduled from within this function will continue executing from\r\n       * within the Angular zone.\r\n       *\r\n       * If a synchronous error happens it will be rethrown and not reported via `onError`.\r\n       */\r\n    function (fn, applyThis, applyArgs, name) {\r\n        var zone = this._inner;\r\n        var task = zone.scheduleEventTask('NgZoneEvent: ' + name, fn, EMPTY_PAYLOAD, noop, noop);\r\n        try {\r\n            return zone.runTask(task, applyThis, applyArgs);\r\n        }\r\n        finally {\r\n            zone.cancelTask(task);\r\n        }\r\n    };\r\n    /**\r\n     * Same as `run`, except that synchronous errors are caught and forwarded via `onError` and not\r\n     * rethrown.\r\n     */\r\n    /**\r\n       * Same as `run`, except that synchronous errors are caught and forwarded via `onError` and not\r\n       * rethrown.\r\n       */\r\n    NgZone.prototype.runGuarded = /**\r\n       * Same as `run`, except that synchronous errors are caught and forwarded via `onError` and not\r\n       * rethrown.\r\n       */\r\n    function (fn, applyThis, applyArgs) {\r\n        return this._inner.runGuarded(fn, applyThis, applyArgs);\r\n    };\r\n    /**\r\n     * Executes the `fn` function synchronously in Angular's parent zone and returns value returned by\r\n     * the function.\r\n     *\r\n     * Running functions via {@link #runOutsideAngular} allows you to escape Angular's zone and do\r\n     * work that\r\n     * doesn't trigger Angular change-detection or is subject to Angular's error handling.\r\n     *\r\n     * Any future tasks or microtasks scheduled from within this function will continue executing from\r\n     * outside of the Angular zone.\r\n     *\r\n     * Use {@link #run} to reenter the Angular zone and do work that updates the application model.\r\n     */\r\n    /**\r\n       * Executes the `fn` function synchronously in Angular's parent zone and returns value returned by\r\n       * the function.\r\n       *\r\n       * Running functions via {@link #runOutsideAngular} allows you to escape Angular's zone and do\r\n       * work that\r\n       * doesn't trigger Angular change-detection or is subject to Angular's error handling.\r\n       *\r\n       * Any future tasks or microtasks scheduled from within this function will continue executing from\r\n       * outside of the Angular zone.\r\n       *\r\n       * Use {@link #run} to reenter the Angular zone and do work that updates the application model.\r\n       */\r\n    NgZone.prototype.runOutsideAngular = /**\r\n       * Executes the `fn` function synchronously in Angular's parent zone and returns value returned by\r\n       * the function.\r\n       *\r\n       * Running functions via {@link #runOutsideAngular} allows you to escape Angular's zone and do\r\n       * work that\r\n       * doesn't trigger Angular change-detection or is subject to Angular's error handling.\r\n       *\r\n       * Any future tasks or microtasks scheduled from within this function will continue executing from\r\n       * outside of the Angular zone.\r\n       *\r\n       * Use {@link #run} to reenter the Angular zone and do work that updates the application model.\r\n       */\r\n    function (fn) {\r\n        return this._outer.run(fn);\r\n    };\r\n    return NgZone;\r\n}());\r\nfunction noop() { }\r\nvar EMPTY_PAYLOAD = {};\r\nfunction checkStable(zone) {\r\n    if (zone._nesting == 0 && !zone.hasPendingMicrotasks && !zone.isStable) {\r\n        try {\r\n            zone._nesting++;\r\n            zone.onMicrotaskEmpty.emit(null);\r\n        }\r\n        finally {\r\n            zone._nesting--;\r\n            if (!zone.hasPendingMicrotasks) {\r\n                try {\r\n                    zone.runOutsideAngular(function () { return zone.onStable.emit(null); });\r\n                }\r\n                finally {\r\n                    zone.isStable = true;\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\nfunction forkInnerZoneWithAngularBehavior(zone) {\r\n    zone._inner = zone._inner.fork({\r\n        name: 'angular',\r\n        properties: { 'isAngularZone': true },\r\n        onInvokeTask: function (delegate, current, target, task, applyThis, applyArgs) {\r\n            try {\r\n                onEnter(zone);\r\n                return delegate.invokeTask(target, task, applyThis, applyArgs);\r\n            }\r\n            finally {\r\n                onLeave(zone);\r\n            }\r\n        },\r\n        onInvoke: function (delegate, current, target, callback, applyThis, applyArgs, source) {\r\n            try {\r\n                onEnter(zone);\r\n                return delegate.invoke(target, callback, applyThis, applyArgs, source);\r\n            }\r\n            finally {\r\n                onLeave(zone);\r\n            }\r\n        },\r\n        onHasTask: function (delegate, current, target, hasTaskState) {\r\n            delegate.hasTask(target, hasTaskState);\r\n            if (current === target) {\r\n                // We are only interested in hasTask events which originate from our zone\r\n                // (A child hasTask event is not interesting to us)\r\n                if (hasTaskState.change == 'microTask') {\r\n                    zone.hasPendingMicrotasks = hasTaskState.microTask;\r\n                    checkStable(zone);\r\n                }\r\n                else if (hasTaskState.change == 'macroTask') {\r\n                    zone.hasPendingMacrotasks = hasTaskState.macroTask;\r\n                }\r\n            }\r\n        },\r\n        onHandleError: function (delegate, current, target, error) {\r\n            delegate.handleError(target, error);\r\n            zone.runOutsideAngular(function () { return zone.onError.emit(error); });\r\n            return false;\r\n        }\r\n    });\r\n}\r\nfunction onEnter(zone) {\r\n    zone._nesting++;\r\n    if (zone.isStable) {\r\n        zone.isStable = false;\r\n        zone.onUnstable.emit(null);\r\n    }\r\n}\r\nfunction onLeave(zone) {\r\n    zone._nesting--;\r\n    checkStable(zone);\r\n}\r\n/**\r\n * Provides a noop implementation of `NgZone` which does nothing. This zone requires explicit calls\r\n * to framework to perform rendering.\r\n */\r\nvar NoopNgZone = /** @class */ (function () {\r\n    function NoopNgZone() {\r\n        this.hasPendingMicrotasks = false;\r\n        this.hasPendingMacrotasks = false;\r\n        this.isStable = true;\r\n        this.onUnstable = new EventEmitter();\r\n        this.onMicrotaskEmpty = new EventEmitter();\r\n        this.onStable = new EventEmitter();\r\n        this.onError = new EventEmitter();\r\n    }\r\n    NoopNgZone.prototype.run = function (fn) { return fn(); };\r\n    NoopNgZone.prototype.runGuarded = function (fn) { return fn(); };\r\n    NoopNgZone.prototype.runOutsideAngular = function (fn) { return fn(); };\r\n    NoopNgZone.prototype.runTask = function (fn) { return fn(); };\r\n    return NoopNgZone;\r\n}());\r\n\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * The Testability service provides testing hooks that can be accessed from\r\n * the browser and by services such as Protractor. Each bootstrapped Angular\r\n * application on the page will have an instance of Testability.\r\n * @experimental\r\n */\r\nvar Testability = /** @class */ (function () {\r\n    function Testability(_ngZone) {\r\n        var _this = this;\r\n        this._ngZone = _ngZone;\r\n        this._pendingCount = 0;\r\n        this._isZoneStable = true;\r\n        /**\r\n           * Whether any work was done since the last 'whenStable' callback. This is\r\n           * useful to detect if this could have potentially destabilized another\r\n           * component while it is stabilizing.\r\n           * @internal\r\n           */\r\n        this._didWork = false;\r\n        this._callbacks = [];\r\n        this._watchAngularEvents();\r\n        _ngZone.run(function () { _this.taskTrackingZone = Zone.current.get('TaskTrackingZone'); });\r\n    }\r\n    Testability.prototype._watchAngularEvents = function () {\r\n        var _this = this;\r\n        this._ngZone.onUnstable.subscribe({\r\n            next: function () {\r\n                _this._didWork = true;\r\n                _this._isZoneStable = false;\r\n            }\r\n        });\r\n        this._ngZone.runOutsideAngular(function () {\r\n            _this._ngZone.onStable.subscribe({\r\n                next: function () {\r\n                    NgZone.assertNotInAngularZone();\r\n                    scheduleMicroTask(function () {\r\n                        _this._isZoneStable = true;\r\n                        _this._runCallbacksIfReady();\r\n                    });\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Increases the number of pending request\r\n     * @deprecated pending requests are now tracked with zones.\r\n     */\r\n    /**\r\n       * Increases the number of pending request\r\n       * @deprecated pending requests are now tracked with zones.\r\n       */\r\n    Testability.prototype.increasePendingRequestCount = /**\r\n       * Increases the number of pending request\r\n       * @deprecated pending requests are now tracked with zones.\r\n       */\r\n    function () {\r\n        this._pendingCount += 1;\r\n        this._didWork = true;\r\n        return this._pendingCount;\r\n    };\r\n    /**\r\n     * Decreases the number of pending request\r\n     * @deprecated pending requests are now tracked with zones\r\n     */\r\n    /**\r\n       * Decreases the number of pending request\r\n       * @deprecated pending requests are now tracked with zones\r\n       */\r\n    Testability.prototype.decreasePendingRequestCount = /**\r\n       * Decreases the number of pending request\r\n       * @deprecated pending requests are now tracked with zones\r\n       */\r\n    function () {\r\n        this._pendingCount -= 1;\r\n        if (this._pendingCount < 0) {\r\n            throw new Error('pending async requests below zero');\r\n        }\r\n        this._runCallbacksIfReady();\r\n        return this._pendingCount;\r\n    };\r\n    /**\r\n     * Whether an associated application is stable\r\n     */\r\n    /**\r\n       * Whether an associated application is stable\r\n       */\r\n    Testability.prototype.isStable = /**\r\n       * Whether an associated application is stable\r\n       */\r\n    function () {\r\n        return this._isZoneStable && this._pendingCount === 0 && !this._ngZone.hasPendingMacrotasks;\r\n    };\r\n    Testability.prototype._runCallbacksIfReady = function () {\r\n        var _this = this;\r\n        if (this.isStable()) {\r\n            // Schedules the call backs in a new frame so that it is always async.\r\n            scheduleMicroTask(function () {\r\n                while (_this._callbacks.length !== 0) {\r\n                    var cb = (_this._callbacks.pop());\r\n                    clearTimeout(cb.timeoutId);\r\n                    cb.doneCb(_this._didWork);\r\n                }\r\n                _this._didWork = false;\r\n            });\r\n        }\r\n        else {\r\n            // Still not stable, send updates.\r\n            var pending_1 = this.getPendingTasks();\r\n            this._callbacks = this._callbacks.filter(function (cb) {\r\n                if (cb.updateCb && cb.updateCb(pending_1)) {\r\n                    clearTimeout(cb.timeoutId);\r\n                    return false;\r\n                }\r\n                return true;\r\n            });\r\n            this._didWork = true;\r\n        }\r\n    };\r\n    Testability.prototype.getPendingTasks = function () {\r\n        if (!this.taskTrackingZone) {\r\n            return [];\r\n        }\r\n        return this.taskTrackingZone.macroTasks.map(function (t) {\r\n            return {\r\n                source: t.source,\r\n                isPeriodic: t.data.isPeriodic,\r\n                delay: t.data.delay,\r\n                // From TaskTrackingZone:\r\n                // https://github.com/angular/zone.js/blob/master/lib/zone-spec/task-tracking.ts#L40\r\n                creationLocation: t.creationLocation,\r\n                // Added by Zones for XHRs\r\n                // https://github.com/angular/zone.js/blob/master/lib/browser/browser.ts#L133\r\n                xhr: t.data.target\r\n            };\r\n        });\r\n    };\r\n    Testability.prototype.addCallback = function (cb, timeout, updateCb) {\r\n        var _this = this;\r\n        var timeoutId = -1;\r\n        if (timeout && timeout > 0) {\r\n            timeoutId = setTimeout(function () {\r\n                _this._callbacks = _this._callbacks.filter(function (cb) { return cb.timeoutId !== timeoutId; });\r\n                cb(_this._didWork, _this.getPendingTasks());\r\n            }, timeout);\r\n        }\r\n        this._callbacks.push({ doneCb: cb, timeoutId: timeoutId, updateCb: updateCb });\r\n    };\r\n    /**\r\n     * Wait for the application to be stable with a timeout. If the timeout is reached before that\r\n     * happens, the callback receives a list of the macro tasks that were pending, otherwise null.\r\n     *\r\n     * @param doneCb The callback to invoke when Angular is stable or the timeout expires\r\n     *    whichever comes first.\r\n     * @param timeout Optional. The maximum time to wait for Angular to become stable. If not\r\n     *    specified, whenStable() will wait forever.\r\n     * @param updateCb Optional. If specified, this callback will be invoked whenever the set of\r\n     *    pending macrotasks changes. If this callback returns true doneCb will not be invoked\r\n     *    and no further updates will be issued.\r\n     */\r\n    /**\r\n       * Wait for the application to be stable with a timeout. If the timeout is reached before that\r\n       * happens, the callback receives a list of the macro tasks that were pending, otherwise null.\r\n       *\r\n       * @param doneCb The callback to invoke when Angular is stable or the timeout expires\r\n       *    whichever comes first.\r\n       * @param timeout Optional. The maximum time to wait for Angular to become stable. If not\r\n       *    specified, whenStable() will wait forever.\r\n       * @param updateCb Optional. If specified, this callback will be invoked whenever the set of\r\n       *    pending macrotasks changes. If this callback returns true doneCb will not be invoked\r\n       *    and no further updates will be issued.\r\n       */\r\n    Testability.prototype.whenStable = /**\r\n       * Wait for the application to be stable with a timeout. If the timeout is reached before that\r\n       * happens, the callback receives a list of the macro tasks that were pending, otherwise null.\r\n       *\r\n       * @param doneCb The callback to invoke when Angular is stable or the timeout expires\r\n       *    whichever comes first.\r\n       * @param timeout Optional. The maximum time to wait for Angular to become stable. If not\r\n       *    specified, whenStable() will wait forever.\r\n       * @param updateCb Optional. If specified, this callback will be invoked whenever the set of\r\n       *    pending macrotasks changes. If this callback returns true doneCb will not be invoked\r\n       *    and no further updates will be issued.\r\n       */\r\n    function (doneCb, timeout, updateCb) {\r\n        if (updateCb && !this.taskTrackingZone) {\r\n            throw new Error('Task tracking zone is required when passing an update callback to ' +\r\n                'whenStable(). Is \"zone.js/dist/task-tracking.js\" loaded?');\r\n        }\r\n        // These arguments are 'Function' above to keep the public API simple.\r\n        this.addCallback(doneCb, timeout, updateCb);\r\n        this._runCallbacksIfReady();\r\n    };\r\n    /**\r\n     * Get the number of pending requests\r\n     * @deprecated pending requests are now tracked with zones\r\n     */\r\n    /**\r\n       * Get the number of pending requests\r\n       * @deprecated pending requests are now tracked with zones\r\n       */\r\n    Testability.prototype.getPendingRequestCount = /**\r\n       * Get the number of pending requests\r\n       * @deprecated pending requests are now tracked with zones\r\n       */\r\n    function () { return this._pendingCount; };\r\n    /**\r\n     * Find providers by name\r\n     * @param using The root element to search from\r\n     * @param provider The name of binding variable\r\n     * @param exactMatch Whether using exactMatch\r\n     */\r\n    /**\r\n       * Find providers by name\r\n       * @param using The root element to search from\r\n       * @param provider The name of binding variable\r\n       * @param exactMatch Whether using exactMatch\r\n       */\r\n    Testability.prototype.findProviders = /**\r\n       * Find providers by name\r\n       * @param using The root element to search from\r\n       * @param provider The name of binding variable\r\n       * @param exactMatch Whether using exactMatch\r\n       */\r\n    function (using, provider, exactMatch) {\r\n        // TODO(juliemr): implement.\r\n        return [];\r\n    };\r\n    Testability.decorators = [\r\n        { type: Injectable }\r\n    ];\r\n    /** @nocollapse */\r\n    Testability.ctorParameters = function () { return [\r\n        { type: NgZone, },\r\n    ]; };\r\n    return Testability;\r\n}());\r\n/**\r\n * A global registry of {@link Testability} instances for specific elements.\r\n * @experimental\r\n */\r\nvar TestabilityRegistry = /** @class */ (function () {\r\n    function TestabilityRegistry() {\r\n        /** @internal */\r\n        this._applications = new Map();\r\n        _testabilityGetter.addToWindow(this);\r\n    }\r\n    /**\r\n     * Registers an application with a testability hook so that it can be tracked\r\n     * @param token token of application, root element\r\n     * @param testability Testability hook\r\n     */\r\n    /**\r\n       * Registers an application with a testability hook so that it can be tracked\r\n       * @param token token of application, root element\r\n       * @param testability Testability hook\r\n       */\r\n    TestabilityRegistry.prototype.registerApplication = /**\r\n       * Registers an application with a testability hook so that it can be tracked\r\n       * @param token token of application, root element\r\n       * @param testability Testability hook\r\n       */\r\n    function (token, testability) {\r\n        this._applications.set(token, testability);\r\n    };\r\n    /**\r\n     * Unregisters an application.\r\n     * @param token token of application, root element\r\n     */\r\n    /**\r\n       * Unregisters an application.\r\n       * @param token token of application, root element\r\n       */\r\n    TestabilityRegistry.prototype.unregisterApplication = /**\r\n       * Unregisters an application.\r\n       * @param token token of application, root element\r\n       */\r\n    function (token) { this._applications.delete(token); };\r\n    /**\r\n     * Unregisters all applications\r\n     */\r\n    /**\r\n       * Unregisters all applications\r\n       */\r\n    TestabilityRegistry.prototype.unregisterAllApplications = /**\r\n       * Unregisters all applications\r\n       */\r\n    function () { this._applications.clear(); };\r\n    /**\r\n     * Get a testability hook associated with the application\r\n     * @param elem root element\r\n     */\r\n    /**\r\n       * Get a testability hook associated with the application\r\n       * @param elem root element\r\n       */\r\n    TestabilityRegistry.prototype.getTestability = /**\r\n       * Get a testability hook associated with the application\r\n       * @param elem root element\r\n       */\r\n    function (elem) { return this._applications.get(elem) || null; };\r\n    /**\r\n     * Get all registered testabilities\r\n     */\r\n    /**\r\n       * Get all registered testabilities\r\n       */\r\n    TestabilityRegistry.prototype.getAllTestabilities = /**\r\n       * Get all registered testabilities\r\n       */\r\n    function () { return Array.from(this._applications.values()); };\r\n    /**\r\n     * Get all registered applications(root elements)\r\n     */\r\n    /**\r\n       * Get all registered applications(root elements)\r\n       */\r\n    TestabilityRegistry.prototype.getAllRootElements = /**\r\n       * Get all registered applications(root elements)\r\n       */\r\n    function () { return Array.from(this._applications.keys()); };\r\n    /**\r\n     * Find testability of a node in the Tree\r\n     * @param elem node\r\n     * @param findInAncestors whether finding testability in ancestors if testability was not found in\r\n     * current node\r\n     */\r\n    /**\r\n       * Find testability of a node in the Tree\r\n       * @param elem node\r\n       * @param findInAncestors whether finding testability in ancestors if testability was not found in\r\n       * current node\r\n       */\r\n    TestabilityRegistry.prototype.findTestabilityInTree = /**\r\n       * Find testability of a node in the Tree\r\n       * @param elem node\r\n       * @param findInAncestors whether finding testability in ancestors if testability was not found in\r\n       * current node\r\n       */\r\n    function (elem, findInAncestors) {\r\n        if (findInAncestors === void 0) { findInAncestors = true; }\r\n        return _testabilityGetter.findTestabilityInTree(this, elem, findInAncestors);\r\n    };\r\n    TestabilityRegistry.decorators = [\r\n        { type: Injectable }\r\n    ];\r\n    /** @nocollapse */\r\n    TestabilityRegistry.ctorParameters = function () { return []; };\r\n    return TestabilityRegistry;\r\n}());\r\nvar _NoopGetTestability = /** @class */ (function () {\r\n    function _NoopGetTestability() {\r\n    }\r\n    _NoopGetTestability.prototype.addToWindow = function (registry) { };\r\n    _NoopGetTestability.prototype.findTestabilityInTree = function (registry, elem, findInAncestors) {\r\n        return null;\r\n    };\r\n    return _NoopGetTestability;\r\n}());\r\n/**\r\n * Set the {@link GetTestability} implementation used by the Angular testing framework.\r\n * @experimental\r\n */\r\nfunction setTestabilityGetter(getter) {\r\n    _testabilityGetter = getter;\r\n}\r\nvar _testabilityGetter = new _NoopGetTestability();\r\n\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nvar _devMode = true;\r\nvar _runModeLocked = false;\r\nvar _platform;\r\nvar ALLOW_MULTIPLE_PLATFORMS = new InjectionToken('AllowMultipleToken');\r\n/**\r\n * Disable Angular's development mode, which turns off assertions and other\r\n * checks within the framework.\r\n *\r\n * One important assertion this disables verifies that a change detection pass\r\n * does not result in additional changes to any bindings (also known as\r\n * unidirectional data flow).\r\n *\r\n *\r\n */\r\nfunction enableProdMode() {\r\n    if (_runModeLocked) {\r\n        throw new Error('Cannot enable prod mode after platform setup.');\r\n    }\r\n    _devMode = false;\r\n}\r\n/**\r\n * Returns whether Angular is in development mode. After called once,\r\n * the value is locked and won't change any more.\r\n *\r\n * By default, this is true, unless a user calls `enableProdMode` before calling this.\r\n *\r\n * @experimental APIs related to application bootstrap are currently under review.\r\n */\r\nfunction isDevMode() {\r\n    _runModeLocked = true;\r\n    return _devMode;\r\n}\r\n/**\r\n * A token for third-party components that can register themselves with NgProbe.\r\n *\r\n * @experimental\r\n */\r\nvar NgProbeToken = /** @class */ (function () {\r\n    function NgProbeToken(name, token) {\r\n        this.name = name;\r\n        this.token = token;\r\n    }\r\n    return NgProbeToken;\r\n}());\r\n/**\r\n * Creates a platform.\r\n * Platforms have to be eagerly created via this function.\r\n *\r\n * @experimental APIs related to application bootstrap are currently under review.\r\n */\r\nfunction createPlatform(injector) {\r\n    if (_platform && !_platform.destroyed &&\r\n        !_platform.injector.get(ALLOW_MULTIPLE_PLATFORMS, false)) {\r\n        throw new Error('There can be only one platform. Destroy the previous one to create a new one.');\r\n    }\r\n    _platform = injector.get(PlatformRef);\r\n    var inits = injector.get(PLATFORM_INITIALIZER, null);\r\n    if (inits)\r\n        inits.forEach(function (init) { return init(); });\r\n    return _platform;\r\n}\r\n/**\r\n * Creates a factory for a platform\r\n *\r\n * @experimental APIs related to application bootstrap are currently under review.\r\n */\r\nfunction createPlatformFactory(parentPlatformFactory, name, providers) {\r\n    if (providers === void 0) { providers = []; }\r\n    var desc = \"Platform: \" + name;\r\n    var marker = new InjectionToken(desc);\r\n    return function (extraProviders) {\r\n        if (extraProviders === void 0) { extraProviders = []; }\r\n        var platform = getPlatform();\r\n        if (!platform || platform.injector.get(ALLOW_MULTIPLE_PLATFORMS, false)) {\r\n            if (parentPlatformFactory) {\r\n                parentPlatformFactory(providers.concat(extraProviders).concat({ provide: marker, useValue: true }));\r\n            }\r\n            else {\r\n                var injectedProviders = providers.concat(extraProviders).concat({ provide: marker, useValue: true });\r\n                createPlatform(Injector.create({ providers: injectedProviders, name: desc }));\r\n            }\r\n        }\r\n        return assertPlatform(marker);\r\n    };\r\n}\r\n/**\r\n * Checks that there currently is a platform which contains the given token as a provider.\r\n *\r\n * @experimental APIs related to application bootstrap are currently under review.\r\n */\r\nfunction assertPlatform(requiredToken) {\r\n    var platform = getPlatform();\r\n    if (!platform) {\r\n        throw new Error('No platform exists!');\r\n    }\r\n    if (!platform.injector.get(requiredToken, null)) {\r\n        throw new Error('A platform with a different configuration has been created. Please destroy it first.');\r\n    }\r\n    return platform;\r\n}\r\n/**\r\n * Destroy the existing platform.\r\n *\r\n * @experimental APIs related to application bootstrap are currently under review.\r\n */\r\nfunction destroyPlatform() {\r\n    if (_platform && !_platform.destroyed) {\r\n        _platform.destroy();\r\n    }\r\n}\r\n/**\r\n * Returns the current platform.\r\n *\r\n * @experimental APIs related to application bootstrap are currently under review.\r\n */\r\nfunction getPlatform() {\r\n    return _platform && !_platform.destroyed ? _platform : null;\r\n}\r\n/**\r\n * The Angular platform is the entry point for Angular on a web page. Each page\r\n * has exactly one platform, and services (such as reflection) which are common\r\n * to every Angular application running on the page are bound in its scope.\r\n *\r\n * A page's platform is initialized implicitly when a platform is created via a platform factory\r\n * (e.g. {@link platformBrowser}), or explicitly by calling the {@link createPlatform} function.\r\n *\r\n *\r\n */\r\nvar PlatformRef = /** @class */ (function () {\r\n    /** @internal */\r\n    function PlatformRef(_injector) {\r\n        this._injector = _injector;\r\n        this._modules = [];\r\n        this._destroyListeners = [];\r\n        this._destroyed = false;\r\n    }\r\n    /**\r\n     * Creates an instance of an `@NgModule` for the given platform\r\n     * for offline compilation.\r\n     *\r\n     * ## Simple Example\r\n     *\r\n     * ```typescript\r\n     * my_module.ts:\r\n     *\r\n     * @NgModule({\r\n     *   imports: [BrowserModule]\r\n     * })\r\n     * class MyModule {}\r\n     *\r\n     * main.ts:\r\n     * import {MyModuleNgFactory} from './my_module.ngfactory';\r\n     * import {platformBrowser} from '@angular/platform-browser';\r\n     *\r\n     * let moduleRef = platformBrowser().bootstrapModuleFactory(MyModuleNgFactory);\r\n     * ```\r\n     *\r\n     * @experimental APIs related to application bootstrap are currently under review.\r\n     */\r\n    /**\r\n       * Creates an instance of an `@NgModule` for the given platform\r\n       * for offline compilation.\r\n       *\r\n       * ## Simple Example\r\n       *\r\n       * ```typescript\r\n       * my_module.ts:\r\n       *\r\n       * @NgModule({\r\n       *   imports: [BrowserModule]\r\n       * })\r\n       * class MyModule {}\r\n       *\r\n       * main.ts:\r\n       * import {MyModuleNgFactory} from './my_module.ngfactory';\r\n       * import {platformBrowser} from '@angular/platform-browser';\r\n       *\r\n       * let moduleRef = platformBrowser().bootstrapModuleFactory(MyModuleNgFactory);\r\n       * ```\r\n       *\r\n       * @experimental APIs related to application bootstrap are currently under review.\r\n       */\r\n    PlatformRef.prototype.bootstrapModuleFactory = /**\r\n       * Creates an instance of an `@NgModule` for the given platform\r\n       * for offline compilation.\r\n       *\r\n       * ## Simple Example\r\n       *\r\n       * ```typescript\r\n       * my_module.ts:\r\n       *\r\n       * @NgModule({\r\n       *   imports: [BrowserModule]\r\n       * })\r\n       * class MyModule {}\r\n       *\r\n       * main.ts:\r\n       * import {MyModuleNgFactory} from './my_module.ngfactory';\r\n       * import {platformBrowser} from '@angular/platform-browser';\r\n       *\r\n       * let moduleRef = platformBrowser().bootstrapModuleFactory(MyModuleNgFactory);\r\n       * ```\r\n       *\r\n       * @experimental APIs related to application bootstrap are currently under review.\r\n       */\r\n    function (moduleFactory, options) {\r\n        var _this = this;\r\n        // Note: We need to create the NgZone _before_ we instantiate the module,\r\n        // as instantiating the module creates some providers eagerly.\r\n        // So we create a mini parent injector that just contains the new NgZone and\r\n        // pass that as parent to the NgModuleFactory.\r\n        var ngZoneOption = options ? options.ngZone : undefined;\r\n        var ngZone = getNgZone(ngZoneOption);\r\n        var providers = [{ provide: NgZone, useValue: ngZone }];\r\n        // Attention: Don't use ApplicationRef.run here,\r\n        // as we want to be sure that all possible constructor calls are inside `ngZone.run`!\r\n        return ngZone.run(function () {\r\n            var ngZoneInjector = Injector.create({ providers: providers, parent: _this.injector, name: moduleFactory.moduleType.name });\r\n            var moduleRef = moduleFactory.create(ngZoneInjector);\r\n            var exceptionHandler = moduleRef.injector.get(ErrorHandler, null);\r\n            if (!exceptionHandler) {\r\n                throw new Error('No ErrorHandler. Is platform module (BrowserModule) included?');\r\n            }\r\n            moduleRef.onDestroy(function () { return remove(_this._modules, moduleRef); });\r\n            ngZone.runOutsideAngular(function () {\r\n                return ngZone.onError.subscribe({ next: function (error) { exceptionHandler.handleError(error); } });\r\n            });\r\n            return _callAndReportToErrorHandler(exceptionHandler, (ngZone), function () {\r\n                var initStatus = moduleRef.injector.get(ApplicationInitStatus);\r\n                initStatus.runInitializers();\r\n                return initStatus.donePromise.then(function () {\r\n                    _this._moduleDoBootstrap(moduleRef);\r\n                    return moduleRef;\r\n                });\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Creates an instance of an `@NgModule` for a given platform using the given runtime compiler.\r\n     *\r\n     * ## Simple Example\r\n     *\r\n     * ```typescript\r\n     * @NgModule({\r\n     *   imports: [BrowserModule]\r\n     * })\r\n     * class MyModule {}\r\n     *\r\n     * let moduleRef = platformBrowser().bootstrapModule(MyModule);\r\n     * ```\r\n     *\r\n     */\r\n    /**\r\n       * Creates an instance of an `@NgModule` for a given platform using the given runtime compiler.\r\n       *\r\n       * ## Simple Example\r\n       *\r\n       * ```typescript\r\n       * @NgModule({\r\n       *   imports: [BrowserModule]\r\n       * })\r\n       * class MyModule {}\r\n       *\r\n       * let moduleRef = platformBrowser().bootstrapModule(MyModule);\r\n       * ```\r\n       *\r\n       */\r\n    PlatformRef.prototype.bootstrapModule = /**\r\n       * Creates an instance of an `@NgModule` for a given platform using the given runtime compiler.\r\n       *\r\n       * ## Simple Example\r\n       *\r\n       * ```typescript\r\n       * @NgModule({\r\n       *   imports: [BrowserModule]\r\n       * })\r\n       * class MyModule {}\r\n       *\r\n       * let moduleRef = platformBrowser().bootstrapModule(MyModule);\r\n       * ```\r\n       *\r\n       */\r\n    function (moduleType, compilerOptions) {\r\n        var _this = this;\r\n        if (compilerOptions === void 0) { compilerOptions = []; }\r\n        var compilerFactory = this.injector.get(CompilerFactory);\r\n        var options = optionsReducer({}, compilerOptions);\r\n        var compiler = compilerFactory.createCompiler([options]);\r\n        return compiler.compileModuleAsync(moduleType)\r\n            .then(function (moduleFactory) { return _this.bootstrapModuleFactory(moduleFactory, options); });\r\n    };\r\n    PlatformRef.prototype._moduleDoBootstrap = function (moduleRef) {\r\n        var appRef = moduleRef.injector.get(ApplicationRef);\r\n        if (moduleRef._bootstrapComponents.length > 0) {\r\n            moduleRef._bootstrapComponents.forEach(function (f) { return appRef.bootstrap(f); });\r\n        }\r\n        else if (moduleRef.instance.ngDoBootstrap) {\r\n            moduleRef.instance.ngDoBootstrap(appRef);\r\n        }\r\n        else {\r\n            throw new Error(\"The module \" + stringify(moduleRef.instance.constructor) + \" was bootstrapped, but it does not declare \\\"@NgModule.bootstrap\\\" components nor a \\\"ngDoBootstrap\\\" method. \" +\r\n                \"Please define one of these.\");\r\n        }\r\n        this._modules.push(moduleRef);\r\n    };\r\n    /**\r\n     * Register a listener to be called when the platform is disposed.\r\n     */\r\n    /**\r\n       * Register a listener to be called when the platform is disposed.\r\n       */\r\n    PlatformRef.prototype.onDestroy = /**\r\n       * Register a listener to be called when the platform is disposed.\r\n       */\r\n    function (callback) { this._destroyListeners.push(callback); };\r\n    Object.defineProperty(PlatformRef.prototype, \"injector\", {\r\n        /**\r\n         * Retrieve the platform {@link Injector}, which is the parent injector for\r\n         * every Angular application on the page and provides singleton providers.\r\n         */\r\n        get: /**\r\n           * Retrieve the platform {@link Injector}, which is the parent injector for\r\n           * every Angular application on the page and provides singleton providers.\r\n           */\r\n        function () { return this._injector; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Destroy the Angular platform and all Angular applications on the page.\r\n     */\r\n    /**\r\n       * Destroy the Angular platform and all Angular applications on the page.\r\n       */\r\n    PlatformRef.prototype.destroy = /**\r\n       * Destroy the Angular platform and all Angular applications on the page.\r\n       */\r\n    function () {\r\n        if (this._destroyed) {\r\n            throw new Error('The platform has already been destroyed!');\r\n        }\r\n        this._modules.slice().forEach(function (module) { return module.destroy(); });\r\n        this._destroyListeners.forEach(function (listener) { return listener(); });\r\n        this._destroyed = true;\r\n    };\r\n    Object.defineProperty(PlatformRef.prototype, \"destroyed\", {\r\n        get: function () { return this._destroyed; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    PlatformRef.decorators = [\r\n        { type: Injectable }\r\n    ];\r\n    /** @nocollapse */\r\n    PlatformRef.ctorParameters = function () { return [\r\n        { type: Injector, },\r\n    ]; };\r\n    return PlatformRef;\r\n}());\r\nfunction getNgZone(ngZoneOption) {\r\n    var ngZone;\r\n    if (ngZoneOption === 'noop') {\r\n        ngZone = new NoopNgZone();\r\n    }\r\n    else {\r\n        ngZone = (ngZoneOption === 'zone.js' ? undefined : ngZoneOption) ||\r\n            new NgZone({ enableLongStackTrace: isDevMode() });\r\n    }\r\n    return ngZone;\r\n}\r\nfunction _callAndReportToErrorHandler(errorHandler, ngZone, callback) {\r\n    try {\r\n        var result = callback();\r\n        if (isPromise(result)) {\r\n            return result.catch(function (e) {\r\n                ngZone.runOutsideAngular(function () { return errorHandler.handleError(e); });\r\n                // rethrow as the exception handler might not do it\r\n                throw e;\r\n            });\r\n        }\r\n        return result;\r\n    }\r\n    catch (e) {\r\n        ngZone.runOutsideAngular(function () { return errorHandler.handleError(e); });\r\n        // rethrow as the exception handler might not do it\r\n        throw e;\r\n    }\r\n}\r\nfunction optionsReducer(dst, objs) {\r\n    if (Array.isArray(objs)) {\r\n        dst = objs.reduce(optionsReducer, dst);\r\n    }\r\n    else {\r\n        dst = __assign({}, dst, objs);\r\n    }\r\n    return dst;\r\n}\r\n/**\r\n * A reference to an Angular application running on a page.\r\n *\r\n *\r\n */\r\nvar ApplicationRef = /** @class */ (function () {\r\n    /** @internal */\r\n    function ApplicationRef(_zone, _console, _injector, _exceptionHandler, _componentFactoryResolver, _initStatus) {\r\n        var _this = this;\r\n        this._zone = _zone;\r\n        this._console = _console;\r\n        this._injector = _injector;\r\n        this._exceptionHandler = _exceptionHandler;\r\n        this._componentFactoryResolver = _componentFactoryResolver;\r\n        this._initStatus = _initStatus;\r\n        this._bootstrapListeners = [];\r\n        this._views = [];\r\n        this._runningTick = false;\r\n        this._enforceNoNewChanges = false;\r\n        this._stable = true;\r\n        /**\r\n           * Get a list of component types registered to this application.\r\n           * This list is populated even before the component is created.\r\n           */\r\n        this.componentTypes = [];\r\n        /**\r\n           * Get a list of components registered to this application.\r\n           */\r\n        this.components = [];\r\n        this._enforceNoNewChanges = isDevMode();\r\n        this._zone.onMicrotaskEmpty.subscribe({ next: function () { _this._zone.run(function () { _this.tick(); }); } });\r\n        var isCurrentlyStable = new Observable(function (observer) {\r\n            _this._stable = _this._zone.isStable && !_this._zone.hasPendingMacrotasks &&\r\n                !_this._zone.hasPendingMicrotasks;\r\n            _this._zone.runOutsideAngular(function () {\r\n                observer.next(_this._stable);\r\n                observer.complete();\r\n            });\r\n        });\r\n        var isStable = new Observable(function (observer) {\r\n            // Create the subscription to onStable outside the Angular Zone so that\r\n            // the callback is run outside the Angular Zone.\r\n            var stableSub;\r\n            _this._zone.runOutsideAngular(function () {\r\n                stableSub = _this._zone.onStable.subscribe(function () {\r\n                    NgZone.assertNotInAngularZone();\r\n                    // Check whether there are no pending macro/micro tasks in the next tick\r\n                    // to allow for NgZone to update the state.\r\n                    scheduleMicroTask(function () {\r\n                        if (!_this._stable && !_this._zone.hasPendingMacrotasks &&\r\n                            !_this._zone.hasPendingMicrotasks) {\r\n                            _this._stable = true;\r\n                            observer.next(true);\r\n                        }\r\n                    });\r\n                });\r\n            });\r\n            var unstableSub = _this._zone.onUnstable.subscribe(function () {\r\n                NgZone.assertInAngularZone();\r\n                if (_this._stable) {\r\n                    _this._stable = false;\r\n                    _this._zone.runOutsideAngular(function () { observer.next(false); });\r\n                }\r\n            });\r\n            return function () {\r\n                stableSub.unsubscribe();\r\n                unstableSub.unsubscribe();\r\n            };\r\n        });\r\n        this.isStable =\r\n            merge(isCurrentlyStable, isStable.pipe(share()));\r\n    }\r\n    /**\r\n     * Bootstrap a new component at the root level of the application.\r\n     *\r\n     * ### Bootstrap process\r\n     *\r\n     * When bootstrapping a new root component into an application, Angular mounts the\r\n     * specified application component onto DOM elements identified by the [componentType]'s\r\n     * selector and kicks off automatic change detection to finish initializing the component.\r\n     *\r\n     * Optionally, a component can be mounted onto a DOM element that does not match the\r\n     * [componentType]'s selector.\r\n     *\r\n     * ### Example\r\n     * {@example core/ts/platform/platform.ts region='longform'}\r\n     */\r\n    /**\r\n       * Bootstrap a new component at the root level of the application.\r\n       *\r\n       * ### Bootstrap process\r\n       *\r\n       * When bootstrapping a new root component into an application, Angular mounts the\r\n       * specified application component onto DOM elements identified by the [componentType]'s\r\n       * selector and kicks off automatic change detection to finish initializing the component.\r\n       *\r\n       * Optionally, a component can be mounted onto a DOM element that does not match the\r\n       * [componentType]'s selector.\r\n       *\r\n       * ### Example\r\n       * {@example core/ts/platform/platform.ts region='longform'}\r\n       */\r\n    ApplicationRef.prototype.bootstrap = /**\r\n       * Bootstrap a new component at the root level of the application.\r\n       *\r\n       * ### Bootstrap process\r\n       *\r\n       * When bootstrapping a new root component into an application, Angular mounts the\r\n       * specified application component onto DOM elements identified by the [componentType]'s\r\n       * selector and kicks off automatic change detection to finish initializing the component.\r\n       *\r\n       * Optionally, a component can be mounted onto a DOM element that does not match the\r\n       * [componentType]'s selector.\r\n       *\r\n       * ### Example\r\n       * {@example core/ts/platform/platform.ts region='longform'}\r\n       */\r\n    function (componentOrFactory, rootSelectorOrNode) {\r\n        var _this = this;\r\n        if (!this._initStatus.done) {\r\n            throw new Error('Cannot bootstrap as there are still asynchronous initializers running. Bootstrap components in the `ngDoBootstrap` method of the root module.');\r\n        }\r\n        var componentFactory;\r\n        if (componentOrFactory instanceof ComponentFactory) {\r\n            componentFactory = componentOrFactory;\r\n        }\r\n        else {\r\n            componentFactory =\r\n                (this._componentFactoryResolver.resolveComponentFactory(componentOrFactory));\r\n        }\r\n        this.componentTypes.push(componentFactory.componentType);\r\n        // Create a factory associated with the current module if it's not bound to some other\r\n        var ngModule = componentFactory instanceof ComponentFactoryBoundToModule ?\r\n            null :\r\n            this._injector.get(NgModuleRef);\r\n        var selectorOrNode = rootSelectorOrNode || componentFactory.selector;\r\n        var compRef = componentFactory.create(Injector.NULL, [], selectorOrNode, ngModule);\r\n        compRef.onDestroy(function () { _this._unloadComponent(compRef); });\r\n        var testability = compRef.injector.get(Testability, null);\r\n        if (testability) {\r\n            compRef.injector.get(TestabilityRegistry)\r\n                .registerApplication(compRef.location.nativeElement, testability);\r\n        }\r\n        this._loadComponent(compRef);\r\n        if (isDevMode()) {\r\n            this._console.log(\"Angular is running in the development mode. Call enableProdMode() to enable the production mode.\");\r\n        }\r\n        return compRef;\r\n    };\r\n    /**\r\n     * Invoke this method to explicitly process change detection and its side-effects.\r\n     *\r\n     * In development mode, `tick()` also performs a second change detection cycle to ensure that no\r\n     * further changes are detected. If additional changes are picked up during this second cycle,\r\n     * bindings in the app have side-effects that cannot be resolved in a single change detection\r\n     * pass.\r\n     * In this case, Angular throws an error, since an Angular application can only have one change\r\n     * detection pass during which all change detection must complete.\r\n     */\r\n    /**\r\n       * Invoke this method to explicitly process change detection and its side-effects.\r\n       *\r\n       * In development mode, `tick()` also performs a second change detection cycle to ensure that no\r\n       * further changes are detected. If additional changes are picked up during this second cycle,\r\n       * bindings in the app have side-effects that cannot be resolved in a single change detection\r\n       * pass.\r\n       * In this case, Angular throws an error, since an Angular application can only have one change\r\n       * detection pass during which all change detection must complete.\r\n       */\r\n    ApplicationRef.prototype.tick = /**\r\n       * Invoke this method to explicitly process change detection and its side-effects.\r\n       *\r\n       * In development mode, `tick()` also performs a second change detection cycle to ensure that no\r\n       * further changes are detected. If additional changes are picked up during this second cycle,\r\n       * bindings in the app have side-effects that cannot be resolved in a single change detection\r\n       * pass.\r\n       * In this case, Angular throws an error, since an Angular application can only have one change\r\n       * detection pass during which all change detection must complete.\r\n       */\r\n    function () {\r\n        var _this = this;\r\n        if (this._runningTick) {\r\n            throw new Error('ApplicationRef.tick is called recursively');\r\n        }\r\n        var scope = ApplicationRef._tickScope();\r\n        try {\r\n            this._runningTick = true;\r\n            this._views.forEach(function (view) { return view.detectChanges(); });\r\n            if (this._enforceNoNewChanges) {\r\n                this._views.forEach(function (view) { return view.checkNoChanges(); });\r\n            }\r\n        }\r\n        catch (e) {\r\n            // Attention: Don't rethrow as it could cancel subscriptions to Observables!\r\n            this._zone.runOutsideAngular(function () { return _this._exceptionHandler.handleError(e); });\r\n        }\r\n        finally {\r\n            this._runningTick = false;\r\n            wtfLeave(scope);\r\n        }\r\n    };\r\n    /**\r\n     * Attaches a view so that it will be dirty checked.\r\n     * The view will be automatically detached when it is destroyed.\r\n     * This will throw if the view is already attached to a ViewContainer.\r\n     */\r\n    /**\r\n       * Attaches a view so that it will be dirty checked.\r\n       * The view will be automatically detached when it is destroyed.\r\n       * This will throw if the view is already attached to a ViewContainer.\r\n       */\r\n    ApplicationRef.prototype.attachView = /**\r\n       * Attaches a view so that it will be dirty checked.\r\n       * The view will be automatically detached when it is destroyed.\r\n       * This will throw if the view is already attached to a ViewContainer.\r\n       */\r\n    function (viewRef) {\r\n        var view = viewRef;\r\n        this._views.push(view);\r\n        view.attachToAppRef(this);\r\n    };\r\n    /**\r\n     * Detaches a view from dirty checking again.\r\n     */\r\n    /**\r\n       * Detaches a view from dirty checking again.\r\n       */\r\n    ApplicationRef.prototype.detachView = /**\r\n       * Detaches a view from dirty checking again.\r\n       */\r\n    function (viewRef) {\r\n        var view = viewRef;\r\n        remove(this._views, view);\r\n        view.detachFromAppRef();\r\n    };\r\n    ApplicationRef.prototype._loadComponent = function (componentRef) {\r\n        this.attachView(componentRef.hostView);\r\n        this.tick();\r\n        this.components.push(componentRef);\r\n        // Get the listeners lazily to prevent DI cycles.\r\n        var listeners = this._injector.get(APP_BOOTSTRAP_LISTENER, []).concat(this._bootstrapListeners);\r\n        listeners.forEach(function (listener) { return listener(componentRef); });\r\n    };\r\n    ApplicationRef.prototype._unloadComponent = function (componentRef) {\r\n        this.detachView(componentRef.hostView);\r\n        remove(this.components, componentRef);\r\n    };\r\n    /** @internal */\r\n    /** @internal */\r\n    ApplicationRef.prototype.ngOnDestroy = /** @internal */\r\n    function () {\r\n        // TODO(alxhub): Dispose of the NgZone.\r\n        this._views.slice().forEach(function (view) { return view.destroy(); });\r\n    };\r\n    Object.defineProperty(ApplicationRef.prototype, \"viewCount\", {\r\n        /**\r\n         * Returns the number of attached views.\r\n         */\r\n        get: /**\r\n           * Returns the number of attached views.\r\n           */\r\n        function () { return this._views.length; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /** @internal */\r\n    ApplicationRef._tickScope = wtfCreateScope('ApplicationRef#tick()');\r\n    ApplicationRef.decorators = [\r\n        { type: Injectable }\r\n    ];\r\n    /** @nocollapse */\r\n    ApplicationRef.ctorParameters = function () { return [\r\n        { type: NgZone, },\r\n        { type: Console, },\r\n        { type: Injector, },\r\n        { type: ErrorHandler, },\r\n        { type: ComponentFactoryResolver, },\r\n        { type: ApplicationInitStatus, },\r\n    ]; };\r\n    return ApplicationRef;\r\n}());\r\nfunction remove(list, el) {\r\n    var index = list.indexOf(el);\r\n    if (index > -1) {\r\n        list.splice(index, 1);\r\n    }\r\n}\r\n\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * @deprecated Use `RendererType2` (and `Renderer2`) instead.\r\n */\r\nvar RenderComponentType = /** @class */ (function () {\r\n    function RenderComponentType(id, templateUrl, slotCount, encapsulation, styles, animations) {\r\n        this.id = id;\r\n        this.templateUrl = templateUrl;\r\n        this.slotCount = slotCount;\r\n        this.encapsulation = encapsulation;\r\n        this.styles = styles;\r\n        this.animations = animations;\r\n    }\r\n    return RenderComponentType;\r\n}());\r\n/**\r\n * @deprecated Debug info is handeled internally in the view engine now.\r\n */\r\nvar RenderDebugInfo = /** @class */ (function () {\r\n    function RenderDebugInfo() {\r\n    }\r\n    return RenderDebugInfo;\r\n}());\r\n/**\r\n * @deprecated Use the `Renderer2` instead.\r\n */\r\nvar Renderer = /** @class */ (function () {\r\n    function Renderer() {\r\n    }\r\n    return Renderer;\r\n}());\r\nvar Renderer2Interceptor = new InjectionToken('Renderer2Interceptor');\r\n/**\r\n * Injectable service that provides a low-level interface for modifying the UI.\r\n *\r\n * Use this service to bypass Angular's templating and make custom UI changes that can't be\r\n * expressed declaratively. For example if you need to set a property or an attribute whose name is\r\n * not statically known, use {@link Renderer#setElementProperty setElementProperty} or\r\n * {@link Renderer#setElementAttribute setElementAttribute} respectively.\r\n *\r\n * If you are implementing a custom renderer, you must implement this interface.\r\n *\r\n * The default Renderer implementation is `DomRenderer`. Also available is `WebWorkerRenderer`.\r\n *\r\n * @deprecated Use `RendererFactory2` instead.\r\n */\r\nvar RootRenderer = /** @class */ (function () {\r\n    function RootRenderer() {\r\n    }\r\n    return RootRenderer;\r\n}());\r\n/**\r\n * @experimental\r\n */\r\nvar RendererFactory2 = /** @class */ (function () {\r\n    function RendererFactory2() {\r\n    }\r\n    return RendererFactory2;\r\n}());\r\n/**\r\n * @experimental\r\n */\r\n/**\r\n * @experimental\r\n */\r\nvar RendererStyleFlags2;\r\n/**\r\n * @experimental\r\n */\r\n(function (RendererStyleFlags2) {\r\n    RendererStyleFlags2[RendererStyleFlags2[\"Important\"] = 1] = \"Important\";\r\n    RendererStyleFlags2[RendererStyleFlags2[\"DashCase\"] = 2] = \"DashCase\";\r\n})(RendererStyleFlags2 || (RendererStyleFlags2 = {}));\r\n/**\r\n * @experimental\r\n */\r\nvar Renderer2 = /** @class */ (function () {\r\n    function Renderer2() {\r\n    }\r\n    return Renderer2;\r\n}());\r\n\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * A wrapper around a native element inside of a View.\r\n *\r\n * An `ElementRef` is backed by a render-specific element. In the browser, this is usually a DOM\r\n * element.\r\n *\r\n * @security Permitting direct access to the DOM can make your application more vulnerable to\r\n * XSS attacks. Carefully review any use of `ElementRef` in your code. For more detail, see the\r\n * [Security Guide](http://g.co/ng/security).\r\n *\r\n *\r\n */\r\n// Note: We don't expose things like `Injector`, `ViewContainer`, ... here,\r\n// i.e. users have to ask for what they need. With that, we can build better analysis tools\r\n// and could do better codegen in the future.\r\nvar ElementRef = /** @class */ (function () {\r\n    function ElementRef(nativeElement) {\r\n        this.nativeElement = nativeElement;\r\n    }\r\n    return ElementRef;\r\n}());\r\n\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * Used to load ng module factories.\r\n *\r\n */\r\nvar NgModuleFactoryLoader = /** @class */ (function () {\r\n    function NgModuleFactoryLoader() {\r\n    }\r\n    return NgModuleFactoryLoader;\r\n}());\r\nvar moduleFactories = new Map();\r\n/**\r\n * Registers a loaded module. Should only be called from generated NgModuleFactory code.\r\n * @experimental\r\n */\r\nfunction registerModuleFactory(id, factory) {\r\n    var existing = moduleFactories.get(id);\r\n    if (existing) {\r\n        throw new Error(\"Duplicate module registered for \" + id + \" - \" + existing.moduleType.name + \" vs \" + factory.moduleType.name);\r\n    }\r\n    moduleFactories.set(id, factory);\r\n}\r\n\r\n/**\r\n * Returns the NgModuleFactory with the given id, if it exists and has been loaded.\r\n * Factories for modules that do not specify an `id` cannot be retrieved. Throws if the module\r\n * cannot be found.\r\n * @experimental\r\n */\r\nfunction getModuleFactory(id) {\r\n    var factory = moduleFactories.get(id);\r\n    if (!factory)\r\n        throw new Error(\"No module with ID \" + id + \" loaded\");\r\n    return factory;\r\n}\r\n\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * An unmodifiable list of items that Angular keeps up to date when the state\r\n * of the application changes.\r\n *\r\n * The type of object that {@link ViewChildren}, {@link ContentChildren}, and {@link QueryList}\r\n * provide.\r\n *\r\n * Implements an iterable interface, therefore it can be used in both ES6\r\n * javascript `for (var i of items)` loops as well as in Angular templates with\r\n * `*ngFor=\"let i of myList\"`.\r\n *\r\n * Changes can be observed by subscribing to the changes `Observable`.\r\n *\r\n * NOTE: In the future this class will implement an `Observable` interface.\r\n *\r\n * ### Example ([live demo](http://plnkr.co/edit/RX8sJnQYl9FWuSCWme5z?p=preview))\r\n * ```typescript\r\n * @Component({...})\r\n * class Container {\r\n *   @ViewChildren(Item) items:QueryList<Item>;\r\n * }\r\n * ```\r\n *\r\n */\r\nvar QueryList = /** @class */ (function () {\r\n    function QueryList() {\r\n        this.dirty = true;\r\n        this._results = [];\r\n        this.changes = new EventEmitter();\r\n        this.length = 0;\r\n    }\r\n    /**\r\n     * See\r\n     * [Array.map](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map)\r\n     */\r\n    /**\r\n       * See\r\n       * [Array.map](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map)\r\n       */\r\n    QueryList.prototype.map = /**\r\n       * See\r\n       * [Array.map](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map)\r\n       */\r\n    function (fn) { return this._results.map(fn); };\r\n    /**\r\n     * See\r\n     * [Array.filter](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter)\r\n     */\r\n    /**\r\n       * See\r\n       * [Array.filter](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter)\r\n       */\r\n    QueryList.prototype.filter = /**\r\n       * See\r\n       * [Array.filter](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter)\r\n       */\r\n    function (fn) {\r\n        return this._results.filter(fn);\r\n    };\r\n    /**\r\n     * See\r\n     * [Array.find](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find)\r\n     */\r\n    /**\r\n       * See\r\n       * [Array.find](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find)\r\n       */\r\n    QueryList.prototype.find = /**\r\n       * See\r\n       * [Array.find](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find)\r\n       */\r\n    function (fn) {\r\n        return this._results.find(fn);\r\n    };\r\n    /**\r\n     * See\r\n     * [Array.reduce](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce)\r\n     */\r\n    /**\r\n       * See\r\n       * [Array.reduce](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce)\r\n       */\r\n    QueryList.prototype.reduce = /**\r\n       * See\r\n       * [Array.reduce](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce)\r\n       */\r\n    function (fn, init) {\r\n        return this._results.reduce(fn, init);\r\n    };\r\n    /**\r\n     * See\r\n     * [Array.forEach](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach)\r\n     */\r\n    /**\r\n       * See\r\n       * [Array.forEach](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach)\r\n       */\r\n    QueryList.prototype.forEach = /**\r\n       * See\r\n       * [Array.forEach](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach)\r\n       */\r\n    function (fn) { this._results.forEach(fn); };\r\n    /**\r\n     * See\r\n     * [Array.some](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some)\r\n     */\r\n    /**\r\n       * See\r\n       * [Array.some](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some)\r\n       */\r\n    QueryList.prototype.some = /**\r\n       * See\r\n       * [Array.some](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some)\r\n       */\r\n    function (fn) {\r\n        return this._results.some(fn);\r\n    };\r\n    QueryList.prototype.toArray = function () { return this._results.slice(); };\r\n    QueryList.prototype[getSymbolIterator()] = function () { return this._results[getSymbolIterator()](); };\r\n    QueryList.prototype.toString = function () { return this._results.toString(); };\r\n    QueryList.prototype.reset = function (res) {\r\n        this._results = flatten(res);\r\n        this.dirty = false;\r\n        this.length = this._results.length;\r\n        this.last = this._results[this.length - 1];\r\n        this.first = this._results[0];\r\n    };\r\n    QueryList.prototype.notifyOnChanges = function () { this.changes.emit(this); };\r\n    /** internal */\r\n    /** internal */\r\n    QueryList.prototype.setDirty = /** internal */\r\n    function () { this.dirty = true; };\r\n    /** internal */\r\n    /** internal */\r\n    QueryList.prototype.destroy = /** internal */\r\n    function () {\r\n        this.changes.complete();\r\n        this.changes.unsubscribe();\r\n    };\r\n    return QueryList;\r\n}());\r\nfunction flatten(list) {\r\n    return list.reduce(function (flat, item) {\r\n        var flatItem = Array.isArray(item) ? flatten(item) : item;\r\n        return flat.concat(flatItem);\r\n    }, []);\r\n}\r\n\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nvar _SEPARATOR = '#';\r\nvar FACTORY_CLASS_SUFFIX = 'NgFactory';\r\n/**\r\n * Configuration for SystemJsNgModuleLoader.\r\n * token.\r\n *\r\n * @experimental\r\n */\r\nvar SystemJsNgModuleLoaderConfig = /** @class */ (function () {\r\n    function SystemJsNgModuleLoaderConfig() {\r\n    }\r\n    return SystemJsNgModuleLoaderConfig;\r\n}());\r\nvar DEFAULT_CONFIG = {\r\n    factoryPathPrefix: '',\r\n    factoryPathSuffix: '.ngfactory',\r\n};\r\n/**\r\n * NgModuleFactoryLoader that uses SystemJS to load NgModuleFactory\r\n * @experimental\r\n */\r\nvar SystemJsNgModuleLoader = /** @class */ (function () {\r\n    function SystemJsNgModuleLoader(_compiler, config) {\r\n        this._compiler = _compiler;\r\n        this._config = config || DEFAULT_CONFIG;\r\n    }\r\n    SystemJsNgModuleLoader.prototype.load = function (path) {\r\n        var offlineMode = this._compiler instanceof Compiler;\r\n        return offlineMode ? this.loadFactory(path) : this.loadAndCompile(path);\r\n    };\r\n    SystemJsNgModuleLoader.prototype.loadAndCompile = function (path) {\r\n        var _this = this;\r\n        var _a = __read(path.split(_SEPARATOR), 2), module = _a[0], exportName = _a[1];\r\n        if (exportName === undefined) {\r\n            exportName = 'default';\r\n        }\r\n        return System.import(module)\r\n            .then(function (module) { return module[exportName]; })\r\n            .then(function (type) { return checkNotEmpty(type, module, exportName); })\r\n            .then(function (type) { return _this._compiler.compileModuleAsync(type); });\r\n    };\r\n    SystemJsNgModuleLoader.prototype.loadFactory = function (path) {\r\n        var _a = __read(path.split(_SEPARATOR), 2), module = _a[0], exportName = _a[1];\r\n        var factoryClassSuffix = FACTORY_CLASS_SUFFIX;\r\n        if (exportName === undefined) {\r\n            exportName = 'default';\r\n            factoryClassSuffix = '';\r\n        }\r\n        return System.import(this._config.factoryPathPrefix + module + this._config.factoryPathSuffix)\r\n            .then(function (module) { return module[exportName + factoryClassSuffix]; })\r\n            .then(function (factory) { return checkNotEmpty(factory, module, exportName); });\r\n    };\r\n    SystemJsNgModuleLoader.decorators = [\r\n        { type: Injectable }\r\n    ];\r\n    /** @nocollapse */\r\n    SystemJsNgModuleLoader.ctorParameters = function () { return [\r\n        { type: Compiler, },\r\n        { type: SystemJsNgModuleLoaderConfig, decorators: [{ type: Optional },] },\r\n    ]; };\r\n    return SystemJsNgModuleLoader;\r\n}());\r\nfunction checkNotEmpty(value, modulePath, exportName) {\r\n    if (!value) {\r\n        throw new Error(\"Cannot find '\" + exportName + \"' in '\" + modulePath + \"'\");\r\n    }\r\n    return value;\r\n}\r\n\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * Represents an Embedded Template that can be used to instantiate Embedded Views.\r\n *\r\n * You can access a `TemplateRef`, in two ways. Via a directive placed on a `<ng-template>` element\r\n * (or directive prefixed with `*`) and have the `TemplateRef` for this Embedded View injected into\r\n * the constructor of the directive using the `TemplateRef` Token. Alternatively you can query for\r\n * the `TemplateRef` from a Component or a Directive via {@link Query}.\r\n *\r\n * To instantiate Embedded Views based on a Template, use {@link ViewContainerRef#\r\n * createEmbeddedView}, which will create the View and attach it to the View Container.\r\n *\r\n */\r\nvar TemplateRef = /** @class */ (function () {\r\n    function TemplateRef() {\r\n    }\r\n    return TemplateRef;\r\n}());\r\n\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * Represents a container where one or more Views can be attached.\r\n *\r\n * The container can contain two kinds of Views. Host Views, created by instantiating a\r\n * {@link Component} via {@link #createComponent}, and Embedded Views, created by instantiating an\r\n * {@link TemplateRef Embedded Template} via {@link #createEmbeddedView}.\r\n *\r\n * The location of the View Container within the containing View is specified by the Anchor\r\n * `element`. Each View Container can have only one Anchor Element and each Anchor Element can only\r\n * have a single View Container.\r\n *\r\n * Root elements of Views attached to this container become siblings of the Anchor Element in\r\n * the Rendered View.\r\n *\r\n * To access a `ViewContainerRef` of an Element, you can either place a {@link Directive} injected\r\n * with `ViewContainerRef` on the Element, or you obtain it via a {@link ViewChild} query.\r\n *\r\n */\r\nvar ViewContainerRef = /** @class */ (function () {\r\n    function ViewContainerRef() {\r\n    }\r\n    return ViewContainerRef;\r\n}());\r\n\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nvar ChangeDetectorRef = /** @class */ (function () {\r\n    function ChangeDetectorRef() {\r\n    }\r\n    return ChangeDetectorRef;\r\n}());\r\n\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nvar ViewRef = /** @class */ (function (_super) {\r\n    __extends(ViewRef, _super);\r\n    function ViewRef() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    return ViewRef;\r\n}(ChangeDetectorRef));\r\n/**\r\n * Represents an Angular View.\r\n *\r\n * <!-- TODO: move the next two paragraphs to the dev guide -->\r\n * A View is a fundamental building block of the application UI. It is the smallest grouping of\r\n * Elements which are created and destroyed together.\r\n *\r\n * Properties of elements in a View can change, but the structure (number and order) of elements in\r\n * a View cannot. Changing the structure of Elements can only be done by inserting, moving or\r\n * removing nested Views via a {@link ViewContainerRef}. Each View can contain many View Containers.\r\n * <!-- /TODO -->\r\n *\r\n * ### Example\r\n *\r\n * Given this template...\r\n *\r\n * ```\r\n * Count: {{items.length}}\r\n * <ul>\r\n *   <li *ngFor=\"let  item of items\">{{item}}</li>\r\n * </ul>\r\n * ```\r\n *\r\n * We have two {@link TemplateRef}s:\r\n *\r\n * Outer {@link TemplateRef}:\r\n * ```\r\n * Count: {{items.length}}\r\n * <ul>\r\n *   <ng-template ngFor let-item [ngForOf]=\"items\"></ng-template>\r\n * </ul>\r\n * ```\r\n *\r\n * Inner {@link TemplateRef}:\r\n * ```\r\n *   <li>{{item}}</li>\r\n * ```\r\n *\r\n * Notice that the original template is broken down into two separate {@link TemplateRef}s.\r\n *\r\n * The outer/inner {@link TemplateRef}s are then assembled into views like so:\r\n *\r\n * ```\r\n * <!-- ViewRef: outer-0 -->\r\n * Count: 2\r\n * <ul>\r\n *   <ng-template view-container-ref></ng-template>\r\n *   <!-- ViewRef: inner-1 --><li>first</li><!-- /ViewRef: inner-1 -->\r\n *   <!-- ViewRef: inner-2 --><li>second</li><!-- /ViewRef: inner-2 -->\r\n * </ul>\r\n * <!-- /ViewRef: outer-0 -->\r\n * ```\r\n * @experimental\r\n */\r\nvar EmbeddedViewRef = /** @class */ (function (_super) {\r\n    __extends(EmbeddedViewRef, _super);\r\n    function EmbeddedViewRef() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    return EmbeddedViewRef;\r\n}(ViewRef));\r\n\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nvar EventListener = /** @class */ (function () {\r\n    function EventListener(name, callback) {\r\n        this.name = name;\r\n        this.callback = callback;\r\n    }\r\n    return EventListener;\r\n}());\r\n/**\r\n * @experimental All debugging apis are currently experimental.\r\n */\r\nvar DebugNode = /** @class */ (function () {\r\n    function DebugNode(nativeNode, parent, _debugContext) {\r\n        this._debugContext = _debugContext;\r\n        this.nativeNode = nativeNode;\r\n        if (parent && parent instanceof DebugElement) {\r\n            parent.addChild(this);\r\n        }\r\n        else {\r\n            this.parent = null;\r\n        }\r\n        this.listeners = [];\r\n    }\r\n    Object.defineProperty(DebugNode.prototype, \"injector\", {\r\n        get: function () { return this._debugContext.injector; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DebugNode.prototype, \"componentInstance\", {\r\n        get: function () { return this._debugContext.component; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DebugNode.prototype, \"context\", {\r\n        get: function () { return this._debugContext.context; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DebugNode.prototype, \"references\", {\r\n        get: function () { return this._debugContext.references; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DebugNode.prototype, \"providerTokens\", {\r\n        get: function () { return this._debugContext.providerTokens; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return DebugNode;\r\n}());\r\n/**\r\n * @experimental All debugging apis are currently experimental.\r\n */\r\nvar DebugElement = /** @class */ (function (_super) {\r\n    __extends(DebugElement, _super);\r\n    function DebugElement(nativeNode, parent, _debugContext) {\r\n        var _this = _super.call(this, nativeNode, parent, _debugContext) || this;\r\n        _this.properties = {};\r\n        _this.attributes = {};\r\n        _this.classes = {};\r\n        _this.styles = {};\r\n        _this.childNodes = [];\r\n        _this.nativeElement = nativeNode;\r\n        return _this;\r\n    }\r\n    DebugElement.prototype.addChild = function (child) {\r\n        if (child) {\r\n            this.childNodes.push(child);\r\n            child.parent = this;\r\n        }\r\n    };\r\n    DebugElement.prototype.removeChild = function (child) {\r\n        var childIndex = this.childNodes.indexOf(child);\r\n        if (childIndex !== -1) {\r\n            child.parent = null;\r\n            this.childNodes.splice(childIndex, 1);\r\n        }\r\n    };\r\n    DebugElement.prototype.insertChildrenAfter = function (child, newChildren) {\r\n        var _this = this;\r\n        var siblingIndex = this.childNodes.indexOf(child);\r\n        if (siblingIndex !== -1) {\r\n            (_a = this.childNodes).splice.apply(_a, __spread([siblingIndex + 1, 0], newChildren));\r\n            newChildren.forEach(function (c) {\r\n                if (c.parent) {\r\n                    c.parent.removeChild(c);\r\n                }\r\n                c.parent = _this;\r\n            });\r\n        }\r\n        var _a;\r\n    };\r\n    DebugElement.prototype.insertBefore = function (refChild, newChild) {\r\n        var refIndex = this.childNodes.indexOf(refChild);\r\n        if (refIndex === -1) {\r\n            this.addChild(newChild);\r\n        }\r\n        else {\r\n            if (newChild.parent) {\r\n                newChild.parent.removeChild(newChild);\r\n            }\r\n            newChild.parent = this;\r\n            this.childNodes.splice(refIndex, 0, newChild);\r\n        }\r\n    };\r\n    DebugElement.prototype.query = function (predicate) {\r\n        var results = this.queryAll(predicate);\r\n        return results[0] || null;\r\n    };\r\n    DebugElement.prototype.queryAll = function (predicate) {\r\n        var matches = [];\r\n        _queryElementChildren(this, predicate, matches);\r\n        return matches;\r\n    };\r\n    DebugElement.prototype.queryAllNodes = function (predicate) {\r\n        var matches = [];\r\n        _queryNodeChildren(this, predicate, matches);\r\n        return matches;\r\n    };\r\n    Object.defineProperty(DebugElement.prototype, \"children\", {\r\n        get: function () {\r\n            return this.childNodes.filter(function (node) { return node instanceof DebugElement; });\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    DebugElement.prototype.triggerEventHandler = function (eventName, eventObj) {\r\n        this.listeners.forEach(function (listener) {\r\n            if (listener.name == eventName) {\r\n                listener.callback(eventObj);\r\n            }\r\n        });\r\n    };\r\n    return DebugElement;\r\n}(DebugNode));\r\n/**\r\n * @experimental\r\n */\r\nfunction asNativeElements(debugEls) {\r\n    return debugEls.map(function (el) { return el.nativeElement; });\r\n}\r\nfunction _queryElementChildren(element, predicate, matches) {\r\n    element.childNodes.forEach(function (node) {\r\n        if (node instanceof DebugElement) {\r\n            if (predicate(node)) {\r\n                matches.push(node);\r\n            }\r\n            _queryElementChildren(node, predicate, matches);\r\n        }\r\n    });\r\n}\r\nfunction _queryNodeChildren(parentNode, predicate, matches) {\r\n    if (parentNode instanceof DebugElement) {\r\n        parentNode.childNodes.forEach(function (node) {\r\n            if (predicate(node)) {\r\n                matches.push(node);\r\n            }\r\n            if (node instanceof DebugElement) {\r\n                _queryNodeChildren(node, predicate, matches);\r\n            }\r\n        });\r\n    }\r\n}\r\n// Need to keep the nodes in a global Map so that multiple angular apps are supported.\r\nvar _nativeNodeToDebugNode = new Map();\r\n/**\r\n * @experimental\r\n */\r\nfunction getDebugNode(nativeNode) {\r\n    return _nativeNodeToDebugNode.get(nativeNode) || null;\r\n}\r\n\r\nfunction indexDebugNode(node) {\r\n    _nativeNodeToDebugNode.set(node.nativeNode, node);\r\n}\r\nfunction removeDebugNodeFromIndex(node) {\r\n    _nativeNodeToDebugNode.delete(node.nativeNode);\r\n}\r\n\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nfunction devModeEqual(a, b) {\r\n    var isListLikeIterableA = isListLikeIterable(a);\r\n    var isListLikeIterableB = isListLikeIterable(b);\r\n    if (isListLikeIterableA && isListLikeIterableB) {\r\n        return areIterablesEqual(a, b, devModeEqual);\r\n    }\r\n    else {\r\n        var isAObject = a && (typeof a === 'object' || typeof a === 'function');\r\n        var isBObject = b && (typeof b === 'object' || typeof b === 'function');\r\n        if (!isListLikeIterableA && isAObject && !isListLikeIterableB && isBObject) {\r\n            return true;\r\n        }\r\n        else {\r\n            return looseIdentical(a, b);\r\n        }\r\n    }\r\n}\r\n/**\r\n * Indicates that the result of a {@link Pipe} transformation has changed even though the\r\n * reference has not changed.\r\n *\r\n * Wrapped values are unwrapped automatically during the change detection, and the unwrapped value\r\n * is stored.\r\n *\r\n * Example:\r\n *\r\n * ```\r\n * if (this._latestValue === this._latestReturnedValue) {\r\n *    return this._latestReturnedValue;\r\n *  } else {\r\n *    this._latestReturnedValue = this._latestValue;\r\n *    return WrappedValue.wrap(this._latestValue); // this will force update\r\n *  }\r\n * ```\r\n *\r\n */\r\nvar WrappedValue = /** @class */ (function () {\r\n    function WrappedValue(value) {\r\n        this.wrapped = value;\r\n    }\r\n    /** Creates a wrapped value. */\r\n    /** Creates a wrapped value. */\r\n    WrappedValue.wrap = /** Creates a wrapped value. */\r\n    function (value) { return new WrappedValue(value); };\r\n    /**\r\n     * Returns the underlying value of a wrapped value.\r\n     * Returns the given `value` when it is not wrapped.\r\n     **/\r\n    /**\r\n       * Returns the underlying value of a wrapped value.\r\n       * Returns the given `value` when it is not wrapped.\r\n       **/\r\n    WrappedValue.unwrap = /**\r\n       * Returns the underlying value of a wrapped value.\r\n       * Returns the given `value` when it is not wrapped.\r\n       **/\r\n    function (value) { return WrappedValue.isWrapped(value) ? value.wrapped : value; };\r\n    /** Returns true if `value` is a wrapped value. */\r\n    /** Returns true if `value` is a wrapped value. */\r\n    WrappedValue.isWrapped = /** Returns true if `value` is a wrapped value. */\r\n    function (value) { return value instanceof WrappedValue; };\r\n    return WrappedValue;\r\n}());\r\n/**\r\n * Represents a basic change from a previous to a new value.\r\n *\r\n */\r\nvar SimpleChange = /** @class */ (function () {\r\n    function SimpleChange(previousValue, currentValue, firstChange) {\r\n        this.previousValue = previousValue;\r\n        this.currentValue = currentValue;\r\n        this.firstChange = firstChange;\r\n    }\r\n    /**\r\n     * Check whether the new value is the first value assigned.\r\n     */\r\n    /**\r\n       * Check whether the new value is the first value assigned.\r\n       */\r\n    SimpleChange.prototype.isFirstChange = /**\r\n       * Check whether the new value is the first value assigned.\r\n       */\r\n    function () { return this.firstChange; };\r\n    return SimpleChange;\r\n}());\r\nfunction isListLikeIterable(obj) {\r\n    if (!isJsObject(obj))\r\n        return false;\r\n    return Array.isArray(obj) ||\r\n        (!(obj instanceof Map) && // JS Map are iterables but return entries as [k, v]\r\n            // JS Map are iterables but return entries as [k, v]\r\n            getSymbolIterator() in obj); // JS Iterable have a Symbol.iterator prop\r\n}\r\nfunction areIterablesEqual(a, b, comparator) {\r\n    var iterator1 = a[getSymbolIterator()]();\r\n    var iterator2 = b[getSymbolIterator()]();\r\n    while (true) {\r\n        var item1 = iterator1.next();\r\n        var item2 = iterator2.next();\r\n        if (item1.done && item2.done)\r\n            return true;\r\n        if (item1.done || item2.done)\r\n            return false;\r\n        if (!comparator(item1.value, item2.value))\r\n            return false;\r\n    }\r\n}\r\nfunction iterateListLike(obj, fn) {\r\n    if (Array.isArray(obj)) {\r\n        for (var i = 0; i < obj.length; i++) {\r\n            fn(obj[i]);\r\n        }\r\n    }\r\n    else {\r\n        var iterator = obj[getSymbolIterator()]();\r\n        var item = void 0;\r\n        while (!((item = iterator.next()).done)) {\r\n            fn(item.value);\r\n        }\r\n    }\r\n}\r\nfunction isJsObject(o) {\r\n    return o !== null && (typeof o === 'function' || typeof o === 'object');\r\n}\r\n\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nvar DefaultIterableDifferFactory = /** @class */ (function () {\r\n    function DefaultIterableDifferFactory() {\r\n    }\r\n    DefaultIterableDifferFactory.prototype.supports = function (obj) { return isListLikeIterable(obj); };\r\n    DefaultIterableDifferFactory.prototype.create = function (trackByFn) {\r\n        return new DefaultIterableDiffer(trackByFn);\r\n    };\r\n    return DefaultIterableDifferFactory;\r\n}());\r\nvar trackByIdentity = function (index, item) { return item; };\r\n/**\r\n * @deprecated v4.0.0 - Should not be part of public API.\r\n */\r\nvar DefaultIterableDiffer = /** @class */ (function () {\r\n    function DefaultIterableDiffer(trackByFn) {\r\n        this.length = 0;\r\n        // Keeps track of the used records at any point in time (during & across `_check()` calls)\r\n        this._linkedRecords = null;\r\n        // Keeps track of the removed records at any point in time during `_check()` calls.\r\n        this._unlinkedRecords = null;\r\n        this._previousItHead = null;\r\n        this._itHead = null;\r\n        this._itTail = null;\r\n        this._additionsHead = null;\r\n        this._additionsTail = null;\r\n        this._movesHead = null;\r\n        this._movesTail = null;\r\n        this._removalsHead = null;\r\n        this._removalsTail = null;\r\n        // Keeps track of records where custom track by is the same, but item identity has changed\r\n        this._identityChangesHead = null;\r\n        this._identityChangesTail = null;\r\n        this._trackByFn = trackByFn || trackByIdentity;\r\n    }\r\n    DefaultIterableDiffer.prototype.forEachItem = function (fn) {\r\n        var record;\r\n        for (record = this._itHead; record !== null; record = record._next) {\r\n            fn(record);\r\n        }\r\n    };\r\n    DefaultIterableDiffer.prototype.forEachOperation = function (fn) {\r\n        var nextIt = this._itHead;\r\n        var nextRemove = this._removalsHead;\r\n        var addRemoveOffset = 0;\r\n        var moveOffsets = null;\r\n        while (nextIt || nextRemove) {\r\n            // Figure out which is the next record to process\r\n            // Order: remove, add, move\r\n            var record = !nextRemove ||\r\n                nextIt &&\r\n                    (nextIt.currentIndex) <\r\n                        getPreviousIndex(nextRemove, addRemoveOffset, moveOffsets) ?\r\n                nextIt :\r\n                nextRemove;\r\n            var adjPreviousIndex = getPreviousIndex(record, addRemoveOffset, moveOffsets);\r\n            var currentIndex = record.currentIndex;\r\n            // consume the item, and adjust the addRemoveOffset and update moveDistance if necessary\r\n            if (record === nextRemove) {\r\n                addRemoveOffset--;\r\n                nextRemove = nextRemove._nextRemoved;\r\n            }\r\n            else {\r\n                nextIt = nextIt._next;\r\n                if (record.previousIndex == null) {\r\n                    addRemoveOffset++;\r\n                }\r\n                else {\r\n                    // INVARIANT:  currentIndex < previousIndex\r\n                    if (!moveOffsets)\r\n                        moveOffsets = [];\r\n                    var localMovePreviousIndex = adjPreviousIndex - addRemoveOffset;\r\n                    var localCurrentIndex = (currentIndex) - addRemoveOffset;\r\n                    if (localMovePreviousIndex != localCurrentIndex) {\r\n                        for (var i = 0; i < localMovePreviousIndex; i++) {\r\n                            var offset = i < moveOffsets.length ? moveOffsets[i] : (moveOffsets[i] = 0);\r\n                            var index = offset + i;\r\n                            if (localCurrentIndex <= index && index < localMovePreviousIndex) {\r\n                                moveOffsets[i] = offset + 1;\r\n                            }\r\n                        }\r\n                        var previousIndex = record.previousIndex;\r\n                        moveOffsets[previousIndex] = localCurrentIndex - localMovePreviousIndex;\r\n                    }\r\n                }\r\n            }\r\n            if (adjPreviousIndex !== currentIndex) {\r\n                fn(record, adjPreviousIndex, currentIndex);\r\n            }\r\n        }\r\n    };\r\n    DefaultIterableDiffer.prototype.forEachPreviousItem = function (fn) {\r\n        var record;\r\n        for (record = this._previousItHead; record !== null; record = record._nextPrevious) {\r\n            fn(record);\r\n        }\r\n    };\r\n    DefaultIterableDiffer.prototype.forEachAddedItem = function (fn) {\r\n        var record;\r\n        for (record = this._additionsHead; record !== null; record = record._nextAdded) {\r\n            fn(record);\r\n        }\r\n    };\r\n    DefaultIterableDiffer.prototype.forEachMovedItem = function (fn) {\r\n        var record;\r\n        for (record = this._movesHead; record !== null; record = record._nextMoved) {\r\n            fn(record);\r\n        }\r\n    };\r\n    DefaultIterableDiffer.prototype.forEachRemovedItem = function (fn) {\r\n        var record;\r\n        for (record = this._removalsHead; record !== null; record = record._nextRemoved) {\r\n            fn(record);\r\n        }\r\n    };\r\n    DefaultIterableDiffer.prototype.forEachIdentityChange = function (fn) {\r\n        var record;\r\n        for (record = this._identityChangesHead; record !== null; record = record._nextIdentityChange) {\r\n            fn(record);\r\n        }\r\n    };\r\n    DefaultIterableDiffer.prototype.diff = function (collection) {\r\n        if (collection == null)\r\n            collection = [];\r\n        if (!isListLikeIterable(collection)) {\r\n            throw new Error(\"Error trying to diff '\" + stringify(collection) + \"'. Only arrays and iterables are allowed\");\r\n        }\r\n        if (this.check(collection)) {\r\n            return this;\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    };\r\n    DefaultIterableDiffer.prototype.onDestroy = function () { };\r\n    DefaultIterableDiffer.prototype.check = function (collection) {\r\n        var _this = this;\r\n        this._reset();\r\n        var record = this._itHead;\r\n        var mayBeDirty = false;\r\n        var index;\r\n        var item;\r\n        var itemTrackBy;\r\n        if (Array.isArray(collection)) {\r\n            this.length = collection.length;\r\n            for (var index_1 = 0; index_1 < this.length; index_1++) {\r\n                item = collection[index_1];\r\n                itemTrackBy = this._trackByFn(index_1, item);\r\n                if (record === null || !looseIdentical(record.trackById, itemTrackBy)) {\r\n                    record = this._mismatch(record, item, itemTrackBy, index_1);\r\n                    mayBeDirty = true;\r\n                }\r\n                else {\r\n                    if (mayBeDirty) {\r\n                        // TODO(misko): can we limit this to duplicates only?\r\n                        record = this._verifyReinsertion(record, item, itemTrackBy, index_1);\r\n                    }\r\n                    if (!looseIdentical(record.item, item))\r\n                        this._addIdentityChange(record, item);\r\n                }\r\n                record = record._next;\r\n            }\r\n        }\r\n        else {\r\n            index = 0;\r\n            iterateListLike(collection, function (item) {\r\n                itemTrackBy = _this._trackByFn(index, item);\r\n                if (record === null || !looseIdentical(record.trackById, itemTrackBy)) {\r\n                    record = _this._mismatch(record, item, itemTrackBy, index);\r\n                    mayBeDirty = true;\r\n                }\r\n                else {\r\n                    if (mayBeDirty) {\r\n                        // TODO(misko): can we limit this to duplicates only?\r\n                        record = _this._verifyReinsertion(record, item, itemTrackBy, index);\r\n                    }\r\n                    if (!looseIdentical(record.item, item))\r\n                        _this._addIdentityChange(record, item);\r\n                }\r\n                record = record._next;\r\n                index++;\r\n            });\r\n            this.length = index;\r\n        }\r\n        this._truncate(record);\r\n        this.collection = collection;\r\n        return this.isDirty;\r\n    };\r\n    Object.defineProperty(DefaultIterableDiffer.prototype, \"isDirty\", {\r\n        /* CollectionChanges is considered dirty if it has any additions, moves, removals, or identity\r\n         * changes.\r\n         */\r\n        get: /* CollectionChanges is considered dirty if it has any additions, moves, removals, or identity\r\n           * changes.\r\n           */\r\n        function () {\r\n            return this._additionsHead !== null || this._movesHead !== null ||\r\n                this._removalsHead !== null || this._identityChangesHead !== null;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Reset the state of the change objects to show no changes. This means set previousKey to\r\n     * currentKey, and clear all of the queues (additions, moves, removals).\r\n     * Set the previousIndexes of moved and added items to their currentIndexes\r\n     * Reset the list of additions, moves and removals\r\n     *\r\n     * @internal\r\n     */\r\n    /**\r\n       * Reset the state of the change objects to show no changes. This means set previousKey to\r\n       * currentKey, and clear all of the queues (additions, moves, removals).\r\n       * Set the previousIndexes of moved and added items to their currentIndexes\r\n       * Reset the list of additions, moves and removals\r\n       *\r\n       * @internal\r\n       */\r\n    DefaultIterableDiffer.prototype._reset = /**\r\n       * Reset the state of the change objects to show no changes. This means set previousKey to\r\n       * currentKey, and clear all of the queues (additions, moves, removals).\r\n       * Set the previousIndexes of moved and added items to their currentIndexes\r\n       * Reset the list of additions, moves and removals\r\n       *\r\n       * @internal\r\n       */\r\n    function () {\r\n        if (this.isDirty) {\r\n            var record = void 0;\r\n            var nextRecord = void 0;\r\n            for (record = this._previousItHead = this._itHead; record !== null; record = record._next) {\r\n                record._nextPrevious = record._next;\r\n            }\r\n            for (record = this._additionsHead; record !== null; record = record._nextAdded) {\r\n                record.previousIndex = record.currentIndex;\r\n            }\r\n            this._additionsHead = this._additionsTail = null;\r\n            for (record = this._movesHead; record !== null; record = nextRecord) {\r\n                record.previousIndex = record.currentIndex;\r\n                nextRecord = record._nextMoved;\r\n            }\r\n            this._movesHead = this._movesTail = null;\r\n            this._removalsHead = this._removalsTail = null;\r\n            this._identityChangesHead = this._identityChangesTail = null;\r\n            // TODO(vicb): when assert gets supported\r\n            // assert(!this.isDirty);\r\n        }\r\n    };\r\n    /**\r\n     * This is the core function which handles differences between collections.\r\n     *\r\n     * - `record` is the record which we saw at this position last time. If null then it is a new\r\n     *   item.\r\n     * - `item` is the current item in the collection\r\n     * - `index` is the position of the item in the collection\r\n     *\r\n     * @internal\r\n     */\r\n    /**\r\n       * This is the core function which handles differences between collections.\r\n       *\r\n       * - `record` is the record which we saw at this position last time. If null then it is a new\r\n       *   item.\r\n       * - `item` is the current item in the collection\r\n       * - `index` is the position of the item in the collection\r\n       *\r\n       * @internal\r\n       */\r\n    DefaultIterableDiffer.prototype._mismatch = /**\r\n       * This is the core function which handles differences between collections.\r\n       *\r\n       * - `record` is the record which we saw at this position last time. If null then it is a new\r\n       *   item.\r\n       * - `item` is the current item in the collection\r\n       * - `index` is the position of the item in the collection\r\n       *\r\n       * @internal\r\n       */\r\n    function (record, item, itemTrackBy, index) {\r\n        // The previous record after which we will append the current one.\r\n        var previousRecord;\r\n        if (record === null) {\r\n            previousRecord = this._itTail;\r\n        }\r\n        else {\r\n            previousRecord = record._prev;\r\n            // Remove the record from the collection since we know it does not match the item.\r\n            this._remove(record);\r\n        }\r\n        // Attempt to see if we have seen the item before.\r\n        record = this._linkedRecords === null ? null : this._linkedRecords.get(itemTrackBy, index);\r\n        if (record !== null) {\r\n            // We have seen this before, we need to move it forward in the collection.\r\n            // But first we need to check if identity changed, so we can update in view if necessary\r\n            if (!looseIdentical(record.item, item))\r\n                this._addIdentityChange(record, item);\r\n            this._moveAfter(record, previousRecord, index);\r\n        }\r\n        else {\r\n            // Never seen it, check evicted list.\r\n            record = this._unlinkedRecords === null ? null : this._unlinkedRecords.get(itemTrackBy, null);\r\n            if (record !== null) {\r\n                // It is an item which we have evicted earlier: reinsert it back into the list.\r\n                // But first we need to check if identity changed, so we can update in view if necessary\r\n                if (!looseIdentical(record.item, item))\r\n                    this._addIdentityChange(record, item);\r\n                this._reinsertAfter(record, previousRecord, index);\r\n            }\r\n            else {\r\n                // It is a new item: add it.\r\n                record =\r\n                    this._addAfter(new IterableChangeRecord_(item, itemTrackBy), previousRecord, index);\r\n            }\r\n        }\r\n        return record;\r\n    };\r\n    /**\r\n     * This check is only needed if an array contains duplicates. (Short circuit of nothing dirty)\r\n     *\r\n     * Use case: `[a, a]` => `[b, a, a]`\r\n     *\r\n     * If we did not have this check then the insertion of `b` would:\r\n     *   1) evict first `a`\r\n     *   2) insert `b` at `0` index.\r\n     *   3) leave `a` at index `1` as is. <-- this is wrong!\r\n     *   3) reinsert `a` at index 2. <-- this is wrong!\r\n     *\r\n     * The correct behavior is:\r\n     *   1) evict first `a`\r\n     *   2) insert `b` at `0` index.\r\n     *   3) reinsert `a` at index 1.\r\n     *   3) move `a` at from `1` to `2`.\r\n     *\r\n     *\r\n     * Double check that we have not evicted a duplicate item. We need to check if the item type may\r\n     * have already been removed:\r\n     * The insertion of b will evict the first 'a'. If we don't reinsert it now it will be reinserted\r\n     * at the end. Which will show up as the two 'a's switching position. This is incorrect, since a\r\n     * better way to think of it is as insert of 'b' rather then switch 'a' with 'b' and then add 'a'\r\n     * at the end.\r\n     *\r\n     * @internal\r\n     */\r\n    /**\r\n       * This check is only needed if an array contains duplicates. (Short circuit of nothing dirty)\r\n       *\r\n       * Use case: `[a, a]` => `[b, a, a]`\r\n       *\r\n       * If we did not have this check then the insertion of `b` would:\r\n       *   1) evict first `a`\r\n       *   2) insert `b` at `0` index.\r\n       *   3) leave `a` at index `1` as is. <-- this is wrong!\r\n       *   3) reinsert `a` at index 2. <-- this is wrong!\r\n       *\r\n       * The correct behavior is:\r\n       *   1) evict first `a`\r\n       *   2) insert `b` at `0` index.\r\n       *   3) reinsert `a` at index 1.\r\n       *   3) move `a` at from `1` to `2`.\r\n       *\r\n       *\r\n       * Double check that we have not evicted a duplicate item. We need to check if the item type may\r\n       * have already been removed:\r\n       * The insertion of b will evict the first 'a'. If we don't reinsert it now it will be reinserted\r\n       * at the end. Which will show up as the two 'a's switching position. This is incorrect, since a\r\n       * better way to think of it is as insert of 'b' rather then switch 'a' with 'b' and then add 'a'\r\n       * at the end.\r\n       *\r\n       * @internal\r\n       */\r\n    DefaultIterableDiffer.prototype._verifyReinsertion = /**\r\n       * This check is only needed if an array contains duplicates. (Short circuit of nothing dirty)\r\n       *\r\n       * Use case: `[a, a]` => `[b, a, a]`\r\n       *\r\n       * If we did not have this check then the insertion of `b` would:\r\n       *   1) evict first `a`\r\n       *   2) insert `b` at `0` index.\r\n       *   3) leave `a` at index `1` as is. <-- this is wrong!\r\n       *   3) reinsert `a` at index 2. <-- this is wrong!\r\n       *\r\n       * The correct behavior is:\r\n       *   1) evict first `a`\r\n       *   2) insert `b` at `0` index.\r\n       *   3) reinsert `a` at index 1.\r\n       *   3) move `a` at from `1` to `2`.\r\n       *\r\n       *\r\n       * Double check that we have not evicted a duplicate item. We need to check if the item type may\r\n       * have already been removed:\r\n       * The insertion of b will evict the first 'a'. If we don't reinsert it now it will be reinserted\r\n       * at the end. Which will show up as the two 'a's switching position. This is incorrect, since a\r\n       * better way to think of it is as insert of 'b' rather then switch 'a' with 'b' and then add 'a'\r\n       * at the end.\r\n       *\r\n       * @internal\r\n       */\r\n    function (record, item, itemTrackBy, index) {\r\n        var reinsertRecord = this._unlinkedRecords === null ? null : this._unlinkedRecords.get(itemTrackBy, null);\r\n        if (reinsertRecord !== null) {\r\n            record = this._reinsertAfter(reinsertRecord, (record._prev), index);\r\n        }\r\n        else if (record.currentIndex != index) {\r\n            record.currentIndex = index;\r\n            this._addToMoves(record, index);\r\n        }\r\n        return record;\r\n    };\r\n    /**\r\n     * Get rid of any excess {@link IterableChangeRecord_}s from the previous collection\r\n     *\r\n     * - `record` The first excess {@link IterableChangeRecord_}.\r\n     *\r\n     * @internal\r\n     */\r\n    /**\r\n       * Get rid of any excess {@link IterableChangeRecord_}s from the previous collection\r\n       *\r\n       * - `record` The first excess {@link IterableChangeRecord_}.\r\n       *\r\n       * @internal\r\n       */\r\n    DefaultIterableDiffer.prototype._truncate = /**\r\n       * Get rid of any excess {@link IterableChangeRecord_}s from the previous collection\r\n       *\r\n       * - `record` The first excess {@link IterableChangeRecord_}.\r\n       *\r\n       * @internal\r\n       */\r\n    function (record) {\r\n        // Anything after that needs to be removed;\r\n        while (record !== null) {\r\n            var nextRecord = record._next;\r\n            this._addToRemovals(this._unlink(record));\r\n            record = nextRecord;\r\n        }\r\n        if (this._unlinkedRecords !== null) {\r\n            this._unlinkedRecords.clear();\r\n        }\r\n        if (this._additionsTail !== null) {\r\n            this._additionsTail._nextAdded = null;\r\n        }\r\n        if (this._movesTail !== null) {\r\n            this._movesTail._nextMoved = null;\r\n        }\r\n        if (this._itTail !== null) {\r\n            this._itTail._next = null;\r\n        }\r\n        if (this._removalsTail !== null) {\r\n            this._removalsTail._nextRemoved = null;\r\n        }\r\n        if (this._identityChangesTail !== null) {\r\n            this._identityChangesTail._nextIdentityChange = null;\r\n        }\r\n    };\r\n    /** @internal */\r\n    /** @internal */\r\n    DefaultIterableDiffer.prototype._reinsertAfter = /** @internal */\r\n    function (record, prevRecord, index) {\r\n        if (this._unlinkedRecords !== null) {\r\n            this._unlinkedRecords.remove(record);\r\n        }\r\n        var prev = record._prevRemoved;\r\n        var next = record._nextRemoved;\r\n        if (prev === null) {\r\n            this._removalsHead = next;\r\n        }\r\n        else {\r\n            prev._nextRemoved = next;\r\n        }\r\n        if (next === null) {\r\n            this._removalsTail = prev;\r\n        }\r\n        else {\r\n            next._prevRemoved = prev;\r\n        }\r\n        this._insertAfter(record, prevRecord, index);\r\n        this._addToMoves(record, index);\r\n        return record;\r\n    };\r\n    /** @internal */\r\n    /** @internal */\r\n    DefaultIterableDiffer.prototype._moveAfter = /** @internal */\r\n    function (record, prevRecord, index) {\r\n        this._unlink(record);\r\n        this._insertAfter(record, prevRecord, index);\r\n        this._addToMoves(record, index);\r\n        return record;\r\n    };\r\n    /** @internal */\r\n    /** @internal */\r\n    DefaultIterableDiffer.prototype._addAfter = /** @internal */\r\n    function (record, prevRecord, index) {\r\n        this._insertAfter(record, prevRecord, index);\r\n        if (this._additionsTail === null) {\r\n            // TODO(vicb):\r\n            // assert(this._additionsHead === null);\r\n            this._additionsTail = this._additionsHead = record;\r\n        }\r\n        else {\r\n            // TODO(vicb):\r\n            // assert(_additionsTail._nextAdded === null);\r\n            // assert(record._nextAdded === null);\r\n            this._additionsTail = this._additionsTail._nextAdded = record;\r\n        }\r\n        return record;\r\n    };\r\n    /** @internal */\r\n    /** @internal */\r\n    DefaultIterableDiffer.prototype._insertAfter = /** @internal */\r\n    function (record, prevRecord, index) {\r\n        // TODO(vicb):\r\n        // assert(record != prevRecord);\r\n        // assert(record._next === null);\r\n        // assert(record._prev === null);\r\n        var next = prevRecord === null ? this._itHead : prevRecord._next;\r\n        // TODO(vicb):\r\n        // assert(next != record);\r\n        // assert(prevRecord != record);\r\n        record._next = next;\r\n        record._prev = prevRecord;\r\n        if (next === null) {\r\n            this._itTail = record;\r\n        }\r\n        else {\r\n            next._prev = record;\r\n        }\r\n        if (prevRecord === null) {\r\n            this._itHead = record;\r\n        }\r\n        else {\r\n            prevRecord._next = record;\r\n        }\r\n        if (this._linkedRecords === null) {\r\n            this._linkedRecords = new _DuplicateMap();\r\n        }\r\n        this._linkedRecords.put(record);\r\n        record.currentIndex = index;\r\n        return record;\r\n    };\r\n    /** @internal */\r\n    /** @internal */\r\n    DefaultIterableDiffer.prototype._remove = /** @internal */\r\n    function (record) {\r\n        return this._addToRemovals(this._unlink(record));\r\n    };\r\n    /** @internal */\r\n    /** @internal */\r\n    DefaultIterableDiffer.prototype._unlink = /** @internal */\r\n    function (record) {\r\n        if (this._linkedRecords !== null) {\r\n            this._linkedRecords.remove(record);\r\n        }\r\n        var prev = record._prev;\r\n        var next = record._next;\r\n        // TODO(vicb):\r\n        // assert((record._prev = null) === null);\r\n        // assert((record._next = null) === null);\r\n        if (prev === null) {\r\n            this._itHead = next;\r\n        }\r\n        else {\r\n            prev._next = next;\r\n        }\r\n        if (next === null) {\r\n            this._itTail = prev;\r\n        }\r\n        else {\r\n            next._prev = prev;\r\n        }\r\n        return record;\r\n    };\r\n    /** @internal */\r\n    /** @internal */\r\n    DefaultIterableDiffer.prototype._addToMoves = /** @internal */\r\n    function (record, toIndex) {\r\n        // TODO(vicb):\r\n        // assert(record._nextMoved === null);\r\n        if (record.previousIndex === toIndex) {\r\n            return record;\r\n        }\r\n        if (this._movesTail === null) {\r\n            // TODO(vicb):\r\n            // assert(_movesHead === null);\r\n            this._movesTail = this._movesHead = record;\r\n        }\r\n        else {\r\n            // TODO(vicb):\r\n            // assert(_movesTail._nextMoved === null);\r\n            this._movesTail = this._movesTail._nextMoved = record;\r\n        }\r\n        return record;\r\n    };\r\n    DefaultIterableDiffer.prototype._addToRemovals = function (record) {\r\n        if (this._unlinkedRecords === null) {\r\n            this._unlinkedRecords = new _DuplicateMap();\r\n        }\r\n        this._unlinkedRecords.put(record);\r\n        record.currentIndex = null;\r\n        record._nextRemoved = null;\r\n        if (this._removalsTail === null) {\r\n            // TODO(vicb):\r\n            // assert(_removalsHead === null);\r\n            this._removalsTail = this._removalsHead = record;\r\n            record._prevRemoved = null;\r\n        }\r\n        else {\r\n            // TODO(vicb):\r\n            // assert(_removalsTail._nextRemoved === null);\r\n            // assert(record._nextRemoved === null);\r\n            record._prevRemoved = this._removalsTail;\r\n            this._removalsTail = this._removalsTail._nextRemoved = record;\r\n        }\r\n        return record;\r\n    };\r\n    /** @internal */\r\n    /** @internal */\r\n    DefaultIterableDiffer.prototype._addIdentityChange = /** @internal */\r\n    function (record, item) {\r\n        record.item = item;\r\n        if (this._identityChangesTail === null) {\r\n            this._identityChangesTail = this._identityChangesHead = record;\r\n        }\r\n        else {\r\n            this._identityChangesTail = this._identityChangesTail._nextIdentityChange = record;\r\n        }\r\n        return record;\r\n    };\r\n    return DefaultIterableDiffer;\r\n}());\r\nvar IterableChangeRecord_ = /** @class */ (function () {\r\n    function IterableChangeRecord_(item, trackById) {\r\n        this.item = item;\r\n        this.trackById = trackById;\r\n        this.currentIndex = null;\r\n        this.previousIndex = null;\r\n        /** @internal */\r\n        this._nextPrevious = null;\r\n        /** @internal */\r\n        this._prev = null;\r\n        /** @internal */\r\n        this._next = null;\r\n        /** @internal */\r\n        this._prevDup = null;\r\n        /** @internal */\r\n        this._nextDup = null;\r\n        /** @internal */\r\n        this._prevRemoved = null;\r\n        /** @internal */\r\n        this._nextRemoved = null;\r\n        /** @internal */\r\n        this._nextAdded = null;\r\n        /** @internal */\r\n        this._nextMoved = null;\r\n        /** @internal */\r\n        this._nextIdentityChange = null;\r\n    }\r\n    return IterableChangeRecord_;\r\n}());\r\n// A linked list of CollectionChangeRecords with the same IterableChangeRecord_.item\r\nvar _DuplicateItemRecordList = /** @class */ (function () {\r\n    function _DuplicateItemRecordList() {\r\n        /** @internal */\r\n        this._head = null;\r\n        /** @internal */\r\n        this._tail = null;\r\n    }\r\n    /**\r\n     * Append the record to the list of duplicates.\r\n     *\r\n     * Note: by design all records in the list of duplicates hold the same value in record.item.\r\n     */\r\n    /**\r\n       * Append the record to the list of duplicates.\r\n       *\r\n       * Note: by design all records in the list of duplicates hold the same value in record.item.\r\n       */\r\n    _DuplicateItemRecordList.prototype.add = /**\r\n       * Append the record to the list of duplicates.\r\n       *\r\n       * Note: by design all records in the list of duplicates hold the same value in record.item.\r\n       */\r\n    function (record) {\r\n        if (this._head === null) {\r\n            this._head = this._tail = record;\r\n            record._nextDup = null;\r\n            record._prevDup = null;\r\n        }\r\n        else {\r\n            // TODO(vicb):\r\n            // assert(record.item ==  _head.item ||\r\n            //       record.item is num && record.item.isNaN && _head.item is num && _head.item.isNaN);\r\n            // TODO(vicb):\r\n            // assert(record.item ==  _head.item ||\r\n            //       record.item is num && record.item.isNaN && _head.item is num && _head.item.isNaN);\r\n            this._tail._nextDup = record;\r\n            record._prevDup = this._tail;\r\n            record._nextDup = null;\r\n            this._tail = record;\r\n        }\r\n    };\r\n    // Returns a IterableChangeRecord_ having IterableChangeRecord_.trackById == trackById and\r\n    // IterableChangeRecord_.currentIndex >= atOrAfterIndex\r\n    // Returns a IterableChangeRecord_ having IterableChangeRecord_.trackById == trackById and\r\n    // IterableChangeRecord_.currentIndex >= atOrAfterIndex\r\n    _DuplicateItemRecordList.prototype.get = \r\n    // Returns a IterableChangeRecord_ having IterableChangeRecord_.trackById == trackById and\r\n    // IterableChangeRecord_.currentIndex >= atOrAfterIndex\r\n    function (trackById, atOrAfterIndex) {\r\n        var record;\r\n        for (record = this._head; record !== null; record = record._nextDup) {\r\n            if ((atOrAfterIndex === null || atOrAfterIndex <= (record.currentIndex)) &&\r\n                looseIdentical(record.trackById, trackById)) {\r\n                return record;\r\n            }\r\n        }\r\n        return null;\r\n    };\r\n    /**\r\n     * Remove one {@link IterableChangeRecord_} from the list of duplicates.\r\n     *\r\n     * Returns whether the list of duplicates is empty.\r\n     */\r\n    /**\r\n       * Remove one {@link IterableChangeRecord_} from the list of duplicates.\r\n       *\r\n       * Returns whether the list of duplicates is empty.\r\n       */\r\n    _DuplicateItemRecordList.prototype.remove = /**\r\n       * Remove one {@link IterableChangeRecord_} from the list of duplicates.\r\n       *\r\n       * Returns whether the list of duplicates is empty.\r\n       */\r\n    function (record) {\r\n        // TODO(vicb):\r\n        // assert(() {\r\n        //  // verify that the record being removed is in the list.\r\n        //  for (IterableChangeRecord_ cursor = _head; cursor != null; cursor = cursor._nextDup) {\r\n        //    if (identical(cursor, record)) return true;\r\n        //  }\r\n        //  return false;\r\n        //});\r\n        var prev = record._prevDup;\r\n        var next = record._nextDup;\r\n        if (prev === null) {\r\n            this._head = next;\r\n        }\r\n        else {\r\n            prev._nextDup = next;\r\n        }\r\n        if (next === null) {\r\n            this._tail = prev;\r\n        }\r\n        else {\r\n            next._prevDup = prev;\r\n        }\r\n        return this._head === null;\r\n    };\r\n    return _DuplicateItemRecordList;\r\n}());\r\nvar _DuplicateMap = /** @class */ (function () {\r\n    function _DuplicateMap() {\r\n        this.map = new Map();\r\n    }\r\n    _DuplicateMap.prototype.put = function (record) {\r\n        var key = record.trackById;\r\n        var duplicates = this.map.get(key);\r\n        if (!duplicates) {\r\n            duplicates = new _DuplicateItemRecordList();\r\n            this.map.set(key, duplicates);\r\n        }\r\n        duplicates.add(record);\r\n    };\r\n    /**\r\n     * Retrieve the `value` using key. Because the IterableChangeRecord_ value may be one which we\r\n     * have already iterated over, we use the `atOrAfterIndex` to pretend it is not there.\r\n     *\r\n     * Use case: `[a, b, c, a, a]` if we are at index `3` which is the second `a` then asking if we\r\n     * have any more `a`s needs to return the second `a`.\r\n     */\r\n    /**\r\n       * Retrieve the `value` using key. Because the IterableChangeRecord_ value may be one which we\r\n       * have already iterated over, we use the `atOrAfterIndex` to pretend it is not there.\r\n       *\r\n       * Use case: `[a, b, c, a, a]` if we are at index `3` which is the second `a` then asking if we\r\n       * have any more `a`s needs to return the second `a`.\r\n       */\r\n    _DuplicateMap.prototype.get = /**\r\n       * Retrieve the `value` using key. Because the IterableChangeRecord_ value may be one which we\r\n       * have already iterated over, we use the `atOrAfterIndex` to pretend it is not there.\r\n       *\r\n       * Use case: `[a, b, c, a, a]` if we are at index `3` which is the second `a` then asking if we\r\n       * have any more `a`s needs to return the second `a`.\r\n       */\r\n    function (trackById, atOrAfterIndex) {\r\n        var key = trackById;\r\n        var recordList = this.map.get(key);\r\n        return recordList ? recordList.get(trackById, atOrAfterIndex) : null;\r\n    };\r\n    /**\r\n     * Removes a {@link IterableChangeRecord_} from the list of duplicates.\r\n     *\r\n     * The list of duplicates also is removed from the map if it gets empty.\r\n     */\r\n    /**\r\n       * Removes a {@link IterableChangeRecord_} from the list of duplicates.\r\n       *\r\n       * The list of duplicates also is removed from the map if it gets empty.\r\n       */\r\n    _DuplicateMap.prototype.remove = /**\r\n       * Removes a {@link IterableChangeRecord_} from the list of duplicates.\r\n       *\r\n       * The list of duplicates also is removed from the map if it gets empty.\r\n       */\r\n    function (record) {\r\n        var key = record.trackById;\r\n        var recordList = (this.map.get(key));\r\n        // Remove the list of duplicates when it gets empty\r\n        if (recordList.remove(record)) {\r\n            this.map.delete(key);\r\n        }\r\n        return record;\r\n    };\r\n    Object.defineProperty(_DuplicateMap.prototype, \"isEmpty\", {\r\n        get: function () { return this.map.size === 0; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    _DuplicateMap.prototype.clear = function () { this.map.clear(); };\r\n    return _DuplicateMap;\r\n}());\r\nfunction getPreviousIndex(item, addRemoveOffset, moveOffsets) {\r\n    var previousIndex = item.previousIndex;\r\n    if (previousIndex === null)\r\n        return previousIndex;\r\n    var moveOffset = 0;\r\n    if (moveOffsets && previousIndex < moveOffsets.length) {\r\n        moveOffset = moveOffsets[previousIndex];\r\n    }\r\n    return previousIndex + addRemoveOffset + moveOffset;\r\n}\r\n\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nvar DefaultKeyValueDifferFactory = /** @class */ (function () {\r\n    function DefaultKeyValueDifferFactory() {\r\n    }\r\n    DefaultKeyValueDifferFactory.prototype.supports = function (obj) { return obj instanceof Map || isJsObject(obj); };\r\n    DefaultKeyValueDifferFactory.prototype.create = function () { return new DefaultKeyValueDiffer(); };\r\n    return DefaultKeyValueDifferFactory;\r\n}());\r\nvar DefaultKeyValueDiffer = /** @class */ (function () {\r\n    function DefaultKeyValueDiffer() {\r\n        this._records = new Map();\r\n        this._mapHead = null;\r\n        // _appendAfter is used in the check loop\r\n        this._appendAfter = null;\r\n        this._previousMapHead = null;\r\n        this._changesHead = null;\r\n        this._changesTail = null;\r\n        this._additionsHead = null;\r\n        this._additionsTail = null;\r\n        this._removalsHead = null;\r\n        this._removalsTail = null;\r\n    }\r\n    Object.defineProperty(DefaultKeyValueDiffer.prototype, \"isDirty\", {\r\n        get: function () {\r\n            return this._additionsHead !== null || this._changesHead !== null ||\r\n                this._removalsHead !== null;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    DefaultKeyValueDiffer.prototype.forEachItem = function (fn) {\r\n        var record;\r\n        for (record = this._mapHead; record !== null; record = record._next) {\r\n            fn(record);\r\n        }\r\n    };\r\n    DefaultKeyValueDiffer.prototype.forEachPreviousItem = function (fn) {\r\n        var record;\r\n        for (record = this._previousMapHead; record !== null; record = record._nextPrevious) {\r\n            fn(record);\r\n        }\r\n    };\r\n    DefaultKeyValueDiffer.prototype.forEachChangedItem = function (fn) {\r\n        var record;\r\n        for (record = this._changesHead; record !== null; record = record._nextChanged) {\r\n            fn(record);\r\n        }\r\n    };\r\n    DefaultKeyValueDiffer.prototype.forEachAddedItem = function (fn) {\r\n        var record;\r\n        for (record = this._additionsHead; record !== null; record = record._nextAdded) {\r\n            fn(record);\r\n        }\r\n    };\r\n    DefaultKeyValueDiffer.prototype.forEachRemovedItem = function (fn) {\r\n        var record;\r\n        for (record = this._removalsHead; record !== null; record = record._nextRemoved) {\r\n            fn(record);\r\n        }\r\n    };\r\n    DefaultKeyValueDiffer.prototype.diff = function (map) {\r\n        if (!map) {\r\n            map = new Map();\r\n        }\r\n        else if (!(map instanceof Map || isJsObject(map))) {\r\n            throw new Error(\"Error trying to diff '\" + stringify(map) + \"'. Only maps and objects are allowed\");\r\n        }\r\n        return this.check(map) ? this : null;\r\n    };\r\n    DefaultKeyValueDiffer.prototype.onDestroy = function () { };\r\n    /**\r\n     * Check the current state of the map vs the previous.\r\n     * The algorithm is optimised for when the keys do no change.\r\n     */\r\n    /**\r\n       * Check the current state of the map vs the previous.\r\n       * The algorithm is optimised for when the keys do no change.\r\n       */\r\n    DefaultKeyValueDiffer.prototype.check = /**\r\n       * Check the current state of the map vs the previous.\r\n       * The algorithm is optimised for when the keys do no change.\r\n       */\r\n    function (map) {\r\n        var _this = this;\r\n        this._reset();\r\n        var insertBefore = this._mapHead;\r\n        this._appendAfter = null;\r\n        this._forEach(map, function (value, key) {\r\n            if (insertBefore && insertBefore.key === key) {\r\n                _this._maybeAddToChanges(insertBefore, value);\r\n                _this._appendAfter = insertBefore;\r\n                insertBefore = insertBefore._next;\r\n            }\r\n            else {\r\n                var record = _this._getOrCreateRecordForKey(key, value);\r\n                insertBefore = _this._insertBeforeOrAppend(insertBefore, record);\r\n            }\r\n        });\r\n        // Items remaining at the end of the list have been deleted\r\n        if (insertBefore) {\r\n            if (insertBefore._prev) {\r\n                insertBefore._prev._next = null;\r\n            }\r\n            this._removalsHead = insertBefore;\r\n            for (var record = insertBefore; record !== null; record = record._nextRemoved) {\r\n                if (record === this._mapHead) {\r\n                    this._mapHead = null;\r\n                }\r\n                this._records.delete(record.key);\r\n                record._nextRemoved = record._next;\r\n                record.previousValue = record.currentValue;\r\n                record.currentValue = null;\r\n                record._prev = null;\r\n                record._next = null;\r\n            }\r\n        }\r\n        // Make sure tails have no next records from previous runs\r\n        if (this._changesTail)\r\n            this._changesTail._nextChanged = null;\r\n        if (this._additionsTail)\r\n            this._additionsTail._nextAdded = null;\r\n        return this.isDirty;\r\n    };\r\n    /**\r\n     * Inserts a record before `before` or append at the end of the list when `before` is null.\r\n     *\r\n     * Notes:\r\n     * - This method appends at `this._appendAfter`,\r\n     * - This method updates `this._appendAfter`,\r\n     * - The return value is the new value for the insertion pointer.\r\n     */\r\n    /**\r\n       * Inserts a record before `before` or append at the end of the list when `before` is null.\r\n       *\r\n       * Notes:\r\n       * - This method appends at `this._appendAfter`,\r\n       * - This method updates `this._appendAfter`,\r\n       * - The return value is the new value for the insertion pointer.\r\n       */\r\n    DefaultKeyValueDiffer.prototype._insertBeforeOrAppend = /**\r\n       * Inserts a record before `before` or append at the end of the list when `before` is null.\r\n       *\r\n       * Notes:\r\n       * - This method appends at `this._appendAfter`,\r\n       * - This method updates `this._appendAfter`,\r\n       * - The return value is the new value for the insertion pointer.\r\n       */\r\n    function (before, record) {\r\n        if (before) {\r\n            var prev = before._prev;\r\n            record._next = before;\r\n            record._prev = prev;\r\n            before._prev = record;\r\n            if (prev) {\r\n                prev._next = record;\r\n            }\r\n            if (before === this._mapHead) {\r\n                this._mapHead = record;\r\n            }\r\n            this._appendAfter = before;\r\n            return before;\r\n        }\r\n        if (this._appendAfter) {\r\n            this._appendAfter._next = record;\r\n            record._prev = this._appendAfter;\r\n        }\r\n        else {\r\n            this._mapHead = record;\r\n        }\r\n        this._appendAfter = record;\r\n        return null;\r\n    };\r\n    DefaultKeyValueDiffer.prototype._getOrCreateRecordForKey = function (key, value) {\r\n        if (this._records.has(key)) {\r\n            var record_1 = (this._records.get(key));\r\n            this._maybeAddToChanges(record_1, value);\r\n            var prev = record_1._prev;\r\n            var next = record_1._next;\r\n            if (prev) {\r\n                prev._next = next;\r\n            }\r\n            if (next) {\r\n                next._prev = prev;\r\n            }\r\n            record_1._next = null;\r\n            record_1._prev = null;\r\n            return record_1;\r\n        }\r\n        var record = new KeyValueChangeRecord_(key);\r\n        this._records.set(key, record);\r\n        record.currentValue = value;\r\n        this._addToAdditions(record);\r\n        return record;\r\n    };\r\n    /** @internal */\r\n    /** @internal */\r\n    DefaultKeyValueDiffer.prototype._reset = /** @internal */\r\n    function () {\r\n        if (this.isDirty) {\r\n            var record = void 0;\r\n            // let `_previousMapHead` contain the state of the map before the changes\r\n            this._previousMapHead = this._mapHead;\r\n            for (record = this._previousMapHead; record !== null; record = record._next) {\r\n                record._nextPrevious = record._next;\r\n            }\r\n            // Update `record.previousValue` with the value of the item before the changes\r\n            // We need to update all changed items (that's those which have been added and changed)\r\n            for (record = this._changesHead; record !== null; record = record._nextChanged) {\r\n                record.previousValue = record.currentValue;\r\n            }\r\n            for (record = this._additionsHead; record != null; record = record._nextAdded) {\r\n                record.previousValue = record.currentValue;\r\n            }\r\n            this._changesHead = this._changesTail = null;\r\n            this._additionsHead = this._additionsTail = null;\r\n            this._removalsHead = null;\r\n        }\r\n    };\r\n    // Add the record or a given key to the list of changes only when the value has actually changed\r\n    // Add the record or a given key to the list of changes only when the value has actually changed\r\n    DefaultKeyValueDiffer.prototype._maybeAddToChanges = \r\n    // Add the record or a given key to the list of changes only when the value has actually changed\r\n    function (record, newValue) {\r\n        if (!looseIdentical(newValue, record.currentValue)) {\r\n            record.previousValue = record.currentValue;\r\n            record.currentValue = newValue;\r\n            this._addToChanges(record);\r\n        }\r\n    };\r\n    DefaultKeyValueDiffer.prototype._addToAdditions = function (record) {\r\n        if (this._additionsHead === null) {\r\n            this._additionsHead = this._additionsTail = record;\r\n        }\r\n        else {\r\n            this._additionsTail._nextAdded = record;\r\n            this._additionsTail = record;\r\n        }\r\n    };\r\n    DefaultKeyValueDiffer.prototype._addToChanges = function (record) {\r\n        if (this._changesHead === null) {\r\n            this._changesHead = this._changesTail = record;\r\n        }\r\n        else {\r\n            this._changesTail._nextChanged = record;\r\n            this._changesTail = record;\r\n        }\r\n    };\r\n    /** @internal */\r\n    /** @internal */\r\n    DefaultKeyValueDiffer.prototype._forEach = /** @internal */\r\n    function (obj, fn) {\r\n        if (obj instanceof Map) {\r\n            obj.forEach(fn);\r\n        }\r\n        else {\r\n            Object.keys(obj).forEach(function (k) { return fn(obj[k], k); });\r\n        }\r\n    };\r\n    return DefaultKeyValueDiffer;\r\n}());\r\nvar KeyValueChangeRecord_ = /** @class */ (function () {\r\n    function KeyValueChangeRecord_(key) {\r\n        this.key = key;\r\n        this.previousValue = null;\r\n        this.currentValue = null;\r\n        /** @internal */\r\n        this._nextPrevious = null;\r\n        /** @internal */\r\n        this._next = null;\r\n        /** @internal */\r\n        this._prev = null;\r\n        /** @internal */\r\n        this._nextAdded = null;\r\n        /** @internal */\r\n        this._nextRemoved = null;\r\n        /** @internal */\r\n        this._nextChanged = null;\r\n    }\r\n    return KeyValueChangeRecord_;\r\n}());\r\n\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * A repository of different iterable diffing strategies used by NgFor, NgClass, and others.\r\n *\r\n */\r\nvar IterableDiffers = /** @class */ (function () {\r\n    function IterableDiffers(factories) {\r\n        this.factories = factories;\r\n    }\r\n    IterableDiffers.create = function (factories, parent) {\r\n        if (parent != null) {\r\n            var copied = parent.factories.slice();\r\n            factories = factories.concat(copied);\r\n        }\r\n        return new IterableDiffers(factories);\r\n    };\r\n    /**\r\n     * Takes an array of {@link IterableDifferFactory} and returns a provider used to extend the\r\n     * inherited {@link IterableDiffers} instance with the provided factories and return a new\r\n     * {@link IterableDiffers} instance.\r\n     *\r\n     * The following example shows how to extend an existing list of factories,\r\n     * which will only be applied to the injector for this component and its children.\r\n     * This step is all that's required to make a new {@link IterableDiffer} available.\r\n     *\r\n     * ### Example\r\n     *\r\n     * ```\r\n     * @Component({\r\n     *   viewProviders: [\r\n     *     IterableDiffers.extend([new ImmutableListDiffer()])\r\n     *   ]\r\n     * })\r\n     * ```\r\n     */\r\n    /**\r\n       * Takes an array of {@link IterableDifferFactory} and returns a provider used to extend the\r\n       * inherited {@link IterableDiffers} instance with the provided factories and return a new\r\n       * {@link IterableDiffers} instance.\r\n       *\r\n       * The following example shows how to extend an existing list of factories,\r\n       * which will only be applied to the injector for this component and its children.\r\n       * This step is all that's required to make a new {@link IterableDiffer} available.\r\n       *\r\n       * ### Example\r\n       *\r\n       * ```\r\n       * @Component({\r\n       *   viewProviders: [\r\n       *     IterableDiffers.extend([new ImmutableListDiffer()])\r\n       *   ]\r\n       * })\r\n       * ```\r\n       */\r\n    IterableDiffers.extend = /**\r\n       * Takes an array of {@link IterableDifferFactory} and returns a provider used to extend the\r\n       * inherited {@link IterableDiffers} instance with the provided factories and return a new\r\n       * {@link IterableDiffers} instance.\r\n       *\r\n       * The following example shows how to extend an existing list of factories,\r\n       * which will only be applied to the injector for this component and its children.\r\n       * This step is all that's required to make a new {@link IterableDiffer} available.\r\n       *\r\n       * ### Example\r\n       *\r\n       * ```\r\n       * @Component({\r\n       *   viewProviders: [\r\n       *     IterableDiffers.extend([new ImmutableListDiffer()])\r\n       *   ]\r\n       * })\r\n       * ```\r\n       */\r\n    function (factories) {\r\n        return {\r\n            provide: IterableDiffers,\r\n            useFactory: function (parent) {\r\n                if (!parent) {\r\n                    // Typically would occur when calling IterableDiffers.extend inside of dependencies passed\r\n                    // to\r\n                    // bootstrap(), which would override default pipes instead of extending them.\r\n                    throw new Error('Cannot extend IterableDiffers without a parent injector');\r\n                }\r\n                return IterableDiffers.create(factories, parent);\r\n            },\r\n            // Dependency technically isn't optional, but we can provide a better error message this way.\r\n            deps: [[IterableDiffers, new SkipSelf(), new Optional()]]\r\n        };\r\n    };\r\n    IterableDiffers.prototype.find = function (iterable) {\r\n        var factory = this.factories.find(function (f) { return f.supports(iterable); });\r\n        if (factory != null) {\r\n            return factory;\r\n        }\r\n        else {\r\n            throw new Error(\"Cannot find a differ supporting object '\" + iterable + \"' of type '\" + getTypeNameForDebugging(iterable) + \"'\");\r\n        }\r\n    };\r\n    IterableDiffers.ngInjectableDef = defineInjectable({\r\n        providedIn: 'root',\r\n        factory: function () { return new IterableDiffers([new DefaultIterableDifferFactory()]); }\r\n    });\r\n    return IterableDiffers;\r\n}());\r\nfunction getTypeNameForDebugging(type) {\r\n    return type['name'] || typeof type;\r\n}\r\n\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * A repository of different Map diffing strategies used by NgClass, NgStyle, and others.\r\n *\r\n */\r\nvar KeyValueDiffers = /** @class */ (function () {\r\n    function KeyValueDiffers(factories) {\r\n        this.factories = factories;\r\n    }\r\n    KeyValueDiffers.create = function (factories, parent) {\r\n        if (parent) {\r\n            var copied = parent.factories.slice();\r\n            factories = factories.concat(copied);\r\n        }\r\n        return new KeyValueDiffers(factories);\r\n    };\r\n    /**\r\n     * Takes an array of {@link KeyValueDifferFactory} and returns a provider used to extend the\r\n     * inherited {@link KeyValueDiffers} instance with the provided factories and return a new\r\n     * {@link KeyValueDiffers} instance.\r\n     *\r\n     * The following example shows how to extend an existing list of factories,\r\n     * which will only be applied to the injector for this component and its children.\r\n     * This step is all that's required to make a new {@link KeyValueDiffer} available.\r\n     *\r\n     * ### Example\r\n     *\r\n     * ```\r\n     * @Component({\r\n     *   viewProviders: [\r\n     *     KeyValueDiffers.extend([new ImmutableMapDiffer()])\r\n     *   ]\r\n     * })\r\n     * ```\r\n     */\r\n    /**\r\n       * Takes an array of {@link KeyValueDifferFactory} and returns a provider used to extend the\r\n       * inherited {@link KeyValueDiffers} instance with the provided factories and return a new\r\n       * {@link KeyValueDiffers} instance.\r\n       *\r\n       * The following example shows how to extend an existing list of factories,\r\n       * which will only be applied to the injector for this component and its children.\r\n       * This step is all that's required to make a new {@link KeyValueDiffer} available.\r\n       *\r\n       * ### Example\r\n       *\r\n       * ```\r\n       * @Component({\r\n       *   viewProviders: [\r\n       *     KeyValueDiffers.extend([new ImmutableMapDiffer()])\r\n       *   ]\r\n       * })\r\n       * ```\r\n       */\r\n    KeyValueDiffers.extend = /**\r\n       * Takes an array of {@link KeyValueDifferFactory} and returns a provider used to extend the\r\n       * inherited {@link KeyValueDiffers} instance with the provided factories and return a new\r\n       * {@link KeyValueDiffers} instance.\r\n       *\r\n       * The following example shows how to extend an existing list of factories,\r\n       * which will only be applied to the injector for this component and its children.\r\n       * This step is all that's required to make a new {@link KeyValueDiffer} available.\r\n       *\r\n       * ### Example\r\n       *\r\n       * ```\r\n       * @Component({\r\n       *   viewProviders: [\r\n       *     KeyValueDiffers.extend([new ImmutableMapDiffer()])\r\n       *   ]\r\n       * })\r\n       * ```\r\n       */\r\n    function (factories) {\r\n        return {\r\n            provide: KeyValueDiffers,\r\n            useFactory: function (parent) {\r\n                if (!parent) {\r\n                    // Typically would occur when calling KeyValueDiffers.extend inside of dependencies passed\r\n                    // to bootstrap(), which would override default pipes instead of extending them.\r\n                    throw new Error('Cannot extend KeyValueDiffers without a parent injector');\r\n                }\r\n                return KeyValueDiffers.create(factories, parent);\r\n            },\r\n            // Dependency technically isn't optional, but we can provide a better error message this way.\r\n            deps: [[KeyValueDiffers, new SkipSelf(), new Optional()]]\r\n        };\r\n    };\r\n    KeyValueDiffers.prototype.find = function (kv) {\r\n        var factory = this.factories.find(function (f) { return f.supports(kv); });\r\n        if (factory) {\r\n            return factory;\r\n        }\r\n        throw new Error(\"Cannot find a differ supporting object '\" + kv + \"'\");\r\n    };\r\n    return KeyValueDiffers;\r\n}());\r\n\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * Structural diffing for `Object`s and `Map`s.\r\n */\r\nvar keyValDiff = [new DefaultKeyValueDifferFactory()];\r\n/**\r\n * Structural diffing for `Iterable` types such as `Array`s.\r\n */\r\nvar iterableDiff = [new DefaultIterableDifferFactory()];\r\nvar defaultIterableDiffers = new IterableDiffers(iterableDiff);\r\nvar defaultKeyValueDiffers = new KeyValueDiffers(keyValDiff);\r\n\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nvar _CORE_PLATFORM_PROVIDERS = [\r\n    // Set a default platform name for platforms that don't set it explicitly.\r\n    { provide: PLATFORM_ID, useValue: 'unknown' },\r\n    { provide: PlatformRef, deps: [Injector] },\r\n    { provide: TestabilityRegistry, deps: [] },\r\n    { provide: Console, deps: [] },\r\n];\r\n/**\r\n * This platform has to be included in any other platform\r\n *\r\n * @experimental\r\n */\r\nvar platformCore = createPlatformFactory(null, 'core', _CORE_PLATFORM_PROVIDERS);\r\n\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * Provide this token to set the locale of your application.\r\n * It is used for i18n extraction, by i18n pipes (DatePipe, I18nPluralPipe, CurrencyPipe,\r\n * DecimalPipe and PercentPipe) and by ICU expressions.\r\n *\r\n * See the {@linkDocs guide/i18n#setting-up-locale i18n guide} for more information.\r\n *\r\n * ### Example\r\n *\r\n * ```typescript\r\n * import { LOCALE_ID } from '@angular/core';\r\n * import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\r\n * import { AppModule } from './app/app.module';\r\n *\r\n * platformBrowserDynamic().bootstrapModule(AppModule, {\r\n *   providers: [{provide: LOCALE_ID, useValue: 'en-US' }]\r\n * });\r\n * ```\r\n *\r\n * @experimental i18n support is experimental.\r\n */\r\nvar LOCALE_ID = new InjectionToken('LocaleId');\r\n/**\r\n * Use this token at bootstrap to provide the content of your translation file (`xtb`,\r\n * `xlf` or `xlf2`) when you want to translate your application in another language.\r\n *\r\n * See the {@linkDocs guide/i18n#merge i18n guide} for more information.\r\n *\r\n * ### Example\r\n *\r\n * ```typescript\r\n * import { TRANSLATIONS } from '@angular/core';\r\n * import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\r\n * import { AppModule } from './app/app.module';\r\n *\r\n * // content of your translation file\r\n * const translations = '....';\r\n *\r\n * platformBrowserDynamic().bootstrapModule(AppModule, {\r\n *   providers: [{provide: TRANSLATIONS, useValue: translations }]\r\n * });\r\n * ```\r\n *\r\n * @experimental i18n support is experimental.\r\n */\r\nvar TRANSLATIONS = new InjectionToken('Translations');\r\n/**\r\n * Provide this token at bootstrap to set the format of your {@link TRANSLATIONS}: `xtb`,\r\n * `xlf` or `xlf2`.\r\n *\r\n * See the {@linkDocs guide/i18n#merge i18n guide} for more information.\r\n *\r\n * ### Example\r\n *\r\n * ```typescript\r\n * import { TRANSLATIONS_FORMAT } from '@angular/core';\r\n * import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\r\n * import { AppModule } from './app/app.module';\r\n *\r\n * platformBrowserDynamic().bootstrapModule(AppModule, {\r\n *   providers: [{provide: TRANSLATIONS_FORMAT, useValue: 'xlf' }]\r\n * });\r\n * ```\r\n *\r\n * @experimental i18n support is experimental.\r\n */\r\nvar TRANSLATIONS_FORMAT = new InjectionToken('TranslationsFormat');\r\n/**\r\n * Use this enum at bootstrap as an option of `bootstrapModule` to define the strategy\r\n * that the compiler should use in case of missing translations:\r\n * - Error: throw if you have missing translations.\r\n * - Warning (default): show a warning in the console and/or shell.\r\n * - Ignore: do nothing.\r\n *\r\n * See the {@linkDocs guide/i18n#missing-translation i18n guide} for more information.\r\n *\r\n * ### Example\r\n * ```typescript\r\n * import { MissingTranslationStrategy } from '@angular/core';\r\n * import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\r\n * import { AppModule } from './app/app.module';\r\n *\r\n * platformBrowserDynamic().bootstrapModule(AppModule, {\r\n *   missingTranslation: MissingTranslationStrategy.Error\r\n * });\r\n * ```\r\n *\r\n * @experimental i18n support is experimental.\r\n */\r\n/**\r\n * Use this enum at bootstrap as an option of `bootstrapModule` to define the strategy\r\n * that the compiler should use in case of missing translations:\r\n * - Error: throw if you have missing translations.\r\n * - Warning (default): show a warning in the console and/or shell.\r\n * - Ignore: do nothing.\r\n *\r\n * See the {@linkDocs guide/i18n#missing-translation i18n guide} for more information.\r\n *\r\n * ### Example\r\n * ```typescript\r\n * import { MissingTranslationStrategy } from '@angular/core';\r\n * import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\r\n * import { AppModule } from './app/app.module';\r\n *\r\n * platformBrowserDynamic().bootstrapModule(AppModule, {\r\n *   missingTranslation: MissingTranslationStrategy.Error\r\n * });\r\n * ```\r\n *\r\n * @experimental i18n support is experimental.\r\n */\r\nvar MissingTranslationStrategy;\r\n/**\r\n * Use this enum at bootstrap as an option of `bootstrapModule` to define the strategy\r\n * that the compiler should use in case of missing translations:\r\n * - Error: throw if you have missing translations.\r\n * - Warning (default): show a warning in the console and/or shell.\r\n * - Ignore: do nothing.\r\n *\r\n * See the {@linkDocs guide/i18n#missing-translation i18n guide} for more information.\r\n *\r\n * ### Example\r\n * ```typescript\r\n * import { MissingTranslationStrategy } from '@angular/core';\r\n * import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\r\n * import { AppModule } from './app/app.module';\r\n *\r\n * platformBrowserDynamic().bootstrapModule(AppModule, {\r\n *   missingTranslation: MissingTranslationStrategy.Error\r\n * });\r\n * ```\r\n *\r\n * @experimental i18n support is experimental.\r\n */\r\n(function (MissingTranslationStrategy) {\r\n    MissingTranslationStrategy[MissingTranslationStrategy[\"Error\"] = 0] = \"Error\";\r\n    MissingTranslationStrategy[MissingTranslationStrategy[\"Warning\"] = 1] = \"Warning\";\r\n    MissingTranslationStrategy[MissingTranslationStrategy[\"Ignore\"] = 2] = \"Ignore\";\r\n})(MissingTranslationStrategy || (MissingTranslationStrategy = {}));\r\n\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nfunction _iterableDiffersFactory() {\r\n    return defaultIterableDiffers;\r\n}\r\nfunction _keyValueDiffersFactory() {\r\n    return defaultKeyValueDiffers;\r\n}\r\nfunction _localeFactory(locale) {\r\n    return locale || 'en-US';\r\n}\r\n/**\r\n * This module includes the providers of @angular/core that are needed\r\n * to bootstrap components via `ApplicationRef`.\r\n *\r\n * @experimental\r\n */\r\nvar ApplicationModule = /** @class */ (function () {\r\n    // Inject ApplicationRef to make it eager...\r\n    function ApplicationModule(appRef) {\r\n    }\r\n    ApplicationModule.decorators = [\r\n        { type: NgModule, args: [{\r\n                    providers: [\r\n                        ApplicationRef,\r\n                        ApplicationInitStatus,\r\n                        Compiler,\r\n                        APP_ID_RANDOM_PROVIDER,\r\n                        { provide: IterableDiffers, useFactory: _iterableDiffersFactory },\r\n                        { provide: KeyValueDiffers, useFactory: _keyValueDiffersFactory },\r\n                        {\r\n                            provide: LOCALE_ID,\r\n                            useFactory: _localeFactory,\r\n                            deps: [[new Inject(LOCALE_ID), new Optional(), new SkipSelf()]]\r\n                        },\r\n                    ]\r\n                },] }\r\n    ];\r\n    /** @nocollapse */\r\n    ApplicationModule.ctorParameters = function () { return [\r\n        { type: ApplicationRef, },\r\n    ]; };\r\n    return ApplicationModule;\r\n}());\r\n\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * This helper class is used to get hold of an inert tree of DOM elements containing dirty HTML\r\n * that needs sanitizing.\r\n * Depending upon browser support we must use one of three strategies for doing this.\r\n * Support: Safari 10.x -> XHR strategy\r\n * Support: Firefox -> DomParser strategy\r\n * Default: InertDocument strategy\r\n */\r\nvar InertBodyHelper = /** @class */ (function () {\r\n    function InertBodyHelper(defaultDoc) {\r\n        this.defaultDoc = defaultDoc;\r\n        this.inertDocument = this.defaultDoc.implementation.createHTMLDocument('sanitization-inert');\r\n        this.inertBodyElement = this.inertDocument.body;\r\n        if (this.inertBodyElement == null) {\r\n            // usually there should be only one body element in the document, but IE doesn't have any, so\r\n            // we need to create one.\r\n            var inertHtml = this.inertDocument.createElement('html');\r\n            this.inertDocument.appendChild(inertHtml);\r\n            this.inertBodyElement = this.inertDocument.createElement('body');\r\n            inertHtml.appendChild(this.inertBodyElement);\r\n        }\r\n        this.inertBodyElement.innerHTML = '<svg><g onload=\"this.parentNode.remove()\"></g></svg>';\r\n        if (this.inertBodyElement.querySelector && !this.inertBodyElement.querySelector('svg')) {\r\n            // We just hit the Safari 10.1 bug - which allows JS to run inside the SVG G element\r\n            // so use the XHR strategy.\r\n            this.getInertBodyElement = this.getInertBodyElement_XHR;\r\n            return;\r\n        }\r\n        this.inertBodyElement.innerHTML =\r\n            '<svg><p><style><img src=\"</style><img src=x onerror=alert(1)//\">';\r\n        if (this.inertBodyElement.querySelector && this.inertBodyElement.querySelector('svg img')) {\r\n            // We just hit the Firefox bug - which prevents the inner img JS from being sanitized\r\n            // so use the DOMParser strategy, if it is available.\r\n            // If the DOMParser is not available then we are not in Firefox (Server/WebWorker?) so we\r\n            // fall through to the default strategy below.\r\n            if (isDOMParserAvailable()) {\r\n                this.getInertBodyElement = this.getInertBodyElement_DOMParser;\r\n                return;\r\n            }\r\n        }\r\n        // None of the bugs were hit so it is safe for us to use the default InertDocument strategy\r\n        this.getInertBodyElement = this.getInertBodyElement_InertDocument;\r\n    }\r\n    /**\r\n     * Use XHR to create and fill an inert body element (on Safari 10.1)\r\n     * See\r\n     * https://github.com/cure53/DOMPurify/blob/a992d3a75031cb8bb032e5ea8399ba972bdf9a65/src/purify.js#L439-L449\r\n     */\r\n    /**\r\n       * Use XHR to create and fill an inert body element (on Safari 10.1)\r\n       * See\r\n       * https://github.com/cure53/DOMPurify/blob/a992d3a75031cb8bb032e5ea8399ba972bdf9a65/src/purify.js#L439-L449\r\n       */\r\n    InertBodyHelper.prototype.getInertBodyElement_XHR = /**\r\n       * Use XHR to create and fill an inert body element (on Safari 10.1)\r\n       * See\r\n       * https://github.com/cure53/DOMPurify/blob/a992d3a75031cb8bb032e5ea8399ba972bdf9a65/src/purify.js#L439-L449\r\n       */\r\n    function (html) {\r\n        // We add these extra elements to ensure that the rest of the content is parsed as expected\r\n        // e.g. leading whitespace is maintained and tags like `<meta>` do not get hoisted to the\r\n        // `<head>` tag.\r\n        html = '<body><remove></remove>' + html + '</body>';\r\n        try {\r\n            html = encodeURI(html);\r\n        }\r\n        catch (e) {\r\n            return null;\r\n        }\r\n        var xhr = new XMLHttpRequest();\r\n        xhr.responseType = 'document';\r\n        xhr.open('GET', 'data:text/html;charset=utf-8,' + html, false);\r\n        xhr.send(null);\r\n        var body = xhr.response.body;\r\n        body.removeChild((body.firstChild));\r\n        return body;\r\n    };\r\n    /**\r\n     * Use DOMParser to create and fill an inert body element (on Firefox)\r\n     * See https://github.com/cure53/DOMPurify/releases/tag/0.6.7\r\n     *\r\n     */\r\n    /**\r\n       * Use DOMParser to create and fill an inert body element (on Firefox)\r\n       * See https://github.com/cure53/DOMPurify/releases/tag/0.6.7\r\n       *\r\n       */\r\n    InertBodyHelper.prototype.getInertBodyElement_DOMParser = /**\r\n       * Use DOMParser to create and fill an inert body element (on Firefox)\r\n       * See https://github.com/cure53/DOMPurify/releases/tag/0.6.7\r\n       *\r\n       */\r\n    function (html) {\r\n        // We add these extra elements to ensure that the rest of the content is parsed as expected\r\n        // e.g. leading whitespace is maintained and tags like `<meta>` do not get hoisted to the\r\n        // `<head>` tag.\r\n        html = '<body><remove></remove>' + html + '</body>';\r\n        try {\r\n            var body = new window\r\n                .DOMParser()\r\n                .parseFromString(html, 'text/html')\r\n                .body;\r\n            body.removeChild((body.firstChild));\r\n            return body;\r\n        }\r\n        catch (e) {\r\n            return null;\r\n        }\r\n    };\r\n    /**\r\n     * Use an HTML5 `template` element, if supported, or an inert body element created via\r\n     * `createHtmlDocument` to create and fill an inert DOM element.\r\n     * This is the default sane strategy to use if the browser does not require one of the specialised\r\n     * strategies above.\r\n     */\r\n    /**\r\n       * Use an HTML5 `template` element, if supported, or an inert body element created via\r\n       * `createHtmlDocument` to create and fill an inert DOM element.\r\n       * This is the default sane strategy to use if the browser does not require one of the specialised\r\n       * strategies above.\r\n       */\r\n    InertBodyHelper.prototype.getInertBodyElement_InertDocument = /**\r\n       * Use an HTML5 `template` element, if supported, or an inert body element created via\r\n       * `createHtmlDocument` to create and fill an inert DOM element.\r\n       * This is the default sane strategy to use if the browser does not require one of the specialised\r\n       * strategies above.\r\n       */\r\n    function (html) {\r\n        // Prefer using <template> element if supported.\r\n        var templateEl = this.inertDocument.createElement('template');\r\n        if ('content' in templateEl) {\r\n            templateEl.innerHTML = html;\r\n            return templateEl;\r\n        }\r\n        this.inertBodyElement.innerHTML = html;\r\n        // Support: IE 9-11 only\r\n        // strip custom-namespaced attributes on IE<=11\r\n        if (this.defaultDoc.documentMode) {\r\n            this.stripCustomNsAttrs(this.inertBodyElement);\r\n        }\r\n        return this.inertBodyElement;\r\n    };\r\n    /**\r\n     * When IE9-11 comes across an unknown namespaced attribute e.g. 'xlink:foo' it adds 'xmlns:ns1'\r\n     * attribute to declare ns1 namespace and prefixes the attribute with 'ns1' (e.g.\r\n     * 'ns1:xlink:foo').\r\n     *\r\n     * This is undesirable since we don't want to allow any of these custom attributes. This method\r\n     * strips them all.\r\n     */\r\n    /**\r\n       * When IE9-11 comes across an unknown namespaced attribute e.g. 'xlink:foo' it adds 'xmlns:ns1'\r\n       * attribute to declare ns1 namespace and prefixes the attribute with 'ns1' (e.g.\r\n       * 'ns1:xlink:foo').\r\n       *\r\n       * This is undesirable since we don't want to allow any of these custom attributes. This method\r\n       * strips them all.\r\n       */\r\n    InertBodyHelper.prototype.stripCustomNsAttrs = /**\r\n       * When IE9-11 comes across an unknown namespaced attribute e.g. 'xlink:foo' it adds 'xmlns:ns1'\r\n       * attribute to declare ns1 namespace and prefixes the attribute with 'ns1' (e.g.\r\n       * 'ns1:xlink:foo').\r\n       *\r\n       * This is undesirable since we don't want to allow any of these custom attributes. This method\r\n       * strips them all.\r\n       */\r\n    function (el) {\r\n        var elAttrs = el.attributes;\r\n        // loop backwards so that we can support removals.\r\n        for (var i = elAttrs.length - 1; 0 < i; i--) {\r\n            var attrib = elAttrs.item(i);\r\n            var attrName = attrib.name;\r\n            if (attrName === 'xmlns:ns1' || attrName.indexOf('ns1:') === 0) {\r\n                el.removeAttribute(attrName);\r\n            }\r\n        }\r\n        var childNode = el.firstChild;\r\n        while (childNode) {\r\n            if (childNode.nodeType === Node.ELEMENT_NODE)\r\n                this.stripCustomNsAttrs(childNode);\r\n            childNode = childNode.nextSibling;\r\n        }\r\n    };\r\n    return InertBodyHelper;\r\n}());\r\n/**\r\n * We need to determine whether the DOMParser exists in the global context.\r\n * The try-catch is because, on some browsers, trying to access this property\r\n * on window can actually throw an error.\r\n *\r\n * @suppress {uselessCode}\r\n */\r\nfunction isDOMParserAvailable() {\r\n    try {\r\n        return !!window.DOMParser;\r\n    }\r\n    catch (e) {\r\n        return false;\r\n    }\r\n}\r\n\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * A pattern that recognizes a commonly useful subset of URLs that are safe.\r\n *\r\n * This regular expression matches a subset of URLs that will not cause script\r\n * execution if used in URL context within a HTML document. Specifically, this\r\n * regular expression matches if (comment from here on and regex copied from\r\n * Soy's EscapingConventions):\r\n * (1) Either a protocol in a whitelist (http, https, mailto or ftp).\r\n * (2) or no protocol.  A protocol must be followed by a colon. The below\r\n *     allows that by allowing colons only after one of the characters [/?#].\r\n *     A colon after a hash (#) must be in the fragment.\r\n *     Otherwise, a colon after a (?) must be in a query.\r\n *     Otherwise, a colon after a single solidus (/) must be in a path.\r\n *     Otherwise, a colon after a double solidus (//) must be in the authority\r\n *     (before port).\r\n *\r\n * The pattern disallows &, used in HTML entity declarations before\r\n * one of the characters in [/?#]. This disallows HTML entities used in the\r\n * protocol name, which should never happen, e.g. \"h&#116;tp\" for \"http\".\r\n * It also disallows HTML entities in the first path part of a relative path,\r\n * e.g. \"foo&lt;bar/baz\".  Our existing escaping functions should not produce\r\n * that. More importantly, it disallows masking of a colon,\r\n * e.g. \"javascript&#58;...\".\r\n *\r\n * This regular expression was taken from the Closure sanitization library.\r\n */\r\nvar SAFE_URL_PATTERN = /^(?:(?:https?|mailto|ftp|tel|file):|[^&:/?#]*(?:[/?#]|$))/gi;\r\n/** A pattern that matches safe data URLs. Only matches image, video and audio types. */\r\nvar DATA_URL_PATTERN = /^data:(?:image\\/(?:bmp|gif|jpeg|jpg|png|tiff|webp)|video\\/(?:mpeg|mp4|ogg|webm)|audio\\/(?:mp3|oga|ogg|opus));base64,[a-z0-9+\\/]+=*$/i;\r\nfunction _sanitizeUrl(url) {\r\n    url = String(url);\r\n    if (url.match(SAFE_URL_PATTERN) || url.match(DATA_URL_PATTERN))\r\n        return url;\r\n    if (isDevMode()) {\r\n        console.warn(\"WARNING: sanitizing unsafe URL value \" + url + \" (see http://g.co/ng/security#xss)\");\r\n    }\r\n    return 'unsafe:' + url;\r\n}\r\nfunction sanitizeSrcset(srcset) {\r\n    srcset = String(srcset);\r\n    return srcset.split(',').map(function (srcset) { return _sanitizeUrl(srcset.trim()); }).join(', ');\r\n}\r\n\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nfunction tagSet(tags) {\r\n    var res = {};\r\n    try {\r\n        for (var _a = __values(tags.split(',')), _b = _a.next(); !_b.done; _b = _a.next()) {\r\n            var t = _b.value;\r\n            res[t] = true;\r\n        }\r\n    }\r\n    catch (e_1_1) { e_1 = { error: e_1_1 }; }\r\n    finally {\r\n        try {\r\n            if (_b && !_b.done && (_c = _a.return)) _c.call(_a);\r\n        }\r\n        finally { if (e_1) throw e_1.error; }\r\n    }\r\n    return res;\r\n    var e_1, _c;\r\n}\r\nfunction merge$1() {\r\n    var sets = [];\r\n    for (var _i = 0; _i < arguments.length; _i++) {\r\n        sets[_i] = arguments[_i];\r\n    }\r\n    var res = {};\r\n    try {\r\n        for (var sets_1 = __values(sets), sets_1_1 = sets_1.next(); !sets_1_1.done; sets_1_1 = sets_1.next()) {\r\n            var s = sets_1_1.value;\r\n            for (var v in s) {\r\n                if (s.hasOwnProperty(v))\r\n                    res[v] = true;\r\n            }\r\n        }\r\n    }\r\n    catch (e_2_1) { e_2 = { error: e_2_1 }; }\r\n    finally {\r\n        try {\r\n            if (sets_1_1 && !sets_1_1.done && (_a = sets_1.return)) _a.call(sets_1);\r\n        }\r\n        finally { if (e_2) throw e_2.error; }\r\n    }\r\n    return res;\r\n    var e_2, _a;\r\n}\r\n// Good source of info about elements and attributes\r\n// http://dev.w3.org/html5/spec/Overview.html#semantics\r\n// http://simon.html5.org/html-elements\r\n// Safe Void Elements - HTML5\r\n// http://dev.w3.org/html5/spec/Overview.html#void-elements\r\nvar VOID_ELEMENTS = tagSet('area,br,col,hr,img,wbr');\r\n// Elements that you can, intentionally, leave open (and which close themselves)\r\n// http://dev.w3.org/html5/spec/Overview.html#optional-tags\r\nvar OPTIONAL_END_TAG_BLOCK_ELEMENTS = tagSet('colgroup,dd,dt,li,p,tbody,td,tfoot,th,thead,tr');\r\nvar OPTIONAL_END_TAG_INLINE_ELEMENTS = tagSet('rp,rt');\r\nvar OPTIONAL_END_TAG_ELEMENTS = merge$1(OPTIONAL_END_TAG_INLINE_ELEMENTS, OPTIONAL_END_TAG_BLOCK_ELEMENTS);\r\n// Safe Block Elements - HTML5\r\nvar BLOCK_ELEMENTS = merge$1(OPTIONAL_END_TAG_BLOCK_ELEMENTS, tagSet('address,article,' +\r\n    'aside,blockquote,caption,center,del,details,dialog,dir,div,dl,figure,figcaption,footer,h1,h2,h3,h4,h5,' +\r\n    'h6,header,hgroup,hr,ins,main,map,menu,nav,ol,pre,section,summary,table,ul'));\r\n// Inline Elements - HTML5\r\nvar INLINE_ELEMENTS = merge$1(OPTIONAL_END_TAG_INLINE_ELEMENTS, tagSet('a,abbr,acronym,audio,b,' +\r\n    'bdi,bdo,big,br,cite,code,del,dfn,em,font,i,img,ins,kbd,label,map,mark,picture,q,ruby,rp,rt,s,' +\r\n    'samp,small,source,span,strike,strong,sub,sup,time,track,tt,u,var,video'));\r\nvar VALID_ELEMENTS = merge$1(VOID_ELEMENTS, BLOCK_ELEMENTS, INLINE_ELEMENTS, OPTIONAL_END_TAG_ELEMENTS);\r\n// Attributes that have href and hence need to be sanitized\r\nvar URI_ATTRS = tagSet('background,cite,href,itemtype,longdesc,poster,src,xlink:href');\r\n// Attributes that have special href set hence need to be sanitized\r\nvar SRCSET_ATTRS = tagSet('srcset');\r\nvar HTML_ATTRS = tagSet('abbr,accesskey,align,alt,autoplay,axis,bgcolor,border,cellpadding,cellspacing,class,clear,color,cols,colspan,' +\r\n    'compact,controls,coords,datetime,default,dir,download,face,headers,height,hidden,hreflang,hspace,' +\r\n    'ismap,itemscope,itemprop,kind,label,lang,language,loop,media,muted,nohref,nowrap,open,preload,rel,rev,role,rows,rowspan,rules,' +\r\n    'scope,scrolling,shape,size,sizes,span,srclang,start,summary,tabindex,target,title,translate,type,usemap,' +\r\n    'valign,value,vspace,width');\r\n// NB: This currently consciously doesn't support SVG. SVG sanitization has had several security\r\n// issues in the past, so it seems safer to leave it out if possible. If support for binding SVG via\r\n// innerHTML is required, SVG attributes should be added here.\r\n// NB: Sanitization does not allow <form> elements or other active elements (<button> etc). Those\r\n// can be sanitized, but they increase security surface area without a legitimate use case, so they\r\n// are left out here.\r\nvar VALID_ATTRS = merge$1(URI_ATTRS, SRCSET_ATTRS, HTML_ATTRS);\r\n/**\r\n * SanitizingHtmlSerializer serializes a DOM fragment, stripping out any unsafe elements and unsafe\r\n * attributes.\r\n */\r\nvar SanitizingHtmlSerializer = /** @class */ (function () {\r\n    function SanitizingHtmlSerializer() {\r\n        // Explicitly track if something was stripped, to avoid accidentally warning of sanitization just\r\n        // because characters were re-encoded.\r\n        this.sanitizedSomething = false;\r\n        this.buf = [];\r\n    }\r\n    SanitizingHtmlSerializer.prototype.sanitizeChildren = function (el) {\r\n        // This cannot use a TreeWalker, as it has to run on Angular's various DOM adapters.\r\n        // However this code never accesses properties off of `document` before deleting its contents\r\n        // again, so it shouldn't be vulnerable to DOM clobbering.\r\n        var current = (el.firstChild);\r\n        while (current) {\r\n            if (current.nodeType === Node.ELEMENT_NODE) {\r\n                this.startElement(current);\r\n            }\r\n            else if (current.nodeType === Node.TEXT_NODE) {\r\n                this.chars((current.nodeValue));\r\n            }\r\n            else {\r\n                // Strip non-element, non-text nodes.\r\n                this.sanitizedSomething = true;\r\n            }\r\n            if (current.firstChild) {\r\n                current = (current.firstChild);\r\n                continue;\r\n            }\r\n            while (current) {\r\n                // Leaving the element. Walk up and to the right, closing tags as we go.\r\n                if (current.nodeType === Node.ELEMENT_NODE) {\r\n                    this.endElement(current);\r\n                }\r\n                var next = this.checkClobberedElement(current, (current.nextSibling));\r\n                if (next) {\r\n                    current = next;\r\n                    break;\r\n                }\r\n                current = this.checkClobberedElement(current, (current.parentNode));\r\n            }\r\n        }\r\n        return this.buf.join('');\r\n    };\r\n    SanitizingHtmlSerializer.prototype.startElement = function (element) {\r\n        var tagName = element.nodeName.toLowerCase();\r\n        if (!VALID_ELEMENTS.hasOwnProperty(tagName)) {\r\n            this.sanitizedSomething = true;\r\n            return;\r\n        }\r\n        this.buf.push('<');\r\n        this.buf.push(tagName);\r\n        var elAttrs = element.attributes;\r\n        for (var i = 0; i < elAttrs.length; i++) {\r\n            var elAttr = elAttrs.item(i);\r\n            var attrName = elAttr.name;\r\n            var lower = attrName.toLowerCase();\r\n            if (!VALID_ATTRS.hasOwnProperty(lower)) {\r\n                this.sanitizedSomething = true;\r\n                continue;\r\n            }\r\n            var value = elAttr.value;\r\n            // TODO(martinprobst): Special case image URIs for data:image/...\r\n            if (URI_ATTRS[lower])\r\n                value = _sanitizeUrl(value);\r\n            if (SRCSET_ATTRS[lower])\r\n                value = sanitizeSrcset(value);\r\n            this.buf.push(' ', attrName, '=\"', encodeEntities(value), '\"');\r\n        }\r\n        this.buf.push('>');\r\n    };\r\n    SanitizingHtmlSerializer.prototype.endElement = function (current) {\r\n        var tagName = current.nodeName.toLowerCase();\r\n        if (VALID_ELEMENTS.hasOwnProperty(tagName) && !VOID_ELEMENTS.hasOwnProperty(tagName)) {\r\n            this.buf.push('</');\r\n            this.buf.push(tagName);\r\n            this.buf.push('>');\r\n        }\r\n    };\r\n    SanitizingHtmlSerializer.prototype.chars = function (chars) { this.buf.push(encodeEntities(chars)); };\r\n    SanitizingHtmlSerializer.prototype.checkClobberedElement = function (node, nextNode) {\r\n        if (nextNode &&\r\n            (node.compareDocumentPosition(nextNode) &\r\n                Node.DOCUMENT_POSITION_CONTAINED_BY) === Node.DOCUMENT_POSITION_CONTAINED_BY) {\r\n            throw new Error(\"Failed to sanitize html because the element is clobbered: \" + node.outerHTML);\r\n        }\r\n        return nextNode;\r\n    };\r\n    return SanitizingHtmlSerializer;\r\n}());\r\n// Regular Expressions for parsing tags and attributes\r\nvar SURROGATE_PAIR_REGEXP = /[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]/g;\r\n// ! to ~ is the ASCII range.\r\nvar NON_ALPHANUMERIC_REGEXP = /([^\\#-~ |!])/g;\r\n/**\r\n * Escapes all potentially dangerous characters, so that the\r\n * resulting string can be safely inserted into attribute or\r\n * element text.\r\n * @param value\r\n */\r\nfunction encodeEntities(value) {\r\n    return value.replace(/&/g, '&amp;')\r\n        .replace(SURROGATE_PAIR_REGEXP, function (match) {\r\n        var hi = match.charCodeAt(0);\r\n        var low = match.charCodeAt(1);\r\n        return '&#' + (((hi - 0xD800) * 0x400) + (low - 0xDC00) + 0x10000) + ';';\r\n    })\r\n        .replace(NON_ALPHANUMERIC_REGEXP, function (match) { return '&#' + match.charCodeAt(0) + ';'; })\r\n        .replace(/</g, '&lt;')\r\n        .replace(/>/g, '&gt;');\r\n}\r\nvar inertBodyHelper;\r\n/**\r\n * Sanitizes the given unsafe, untrusted HTML fragment, and returns HTML text that is safe to add to\r\n * the DOM in a browser environment.\r\n */\r\nfunction _sanitizeHtml(defaultDoc, unsafeHtmlInput) {\r\n    var inertBodyElement = null;\r\n    try {\r\n        inertBodyHelper = inertBodyHelper || new InertBodyHelper(defaultDoc);\r\n        // Make sure unsafeHtml is actually a string (TypeScript types are not enforced at runtime).\r\n        var unsafeHtml = unsafeHtmlInput ? String(unsafeHtmlInput) : '';\r\n        inertBodyElement = inertBodyHelper.getInertBodyElement(unsafeHtml);\r\n        // mXSS protection. Repeatedly parse the document to make sure it stabilizes, so that a browser\r\n        // trying to auto-correct incorrect HTML cannot cause formerly inert HTML to become dangerous.\r\n        var mXSSAttempts = 5;\r\n        var parsedHtml = unsafeHtml;\r\n        do {\r\n            if (mXSSAttempts === 0) {\r\n                throw new Error('Failed to sanitize html because the input is unstable');\r\n            }\r\n            mXSSAttempts--;\r\n            unsafeHtml = parsedHtml;\r\n            parsedHtml = inertBodyElement.innerHTML;\r\n            inertBodyElement = inertBodyHelper.getInertBodyElement(unsafeHtml);\r\n        } while (unsafeHtml !== parsedHtml);\r\n        var sanitizer = new SanitizingHtmlSerializer();\r\n        var safeHtml = sanitizer.sanitizeChildren(getTemplateContent((inertBodyElement)) || inertBodyElement);\r\n        if (isDevMode() && sanitizer.sanitizedSomething) {\r\n            console.warn('WARNING: sanitizing HTML stripped some content (see http://g.co/ng/security#xss).');\r\n        }\r\n        return safeHtml;\r\n    }\r\n    finally {\r\n        // In case anything goes wrong, clear out inertElement to reset the entire DOM structure.\r\n        if (inertBodyElement) {\r\n            var parent_1 = getTemplateContent(inertBodyElement) || inertBodyElement;\r\n            while (parent_1.firstChild) {\r\n                parent_1.removeChild(parent_1.firstChild);\r\n            }\r\n        }\r\n    }\r\n}\r\nfunction getTemplateContent(el) {\r\n    return 'content' in el /** Microsoft/TypeScript#21517 */ && isTemplateElement(el) ?\r\n        el.content :\r\n        null;\r\n}\r\nfunction isTemplateElement(el) {\r\n    return el.nodeType === Node.ELEMENT_NODE && el.nodeName === 'TEMPLATE';\r\n}\r\n\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * Regular expression for safe style values.\r\n *\r\n * Quotes (\" and ') are allowed, but a check must be done elsewhere to ensure they're balanced.\r\n *\r\n * ',' allows multiple values to be assigned to the same property (e.g. background-attachment or\r\n * font-family) and hence could allow multiple values to get injected, but that should pose no risk\r\n * of XSS.\r\n *\r\n * The function expression checks only for XSS safety, not for CSS validity.\r\n *\r\n * This regular expression was taken from the Closure sanitization library, and augmented for\r\n * transformation values.\r\n */\r\nvar VALUES = '[-,.\"\\'%_!# a-zA-Z0-9]+';\r\nvar TRANSFORMATION_FNS = '(?:matrix|translate|scale|rotate|skew|perspective)(?:X|Y|3d)?';\r\nvar COLOR_FNS = '(?:rgb|hsl)a?';\r\nvar GRADIENTS = '(?:repeating-)?(?:linear|radial)-gradient';\r\nvar CSS3_FNS = '(?:calc|attr)';\r\nvar FN_ARGS = '\\\\([-0-9.%, #a-zA-Z]+\\\\)';\r\nvar SAFE_STYLE_VALUE = new RegExp(\"^(\" + VALUES + \"|\" +\r\n    (\"(?:\" + TRANSFORMATION_FNS + \"|\" + COLOR_FNS + \"|\" + GRADIENTS + \"|\" + CSS3_FNS + \")\") +\r\n    (FN_ARGS + \")$\"), 'g');\r\n/**\r\n * Matches a `url(...)` value with an arbitrary argument as long as it does\r\n * not contain parentheses.\r\n *\r\n * The URL value still needs to be sanitized separately.\r\n *\r\n * `url(...)` values are a very common use case, e.g. for `background-image`. With carefully crafted\r\n * CSS style rules, it is possible to construct an information leak with `url` values in CSS, e.g.\r\n * by observing whether scroll bars are displayed, or character ranges used by a font face\r\n * definition.\r\n *\r\n * Angular only allows binding CSS values (as opposed to entire CSS rules), so it is unlikely that\r\n * binding a URL value without further cooperation from the page will cause an information leak, and\r\n * if so, it is just a leak, not a full blown XSS vulnerability.\r\n *\r\n * Given the common use case, low likelihood of attack vector, and low impact of an attack, this\r\n * code is permissive and allows URLs that sanitize otherwise.\r\n */\r\nvar URL_RE = /^url\\(([^)]+)\\)$/;\r\n/**\r\n * Checks that quotes (\" and ') are properly balanced inside a string. Assumes\r\n * that neither escape (\\) nor any other character that could result in\r\n * breaking out of a string parsing context are allowed;\r\n * see http://www.w3.org/TR/css3-syntax/#string-token-diagram.\r\n *\r\n * This code was taken from the Closure sanitization library.\r\n */\r\nfunction hasBalancedQuotes(value) {\r\n    var outsideSingle = true;\r\n    var outsideDouble = true;\r\n    for (var i = 0; i < value.length; i++) {\r\n        var c = value.charAt(i);\r\n        if (c === '\\'' && outsideDouble) {\r\n            outsideSingle = !outsideSingle;\r\n        }\r\n        else if (c === '\"' && outsideSingle) {\r\n            outsideDouble = !outsideDouble;\r\n        }\r\n    }\r\n    return outsideSingle && outsideDouble;\r\n}\r\n/**\r\n * Sanitizes the given untrusted CSS style property value (i.e. not an entire object, just a single\r\n * value) and returns a value that is safe to use in a browser environment.\r\n */\r\nfunction _sanitizeStyle(value) {\r\n    value = String(value).trim(); // Make sure it's actually a string.\r\n    if (!value)\r\n        return '';\r\n    // Single url(...) values are supported, but only for URLs that sanitize cleanly. See above for\r\n    // reasoning behind this.\r\n    var urlMatch = value.match(URL_RE);\r\n    if ((urlMatch && _sanitizeUrl(urlMatch[1]) === urlMatch[1]) ||\r\n        value.match(SAFE_STYLE_VALUE) && hasBalancedQuotes(value)) {\r\n        return value; // Safe style values.\r\n    }\r\n    if (isDevMode()) {\r\n        console.warn(\"WARNING: sanitizing unsafe style value \" + value + \" (see http://g.co/ng/security#xss).\");\r\n    }\r\n    return 'unsafe';\r\n}\r\n\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * A SecurityContext marks a location that has dangerous security implications, e.g. a DOM property\r\n * like `innerHTML` that could cause Cross Site Scripting (XSS) security bugs when improperly\r\n * handled.\r\n *\r\n * See DomSanitizer for more details on security in Angular applications.\r\n *\r\n *\r\n */\r\n/**\r\n * A SecurityContext marks a location that has dangerous security implications, e.g. a DOM property\r\n * like `innerHTML` that could cause Cross Site Scripting (XSS) security bugs when improperly\r\n * handled.\r\n *\r\n * See DomSanitizer for more details on security in Angular applications.\r\n *\r\n *\r\n */\r\nvar SecurityContext;\r\n/**\r\n * A SecurityContext marks a location that has dangerous security implications, e.g. a DOM property\r\n * like `innerHTML` that could cause Cross Site Scripting (XSS) security bugs when improperly\r\n * handled.\r\n *\r\n * See DomSanitizer for more details on security in Angular applications.\r\n *\r\n *\r\n */\r\n(function (SecurityContext) {\r\n    SecurityContext[SecurityContext[\"NONE\"] = 0] = \"NONE\";\r\n    SecurityContext[SecurityContext[\"HTML\"] = 1] = \"HTML\";\r\n    SecurityContext[SecurityContext[\"STYLE\"] = 2] = \"STYLE\";\r\n    SecurityContext[SecurityContext[\"SCRIPT\"] = 3] = \"SCRIPT\";\r\n    SecurityContext[SecurityContext[\"URL\"] = 4] = \"URL\";\r\n    SecurityContext[SecurityContext[\"RESOURCE_URL\"] = 5] = \"RESOURCE_URL\";\r\n})(SecurityContext || (SecurityContext = {}));\r\n/**\r\n * Sanitizer is used by the views to sanitize potentially dangerous values.\r\n *\r\n *\r\n */\r\nvar Sanitizer = /** @class */ (function () {\r\n    function Sanitizer() {\r\n    }\r\n    return Sanitizer;\r\n}());\r\n\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n// Called before each cycle of a view's check to detect whether this is in the\r\n// initState for which we need to call ngOnInit, ngAfterContentInit or ngAfterViewInit\r\n// lifecycle methods. Returns true if this check cycle should call lifecycle\r\n// methods.\r\nfunction shiftInitState(view, priorInitState, newInitState) {\r\n    // Only update the InitState if we are currently in the prior state.\r\n    // For example, only move into CallingInit if we are in BeforeInit. Only\r\n    // move into CallingContentInit if we are in CallingInit. Normally this will\r\n    // always be true because of how checkCycle is called in checkAndUpdateView.\r\n    // However, if checkAndUpdateView is called recursively or if an exception is\r\n    // thrown while checkAndUpdateView is running, checkAndUpdateView starts over\r\n    // from the beginning. This ensures the state is monotonically increasing,\r\n    // terminating in the AfterInit state, which ensures the Init methods are called\r\n    // at least once and only once.\r\n    var state = view.state;\r\n    var initState = state & 1792;\r\n    if (initState === priorInitState) {\r\n        view.state = (state & ~1792 /* InitState_Mask */) | newInitState;\r\n        view.initIndex = -1;\r\n        return true;\r\n    }\r\n    return initState === newInitState;\r\n}\r\n// Returns true if the lifecycle init method should be called for the node with\r\n// the given init index.\r\nfunction shouldCallLifecycleInitHook(view, initState, index) {\r\n    if ((view.state & 1792 /* InitState_Mask */) === initState && view.initIndex <= index) {\r\n        view.initIndex = index + 1;\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\n/**\r\n * Accessor for view.nodes, enforcing that every usage site stays monomorphic.\r\n */\r\nfunction asTextData(view, index) {\r\n    return view.nodes[index];\r\n}\r\n/**\r\n * Accessor for view.nodes, enforcing that every usage site stays monomorphic.\r\n */\r\nfunction asElementData(view, index) {\r\n    return view.nodes[index];\r\n}\r\n/**\r\n * Accessor for view.nodes, enforcing that every usage site stays monomorphic.\r\n */\r\nfunction asProviderData(view, index) {\r\n    return view.nodes[index];\r\n}\r\n/**\r\n * Accessor for view.nodes, enforcing that every usage site stays monomorphic.\r\n */\r\nfunction asPureExpressionData(view, index) {\r\n    return view.nodes[index];\r\n}\r\n/**\r\n * Accessor for view.nodes, enforcing that every usage site stays monomorphic.\r\n */\r\nfunction asQueryList(view, index) {\r\n    return view.nodes[index];\r\n}\r\nvar DebugContext = /** @class */ (function () {\r\n    function DebugContext() {\r\n    }\r\n    return DebugContext;\r\n}());\r\n/**\r\n * This object is used to prevent cycles in the source files and to have a place where\r\n * debug mode can hook it. It is lazily filled when `isDevMode` is known.\r\n */\r\nvar Services = {\r\n    setCurrentNode: (undefined),\r\n    createRootView: (undefined),\r\n    createEmbeddedView: (undefined),\r\n    createComponentView: (undefined),\r\n    createNgModuleRef: (undefined),\r\n    overrideProvider: (undefined),\r\n    overrideComponentView: (undefined),\r\n    clearOverrides: (undefined),\r\n    checkAndUpdateView: (undefined),\r\n    checkNoChangesView: (undefined),\r\n    destroyView: (undefined),\r\n    resolveDep: (undefined),\r\n    createDebugContext: (undefined),\r\n    handleEvent: (undefined),\r\n    updateDirectives: (undefined),\r\n    updateRenderer: (undefined),\r\n    dirtyParentQueries: (undefined),\r\n};\r\n\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nfunction expressionChangedAfterItHasBeenCheckedError(context, oldValue, currValue, isFirstCheck) {\r\n    var msg = \"ExpressionChangedAfterItHasBeenCheckedError: Expression has changed after it was checked. Previous value: '\" + oldValue + \"'. Current value: '\" + currValue + \"'.\";\r\n    if (isFirstCheck) {\r\n        msg +=\r\n            \" It seems like the view has been created after its parent and its children have been dirty checked.\" +\r\n                \" Has it been created in a change detection hook ?\";\r\n    }\r\n    return viewDebugError(msg, context);\r\n}\r\nfunction viewWrappedDebugError(err, context) {\r\n    if (!(err instanceof Error)) {\r\n        // errors that are not Error instances don't have a stack,\r\n        // so it is ok to wrap them into a new Error object...\r\n        err = new Error(err.toString());\r\n    }\r\n    _addDebugContext(err, context);\r\n    return err;\r\n}\r\nfunction viewDebugError(msg, context) {\r\n    var err = new Error(msg);\r\n    _addDebugContext(err, context);\r\n    return err;\r\n}\r\nfunction _addDebugContext(err, context) {\r\n    err[ERROR_DEBUG_CONTEXT] = context;\r\n    err[ERROR_LOGGER] = context.logError.bind(context);\r\n}\r\nfunction isViewDebugError(err) {\r\n    return !!getDebugContext(err);\r\n}\r\nfunction viewDestroyedError(action) {\r\n    return new Error(\"ViewDestroyedError: Attempt to use a destroyed view: \" + action);\r\n}\r\n\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nvar NOOP = function () { };\r\nvar _tokenKeyCache = new Map();\r\nfunction tokenKey(token) {\r\n    var key = _tokenKeyCache.get(token);\r\n    if (!key) {\r\n        key = stringify(token) + '_' + _tokenKeyCache.size;\r\n        _tokenKeyCache.set(token, key);\r\n    }\r\n    return key;\r\n}\r\nfunction unwrapValue(view, nodeIdx, bindingIdx, value) {\r\n    if (WrappedValue.isWrapped(value)) {\r\n        value = WrappedValue.unwrap(value);\r\n        var globalBindingIdx = view.def.nodes[nodeIdx].bindingIndex + bindingIdx;\r\n        var oldValue = WrappedValue.unwrap(view.oldValues[globalBindingIdx]);\r\n        view.oldValues[globalBindingIdx] = new WrappedValue(oldValue);\r\n    }\r\n    return value;\r\n}\r\nvar UNDEFINED_RENDERER_TYPE_ID = '$$undefined';\r\nvar EMPTY_RENDERER_TYPE_ID = '$$empty';\r\n// Attention: this function is called as top level function.\r\n// Putting any logic in here will destroy closure tree shaking!\r\nfunction createRendererType2(values) {\r\n    return {\r\n        id: UNDEFINED_RENDERER_TYPE_ID,\r\n        styles: values.styles,\r\n        encapsulation: values.encapsulation,\r\n        data: values.data\r\n    };\r\n}\r\nvar _renderCompCount = 0;\r\nfunction resolveRendererType2(type) {\r\n    if (type && type.id === UNDEFINED_RENDERER_TYPE_ID) {\r\n        // first time we see this RendererType2. Initialize it...\r\n        var isFilled = ((type.encapsulation != null && type.encapsulation !== ViewEncapsulation.None) ||\r\n            type.styles.length || Object.keys(type.data).length);\r\n        if (isFilled) {\r\n            type.id = \"c\" + _renderCompCount++;\r\n        }\r\n        else {\r\n            type.id = EMPTY_RENDERER_TYPE_ID;\r\n        }\r\n    }\r\n    if (type && type.id === EMPTY_RENDERER_TYPE_ID) {\r\n        type = null;\r\n    }\r\n    return type || null;\r\n}\r\nfunction checkBinding(view, def, bindingIdx, value) {\r\n    var oldValues = view.oldValues;\r\n    if ((view.state & 2 /* FirstCheck */) ||\r\n        !looseIdentical(oldValues[def.bindingIndex + bindingIdx], value)) {\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\nfunction checkAndUpdateBinding(view, def, bindingIdx, value) {\r\n    if (checkBinding(view, def, bindingIdx, value)) {\r\n        view.oldValues[def.bindingIndex + bindingIdx] = value;\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\nfunction checkBindingNoChanges(view, def, bindingIdx, value) {\r\n    var oldValue = view.oldValues[def.bindingIndex + bindingIdx];\r\n    if ((view.state & 1 /* BeforeFirstCheck */) || !devModeEqual(oldValue, value)) {\r\n        var bindingName = def.bindings[bindingIdx].name;\r\n        throw expressionChangedAfterItHasBeenCheckedError(Services.createDebugContext(view, def.nodeIndex), bindingName + \": \" + oldValue, bindingName + \": \" + value, (view.state & 1 /* BeforeFirstCheck */) !== 0);\r\n    }\r\n}\r\nfunction markParentViewsForCheck(view) {\r\n    var currView = view;\r\n    while (currView) {\r\n        if (currView.def.flags & 2 /* OnPush */) {\r\n            currView.state |= 8 /* ChecksEnabled */;\r\n        }\r\n        currView = currView.viewContainerParent || currView.parent;\r\n    }\r\n}\r\nfunction markParentViewsForCheckProjectedViews(view, endView) {\r\n    var currView = view;\r\n    while (currView && currView !== endView) {\r\n        currView.state |= 64 /* CheckProjectedViews */;\r\n        currView = currView.viewContainerParent || currView.parent;\r\n    }\r\n}\r\nfunction dispatchEvent(view, nodeIndex, eventName, event) {\r\n    try {\r\n        var nodeDef = view.def.nodes[nodeIndex];\r\n        var startView = nodeDef.flags & 33554432 /* ComponentView */ ?\r\n            asElementData(view, nodeIndex).componentView :\r\n            view;\r\n        markParentViewsForCheck(startView);\r\n        return Services.handleEvent(view, nodeIndex, eventName, event);\r\n    }\r\n    catch (e) {\r\n        // Attention: Don't rethrow, as it would cancel Observable subscriptions!\r\n        view.root.errorHandler.handleError(e);\r\n    }\r\n}\r\nfunction declaredViewContainer(view) {\r\n    if (view.parent) {\r\n        var parentView = view.parent;\r\n        return asElementData(parentView, view.parentNodeDef.nodeIndex);\r\n    }\r\n    return null;\r\n}\r\n/**\r\n * for component views, this is the host element.\r\n * for embedded views, this is the index of the parent node\r\n * that contains the view container.\r\n */\r\nfunction viewParentEl(view) {\r\n    var parentView = view.parent;\r\n    if (parentView) {\r\n        return view.parentNodeDef.parent;\r\n    }\r\n    else {\r\n        return null;\r\n    }\r\n}\r\nfunction renderNode(view, def) {\r\n    switch (def.flags & 201347067 /* Types */) {\r\n        case 1 /* TypeElement */:\r\n            return asElementData(view, def.nodeIndex).renderElement;\r\n        case 2 /* TypeText */:\r\n            return asTextData(view, def.nodeIndex).renderText;\r\n    }\r\n}\r\nfunction elementEventFullName(target, name) {\r\n    return target ? target + \":\" + name : name;\r\n}\r\nfunction isComponentView(view) {\r\n    return !!view.parent && !!(view.parentNodeDef.flags & 32768 /* Component */);\r\n}\r\nfunction isEmbeddedView(view) {\r\n    return !!view.parent && !(view.parentNodeDef.flags & 32768 /* Component */);\r\n}\r\nfunction filterQueryId(queryId) {\r\n    return 1 << (queryId % 32);\r\n}\r\nfunction splitMatchedQueriesDsl(matchedQueriesDsl) {\r\n    var matchedQueries = {};\r\n    var matchedQueryIds = 0;\r\n    var references = {};\r\n    if (matchedQueriesDsl) {\r\n        matchedQueriesDsl.forEach(function (_a) {\r\n            var _b = __read(_a, 2), queryId = _b[0], valueType = _b[1];\r\n            if (typeof queryId === 'number') {\r\n                matchedQueries[queryId] = valueType;\r\n                matchedQueryIds |= filterQueryId(queryId);\r\n            }\r\n            else {\r\n                references[queryId] = valueType;\r\n            }\r\n        });\r\n    }\r\n    return { matchedQueries: matchedQueries, references: references, matchedQueryIds: matchedQueryIds };\r\n}\r\nfunction splitDepsDsl(deps, sourceName) {\r\n    return deps.map(function (value) {\r\n        var token;\r\n        var flags;\r\n        if (Array.isArray(value)) {\r\n            _a = __read(value, 2), flags = _a[0], token = _a[1];\r\n        }\r\n        else {\r\n            flags = 0 /* None */;\r\n            token = value;\r\n        }\r\n        if (token && (typeof token === 'function' || typeof token === 'object') && sourceName) {\r\n            Object.defineProperty(token, SOURCE, { value: sourceName, configurable: true });\r\n        }\r\n        return { flags: flags, token: token, tokenKey: tokenKey(token) };\r\n        var _a;\r\n    });\r\n}\r\nfunction getParentRenderElement(view, renderHost, def) {\r\n    var renderParent = def.renderParent;\r\n    if (renderParent) {\r\n        if ((renderParent.flags & 1 /* TypeElement */) === 0 ||\r\n            (renderParent.flags & 33554432 /* ComponentView */) === 0 ||\r\n            (renderParent.element.componentRendererType &&\r\n                renderParent.element.componentRendererType.encapsulation ===\r\n                    ViewEncapsulation.Native)) {\r\n            // only children of non components, or children of components with native encapsulation should\r\n            // be attached.\r\n            return asElementData(view, def.renderParent.nodeIndex).renderElement;\r\n        }\r\n    }\r\n    else {\r\n        return renderHost;\r\n    }\r\n}\r\nvar DEFINITION_CACHE = new WeakMap();\r\nfunction resolveDefinition(factory) {\r\n    var value = DEFINITION_CACHE.get(factory);\r\n    if (!value) {\r\n        value = factory(function () { return NOOP; });\r\n        value.factory = factory;\r\n        DEFINITION_CACHE.set(factory, value);\r\n    }\r\n    return value;\r\n}\r\nfunction rootRenderNodes(view) {\r\n    var renderNodes = [];\r\n    visitRootRenderNodes(view, 0 /* Collect */, undefined, undefined, renderNodes);\r\n    return renderNodes;\r\n}\r\nfunction visitRootRenderNodes(view, action, parentNode, nextSibling, target) {\r\n    // We need to re-compute the parent node in case the nodes have been moved around manually\r\n    if (action === 3 /* RemoveChild */) {\r\n        parentNode = view.renderer.parentNode(renderNode(view, (view.def.lastRenderRootNode)));\r\n    }\r\n    visitSiblingRenderNodes(view, action, 0, view.def.nodes.length - 1, parentNode, nextSibling, target);\r\n}\r\nfunction visitSiblingRenderNodes(view, action, startIndex, endIndex, parentNode, nextSibling, target) {\r\n    for (var i = startIndex; i <= endIndex; i++) {\r\n        var nodeDef = view.def.nodes[i];\r\n        if (nodeDef.flags & (1 /* TypeElement */ | 2 /* TypeText */ | 8 /* TypeNgContent */)) {\r\n            visitRenderNode(view, nodeDef, action, parentNode, nextSibling, target);\r\n        }\r\n        // jump to next sibling\r\n        i += nodeDef.childCount;\r\n    }\r\n}\r\nfunction visitProjectedRenderNodes(view, ngContentIndex, action, parentNode, nextSibling, target) {\r\n    var compView = view;\r\n    while (compView && !isComponentView(compView)) {\r\n        compView = compView.parent;\r\n    }\r\n    var hostView = compView.parent;\r\n    var hostElDef = viewParentEl((compView));\r\n    var startIndex = hostElDef.nodeIndex + 1;\r\n    var endIndex = hostElDef.nodeIndex + hostElDef.childCount;\r\n    for (var i = startIndex; i <= endIndex; i++) {\r\n        var nodeDef = hostView.def.nodes[i];\r\n        if (nodeDef.ngContentIndex === ngContentIndex) {\r\n            visitRenderNode((hostView), nodeDef, action, parentNode, nextSibling, target);\r\n        }\r\n        // jump to next sibling\r\n        i += nodeDef.childCount;\r\n    }\r\n    if (!hostView.parent) {\r\n        // a root view\r\n        var projectedNodes = view.root.projectableNodes[ngContentIndex];\r\n        if (projectedNodes) {\r\n            for (var i = 0; i < projectedNodes.length; i++) {\r\n                execRenderNodeAction(view, projectedNodes[i], action, parentNode, nextSibling, target);\r\n            }\r\n        }\r\n    }\r\n}\r\nfunction visitRenderNode(view, nodeDef, action, parentNode, nextSibling, target) {\r\n    if (nodeDef.flags & 8 /* TypeNgContent */) {\r\n        visitProjectedRenderNodes(view, nodeDef.ngContent.index, action, parentNode, nextSibling, target);\r\n    }\r\n    else {\r\n        var rn = renderNode(view, nodeDef);\r\n        if (action === 3 /* RemoveChild */ && (nodeDef.flags & 33554432 /* ComponentView */) &&\r\n            (nodeDef.bindingFlags & 48 /* CatSyntheticProperty */)) {\r\n            // Note: we might need to do both actions.\r\n            if (nodeDef.bindingFlags & (16 /* SyntheticProperty */)) {\r\n                execRenderNodeAction(view, rn, action, parentNode, nextSibling, target);\r\n            }\r\n            if (nodeDef.bindingFlags & (32 /* SyntheticHostProperty */)) {\r\n                var compView = asElementData(view, nodeDef.nodeIndex).componentView;\r\n                execRenderNodeAction(compView, rn, action, parentNode, nextSibling, target);\r\n            }\r\n        }\r\n        else {\r\n            execRenderNodeAction(view, rn, action, parentNode, nextSibling, target);\r\n        }\r\n        if (nodeDef.flags & 16777216 /* EmbeddedViews */) {\r\n            var embeddedViews = asElementData(view, nodeDef.nodeIndex).viewContainer._embeddedViews;\r\n            for (var k = 0; k < embeddedViews.length; k++) {\r\n                visitRootRenderNodes(embeddedViews[k], action, parentNode, nextSibling, target);\r\n            }\r\n        }\r\n        if (nodeDef.flags & 1 /* TypeElement */ && !nodeDef.element.name) {\r\n            visitSiblingRenderNodes(view, action, nodeDef.nodeIndex + 1, nodeDef.nodeIndex + nodeDef.childCount, parentNode, nextSibling, target);\r\n        }\r\n    }\r\n}\r\nfunction execRenderNodeAction(view, renderNode, action, parentNode, nextSibling, target) {\r\n    var renderer = view.renderer;\r\n    switch (action) {\r\n        case 1 /* AppendChild */:\r\n            renderer.appendChild(parentNode, renderNode);\r\n            break;\r\n        case 2 /* InsertBefore */:\r\n            renderer.insertBefore(parentNode, renderNode, nextSibling);\r\n            break;\r\n        case 3 /* RemoveChild */:\r\n            renderer.removeChild(parentNode, renderNode);\r\n            break;\r\n        case 0 /* Collect */:\r\n            target.push(renderNode);\r\n            break;\r\n    }\r\n}\r\nvar NS_PREFIX_RE = /^:([^:]+):(.+)$/;\r\nfunction splitNamespace(name) {\r\n    if (name[0] === ':') {\r\n        var match = (name.match(NS_PREFIX_RE));\r\n        return [match[1], match[2]];\r\n    }\r\n    return ['', name];\r\n}\r\nfunction calcBindingFlags(bindings) {\r\n    var flags = 0;\r\n    for (var i = 0; i < bindings.length; i++) {\r\n        flags |= bindings[i].flags;\r\n    }\r\n    return flags;\r\n}\r\nfunction interpolate(valueCount, constAndInterp) {\r\n    var result = '';\r\n    for (var i = 0; i < valueCount * 2; i = i + 2) {\r\n        result = result + constAndInterp[i] + _toStringWithNull(constAndInterp[i + 1]);\r\n    }\r\n    return result + constAndInterp[valueCount * 2];\r\n}\r\nfunction inlineInterpolate(valueCount, c0, a1, c1, a2, c2, a3, c3, a4, c4, a5, c5, a6, c6, a7, c7, a8, c8, a9, c9) {\r\n    switch (valueCount) {\r\n        case 1:\r\n            return c0 + _toStringWithNull(a1) + c1;\r\n        case 2:\r\n            return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2;\r\n        case 3:\r\n            return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +\r\n                c3;\r\n        case 4:\r\n            return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +\r\n                c3 + _toStringWithNull(a4) + c4;\r\n        case 5:\r\n            return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +\r\n                c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5;\r\n        case 6:\r\n            return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +\r\n                c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5 + _toStringWithNull(a6) + c6;\r\n        case 7:\r\n            return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +\r\n                c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5 + _toStringWithNull(a6) +\r\n                c6 + _toStringWithNull(a7) + c7;\r\n        case 8:\r\n            return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +\r\n                c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5 + _toStringWithNull(a6) +\r\n                c6 + _toStringWithNull(a7) + c7 + _toStringWithNull(a8) + c8;\r\n        case 9:\r\n            return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +\r\n                c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5 + _toStringWithNull(a6) +\r\n                c6 + _toStringWithNull(a7) + c7 + _toStringWithNull(a8) + c8 + _toStringWithNull(a9) + c9;\r\n        default:\r\n            throw new Error(\"Does not support more than 9 expressions\");\r\n    }\r\n}\r\nfunction _toStringWithNull(v) {\r\n    return v != null ? v.toString() : '';\r\n}\r\nvar EMPTY_ARRAY$2 = [];\r\nvar EMPTY_MAP = {};\r\n\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nfunction anchorDef(flags, matchedQueriesDsl, ngContentIndex, childCount, handleEvent, templateFactory) {\r\n    flags |= 1 /* TypeElement */;\r\n    var _a = splitMatchedQueriesDsl(matchedQueriesDsl), matchedQueries = _a.matchedQueries, references = _a.references, matchedQueryIds = _a.matchedQueryIds;\r\n    var template = templateFactory ? resolveDefinition(templateFactory) : null;\r\n    return {\r\n        // will bet set by the view definition\r\n        nodeIndex: -1,\r\n        parent: null,\r\n        renderParent: null,\r\n        bindingIndex: -1,\r\n        outputIndex: -1,\r\n        // regular values\r\n        flags: flags,\r\n        checkIndex: -1,\r\n        childFlags: 0,\r\n        directChildFlags: 0,\r\n        childMatchedQueries: 0, matchedQueries: matchedQueries, matchedQueryIds: matchedQueryIds, references: references, ngContentIndex: ngContentIndex, childCount: childCount,\r\n        bindings: [],\r\n        bindingFlags: 0,\r\n        outputs: [],\r\n        element: {\r\n            ns: null,\r\n            name: null,\r\n            attrs: null, template: template,\r\n            componentProvider: null,\r\n            componentView: null,\r\n            componentRendererType: null,\r\n            publicProviders: null,\r\n            allProviders: null,\r\n            handleEvent: handleEvent || NOOP\r\n        },\r\n        provider: null,\r\n        text: null,\r\n        query: null,\r\n        ngContent: null\r\n    };\r\n}\r\nfunction elementDef(checkIndex, flags, matchedQueriesDsl, ngContentIndex, childCount, namespaceAndName, fixedAttrs, bindings, outputs, handleEvent, componentView, componentRendererType) {\r\n    if (fixedAttrs === void 0) { fixedAttrs = []; }\r\n    if (!handleEvent) {\r\n        handleEvent = NOOP;\r\n    }\r\n    var _a = splitMatchedQueriesDsl(matchedQueriesDsl), matchedQueries = _a.matchedQueries, references = _a.references, matchedQueryIds = _a.matchedQueryIds;\r\n    var ns = (null);\r\n    var name = (null);\r\n    if (namespaceAndName) {\r\n        _b = __read(splitNamespace(namespaceAndName), 2), ns = _b[0], name = _b[1];\r\n    }\r\n    bindings = bindings || [];\r\n    var bindingDefs = new Array(bindings.length);\r\n    for (var i = 0; i < bindings.length; i++) {\r\n        var _c = __read(bindings[i], 3), bindingFlags = _c[0], namespaceAndName_1 = _c[1], suffixOrSecurityContext = _c[2];\r\n        var _d = __read(splitNamespace(namespaceAndName_1), 2), ns_1 = _d[0], name_1 = _d[1];\r\n        var securityContext = (undefined);\r\n        var suffix = (undefined);\r\n        switch (bindingFlags & 15 /* Types */) {\r\n            case 4 /* TypeElementStyle */:\r\n                suffix = suffixOrSecurityContext;\r\n                break;\r\n            case 1 /* TypeElementAttribute */:\r\n            case 8 /* TypeProperty */:\r\n                securityContext = suffixOrSecurityContext;\r\n                break;\r\n        }\r\n        bindingDefs[i] =\r\n            { flags: bindingFlags, ns: ns_1, name: name_1, nonMinifiedName: name_1, securityContext: securityContext, suffix: suffix };\r\n    }\r\n    outputs = outputs || [];\r\n    var outputDefs = new Array(outputs.length);\r\n    for (var i = 0; i < outputs.length; i++) {\r\n        var _e = __read(outputs[i], 2), target = _e[0], eventName = _e[1];\r\n        outputDefs[i] = {\r\n            type: 0 /* ElementOutput */,\r\n            target: target, eventName: eventName,\r\n            propName: null\r\n        };\r\n    }\r\n    fixedAttrs = fixedAttrs || [];\r\n    var attrs = fixedAttrs.map(function (_a) {\r\n        var _b = __read(_a, 2), namespaceAndName = _b[0], value = _b[1];\r\n        var _c = __read(splitNamespace(namespaceAndName), 2), ns = _c[0], name = _c[1];\r\n        return [ns, name, value];\r\n    });\r\n    componentRendererType = resolveRendererType2(componentRendererType);\r\n    if (componentView) {\r\n        flags |= 33554432 /* ComponentView */;\r\n    }\r\n    flags |= 1 /* TypeElement */;\r\n    return {\r\n        // will bet set by the view definition\r\n        nodeIndex: -1,\r\n        parent: null,\r\n        renderParent: null,\r\n        bindingIndex: -1,\r\n        outputIndex: -1,\r\n        // regular values\r\n        checkIndex: checkIndex,\r\n        flags: flags,\r\n        childFlags: 0,\r\n        directChildFlags: 0,\r\n        childMatchedQueries: 0, matchedQueries: matchedQueries, matchedQueryIds: matchedQueryIds, references: references, ngContentIndex: ngContentIndex, childCount: childCount,\r\n        bindings: bindingDefs,\r\n        bindingFlags: calcBindingFlags(bindingDefs),\r\n        outputs: outputDefs,\r\n        element: {\r\n            ns: ns,\r\n            name: name,\r\n            attrs: attrs,\r\n            template: null,\r\n            // will bet set by the view definition\r\n            componentProvider: null,\r\n            componentView: componentView || null,\r\n            componentRendererType: componentRendererType,\r\n            publicProviders: null,\r\n            allProviders: null,\r\n            handleEvent: handleEvent || NOOP,\r\n        },\r\n        provider: null,\r\n        text: null,\r\n        query: null,\r\n        ngContent: null\r\n    };\r\n    var _b;\r\n}\r\nfunction createElement(view, renderHost, def) {\r\n    var elDef = (def.element);\r\n    var rootSelectorOrNode = view.root.selectorOrNode;\r\n    var renderer = view.renderer;\r\n    var el;\r\n    if (view.parent || !rootSelectorOrNode) {\r\n        if (elDef.name) {\r\n            el = renderer.createElement(elDef.name, elDef.ns);\r\n        }\r\n        else {\r\n            el = renderer.createComment('');\r\n        }\r\n        var parentEl = getParentRenderElement(view, renderHost, def);\r\n        if (parentEl) {\r\n            renderer.appendChild(parentEl, el);\r\n        }\r\n    }\r\n    else {\r\n        el = renderer.selectRootElement(rootSelectorOrNode);\r\n    }\r\n    if (elDef.attrs) {\r\n        for (var i = 0; i < elDef.attrs.length; i++) {\r\n            var _a = __read(elDef.attrs[i], 3), ns = _a[0], name_2 = _a[1], value = _a[2];\r\n            renderer.setAttribute(el, name_2, value, ns);\r\n        }\r\n    }\r\n    return el;\r\n}\r\nfunction listenToElementOutputs(view, compView, def, el) {\r\n    for (var i = 0; i < def.outputs.length; i++) {\r\n        var output = def.outputs[i];\r\n        var handleEventClosure = renderEventHandlerClosure(view, def.nodeIndex, elementEventFullName(output.target, output.eventName));\r\n        var listenTarget = output.target;\r\n        var listenerView = view;\r\n        if (output.target === 'component') {\r\n            listenTarget = null;\r\n            listenerView = compView;\r\n        }\r\n        var disposable = listenerView.renderer.listen(listenTarget || el, output.eventName, handleEventClosure);\r\n        view.disposables[def.outputIndex + i] = disposable;\r\n    }\r\n}\r\nfunction renderEventHandlerClosure(view, index, eventName) {\r\n    return function (event) { return dispatchEvent(view, index, eventName, event); };\r\n}\r\nfunction checkAndUpdateElementInline(view, def, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {\r\n    var bindLen = def.bindings.length;\r\n    var changed = false;\r\n    if (bindLen > 0 && checkAndUpdateElementValue(view, def, 0, v0))\r\n        changed = true;\r\n    if (bindLen > 1 && checkAndUpdateElementValue(view, def, 1, v1))\r\n        changed = true;\r\n    if (bindLen > 2 && checkAndUpdateElementValue(view, def, 2, v2))\r\n        changed = true;\r\n    if (bindLen > 3 && checkAndUpdateElementValue(view, def, 3, v3))\r\n        changed = true;\r\n    if (bindLen > 4 && checkAndUpdateElementValue(view, def, 4, v4))\r\n        changed = true;\r\n    if (bindLen > 5 && checkAndUpdateElementValue(view, def, 5, v5))\r\n        changed = true;\r\n    if (bindLen > 6 && checkAndUpdateElementValue(view, def, 6, v6))\r\n        changed = true;\r\n    if (bindLen > 7 && checkAndUpdateElementValue(view, def, 7, v7))\r\n        changed = true;\r\n    if (bindLen > 8 && checkAndUpdateElementValue(view, def, 8, v8))\r\n        changed = true;\r\n    if (bindLen > 9 && checkAndUpdateElementValue(view, def, 9, v9))\r\n        changed = true;\r\n    return changed;\r\n}\r\nfunction checkAndUpdateElementDynamic(view, def, values) {\r\n    var changed = false;\r\n    for (var i = 0; i < values.length; i++) {\r\n        if (checkAndUpdateElementValue(view, def, i, values[i]))\r\n            changed = true;\r\n    }\r\n    return changed;\r\n}\r\nfunction checkAndUpdateElementValue(view, def, bindingIdx, value) {\r\n    if (!checkAndUpdateBinding(view, def, bindingIdx, value)) {\r\n        return false;\r\n    }\r\n    var binding = def.bindings[bindingIdx];\r\n    var elData = asElementData(view, def.nodeIndex);\r\n    var renderNode$$1 = elData.renderElement;\r\n    var name = (binding.name);\r\n    switch (binding.flags & 15 /* Types */) {\r\n        case 1 /* TypeElementAttribute */:\r\n            setElementAttribute(view, binding, renderNode$$1, binding.ns, name, value);\r\n            break;\r\n        case 2 /* TypeElementClass */:\r\n            setElementClass(view, renderNode$$1, name, value);\r\n            break;\r\n        case 4 /* TypeElementStyle */:\r\n            setElementStyle(view, binding, renderNode$$1, name, value);\r\n            break;\r\n        case 8 /* TypeProperty */:\r\n            var bindView = (def.flags & 33554432 /* ComponentView */ &&\r\n                binding.flags & 32 /* SyntheticHostProperty */) ?\r\n                elData.componentView :\r\n                view;\r\n            setElementProperty(bindView, binding, renderNode$$1, name, value);\r\n            break;\r\n    }\r\n    return true;\r\n}\r\nfunction setElementAttribute(view, binding, renderNode$$1, ns, name, value) {\r\n    var securityContext = binding.securityContext;\r\n    var renderValue = securityContext ? view.root.sanitizer.sanitize(securityContext, value) : value;\r\n    renderValue = renderValue != null ? renderValue.toString() : null;\r\n    var renderer = view.renderer;\r\n    if (value != null) {\r\n        renderer.setAttribute(renderNode$$1, name, renderValue, ns);\r\n    }\r\n    else {\r\n        renderer.removeAttribute(renderNode$$1, name, ns);\r\n    }\r\n}\r\nfunction setElementClass(view, renderNode$$1, name, value) {\r\n    var renderer = view.renderer;\r\n    if (value) {\r\n        renderer.addClass(renderNode$$1, name);\r\n    }\r\n    else {\r\n        renderer.removeClass(renderNode$$1, name);\r\n    }\r\n}\r\nfunction setElementStyle(view, binding, renderNode$$1, name, value) {\r\n    var renderValue = view.root.sanitizer.sanitize(SecurityContext.STYLE, value);\r\n    if (renderValue != null) {\r\n        renderValue = renderValue.toString();\r\n        var unit = binding.suffix;\r\n        if (unit != null) {\r\n            renderValue = renderValue + unit;\r\n        }\r\n    }\r\n    else {\r\n        renderValue = null;\r\n    }\r\n    var renderer = view.renderer;\r\n    if (renderValue != null) {\r\n        renderer.setStyle(renderNode$$1, name, renderValue);\r\n    }\r\n    else {\r\n        renderer.removeStyle(renderNode$$1, name);\r\n    }\r\n}\r\nfunction setElementProperty(view, binding, renderNode$$1, name, value) {\r\n    var securityContext = binding.securityContext;\r\n    var renderValue = securityContext ? view.root.sanitizer.sanitize(securityContext, value) : value;\r\n    view.renderer.setProperty(renderNode$$1, name, renderValue);\r\n}\r\n\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nvar UNDEFINED_VALUE = new Object();\r\nvar InjectorRefTokenKey$1 = tokenKey(Injector);\r\nvar INJECTORRefTokenKey$1 = tokenKey(INJECTOR);\r\nvar NgModuleRefTokenKey = tokenKey(NgModuleRef);\r\nfunction moduleProvideDef(flags, token, value, deps) {\r\n    // Need to resolve forwardRefs as e.g. for `useValue` we\r\n    // lowered the expression and then stopped evaluating it,\r\n    // i.e. also didn't unwrap it.\r\n    value = resolveForwardRef(value);\r\n    var depDefs = splitDepsDsl(deps, stringify(token));\r\n    return {\r\n        // will bet set by the module definition\r\n        index: -1,\r\n        deps: depDefs, flags: flags, token: token, value: value\r\n    };\r\n}\r\nfunction moduleDef(providers) {\r\n    var providersByKey = {};\r\n    var modules = [];\r\n    var isRoot = false;\r\n    for (var i = 0; i < providers.length; i++) {\r\n        var provider = providers[i];\r\n        if (provider.token === APP_ROOT) {\r\n            isRoot = true;\r\n        }\r\n        if (provider.flags & 1073741824 /* TypeNgModule */) {\r\n            modules.push(provider.token);\r\n        }\r\n        provider.index = i;\r\n        providersByKey[tokenKey(provider.token)] = provider;\r\n    }\r\n    return {\r\n        // Will be filled later...\r\n        factory: null,\r\n        providersByKey: providersByKey,\r\n        providers: providers,\r\n        modules: modules,\r\n        isRoot: isRoot,\r\n    };\r\n}\r\nfunction initNgModule(data) {\r\n    var def = data._def;\r\n    var providers = data._providers = new Array(def.providers.length);\r\n    for (var i = 0; i < def.providers.length; i++) {\r\n        var provDef = def.providers[i];\r\n        if (!(provDef.flags & 4096 /* LazyProvider */)) {\r\n            // Make sure the provider has not been already initialized outside this loop.\r\n            if (providers[i] === undefined) {\r\n                providers[i] = _createProviderInstance$1(data, provDef);\r\n            }\r\n        }\r\n    }\r\n}\r\nfunction resolveNgModuleDep(data, depDef, notFoundValue) {\r\n    if (notFoundValue === void 0) { notFoundValue = Injector.THROW_IF_NOT_FOUND; }\r\n    var former = setCurrentInjector(data);\r\n    try {\r\n        if (depDef.flags & 8 /* Value */) {\r\n            return depDef.token;\r\n        }\r\n        if (depDef.flags & 2 /* Optional */) {\r\n            notFoundValue = null;\r\n        }\r\n        if (depDef.flags & 1 /* SkipSelf */) {\r\n            return data._parent.get(depDef.token, notFoundValue);\r\n        }\r\n        var tokenKey_1 = depDef.tokenKey;\r\n        switch (tokenKey_1) {\r\n            case InjectorRefTokenKey$1:\r\n            case INJECTORRefTokenKey$1:\r\n            case NgModuleRefTokenKey:\r\n                return data;\r\n        }\r\n        var providerDef = data._def.providersByKey[tokenKey_1];\r\n        if (providerDef) {\r\n            var providerInstance = data._providers[providerDef.index];\r\n            if (providerInstance === undefined) {\r\n                providerInstance = data._providers[providerDef.index] =\r\n                    _createProviderInstance$1(data, providerDef);\r\n            }\r\n            return providerInstance === UNDEFINED_VALUE ? undefined : providerInstance;\r\n        }\r\n        else if (depDef.token.ngInjectableDef && targetsModule(data, depDef.token.ngInjectableDef)) {\r\n            var injectableDef = depDef.token.ngInjectableDef;\r\n            var index = data._providers.length;\r\n            data._def.providersByKey[depDef.tokenKey] = {\r\n                flags: 1024 /* TypeFactoryProvider */ | 4096 /* LazyProvider */,\r\n                value: injectableDef.factory,\r\n                deps: [], index: index,\r\n                token: depDef.token,\r\n            };\r\n            data._providers[index] = UNDEFINED_VALUE;\r\n            return (data._providers[index] =\r\n                _createProviderInstance$1(data, data._def.providersByKey[depDef.tokenKey]));\r\n        }\r\n        return data._parent.get(depDef.token, notFoundValue);\r\n    }\r\n    finally {\r\n        setCurrentInjector(former);\r\n    }\r\n}\r\nfunction moduleTransitivelyPresent(ngModule, scope) {\r\n    return ngModule._def.modules.indexOf(scope) > -1;\r\n}\r\nfunction targetsModule(ngModule, def) {\r\n    return def.providedIn != null && (moduleTransitivelyPresent(ngModule, def.providedIn) ||\r\n        def.providedIn === 'root' && ngModule._def.isRoot);\r\n}\r\nfunction _createProviderInstance$1(ngModule, providerDef) {\r\n    var injectable;\r\n    switch (providerDef.flags & 201347067 /* Types */) {\r\n        case 512 /* TypeClassProvider */:\r\n            injectable = _createClass(ngModule, providerDef.value, providerDef.deps);\r\n            break;\r\n        case 1024 /* TypeFactoryProvider */:\r\n            injectable = _callFactory(ngModule, providerDef.value, providerDef.deps);\r\n            break;\r\n        case 2048 /* TypeUseExistingProvider */:\r\n            injectable = resolveNgModuleDep(ngModule, providerDef.deps[0]);\r\n            break;\r\n        case 256 /* TypeValueProvider */:\r\n            injectable = providerDef.value;\r\n            break;\r\n    }\r\n    // The read of `ngOnDestroy` here is slightly expensive as it's megamorphic, so it should be\r\n    // avoided if possible. The sequence of checks here determines whether ngOnDestroy needs to be\r\n    // checked. It might not if the `injectable` isn't an object or if NodeFlags.OnDestroy is already\r\n    // set (ngOnDestroy was detected statically).\r\n    if (injectable !== UNDEFINED_VALUE && injectable != null && typeof injectable === 'object' &&\r\n        !(providerDef.flags & 131072 /* OnDestroy */) && typeof injectable.ngOnDestroy === 'function') {\r\n        providerDef.flags |= 131072 /* OnDestroy */;\r\n    }\r\n    return injectable === undefined ? UNDEFINED_VALUE : injectable;\r\n}\r\nfunction _createClass(ngModule, ctor, deps) {\r\n    var len = deps.length;\r\n    switch (len) {\r\n        case 0:\r\n            return new ctor();\r\n        case 1:\r\n            return new ctor(resolveNgModuleDep(ngModule, deps[0]));\r\n        case 2:\r\n            return new ctor(resolveNgModuleDep(ngModule, deps[0]), resolveNgModuleDep(ngModule, deps[1]));\r\n        case 3:\r\n            return new ctor(resolveNgModuleDep(ngModule, deps[0]), resolveNgModuleDep(ngModule, deps[1]), resolveNgModuleDep(ngModule, deps[2]));\r\n        default:\r\n            var depValues = new Array(len);\r\n            for (var i = 0; i < len; i++) {\r\n                depValues[i] = resolveNgModuleDep(ngModule, deps[i]);\r\n            }\r\n            return new (ctor.bind.apply(ctor, __spread([void 0], depValues)))();\r\n    }\r\n}\r\nfunction _callFactory(ngModule, factory, deps) {\r\n    var len = deps.length;\r\n    switch (len) {\r\n        case 0:\r\n            return factory();\r\n        case 1:\r\n            return factory(resolveNgModuleDep(ngModule, deps[0]));\r\n        case 2:\r\n            return factory(resolveNgModuleDep(ngModule, deps[0]), resolveNgModuleDep(ngModule, deps[1]));\r\n        case 3:\r\n            return factory(resolveNgModuleDep(ngModule, deps[0]), resolveNgModuleDep(ngModule, deps[1]), resolveNgModuleDep(ngModule, deps[2]));\r\n        default:\r\n            var depValues = Array(len);\r\n            for (var i = 0; i < len; i++) {\r\n                depValues[i] = resolveNgModuleDep(ngModule, deps[i]);\r\n            }\r\n            return factory.apply(void 0, __spread(depValues));\r\n    }\r\n}\r\nfunction callNgModuleLifecycle(ngModule, lifecycles) {\r\n    var def = ngModule._def;\r\n    var destroyed = new Set();\r\n    for (var i = 0; i < def.providers.length; i++) {\r\n        var provDef = def.providers[i];\r\n        if (provDef.flags & 131072 /* OnDestroy */) {\r\n            var instance = ngModule._providers[i];\r\n            if (instance && instance !== UNDEFINED_VALUE) {\r\n                var onDestroy = instance.ngOnDestroy;\r\n                if (typeof onDestroy === 'function' && !destroyed.has(instance)) {\r\n                    onDestroy.apply(instance);\r\n                    destroyed.add(instance);\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nfunction attachEmbeddedView(parentView, elementData, viewIndex, view) {\r\n    var embeddedViews = elementData.viewContainer._embeddedViews;\r\n    if (viewIndex === null || viewIndex === undefined) {\r\n        viewIndex = embeddedViews.length;\r\n    }\r\n    view.viewContainerParent = parentView;\r\n    addToArray(embeddedViews, (viewIndex), view);\r\n    attachProjectedView(elementData, view);\r\n    Services.dirtyParentQueries(view);\r\n    var prevView = (viewIndex) > 0 ? embeddedViews[(viewIndex) - 1] : null;\r\n    renderAttachEmbeddedView(elementData, prevView, view);\r\n}\r\nfunction attachProjectedView(vcElementData, view) {\r\n    var dvcElementData = declaredViewContainer(view);\r\n    if (!dvcElementData || dvcElementData === vcElementData ||\r\n        view.state & 16 /* IsProjectedView */) {\r\n        return;\r\n    }\r\n    // Note: For performance reasons, we\r\n    // - add a view to template._projectedViews only 1x throughout its lifetime,\r\n    //   and remove it not until the view is destroyed.\r\n    //   (hard, as when a parent view is attached/detached we would need to attach/detach all\r\n    //    nested projected views as well, even across component boundaries).\r\n    // - don't track the insertion order of views in the projected views array\r\n    //   (hard, as when the views of the same template are inserted different view containers)\r\n    view.state |= 16 /* IsProjectedView */;\r\n    var projectedViews = dvcElementData.template._projectedViews;\r\n    if (!projectedViews) {\r\n        projectedViews = dvcElementData.template._projectedViews = [];\r\n    }\r\n    projectedViews.push(view);\r\n    // Note: we are changing the NodeDef here as we cannot calculate\r\n    // the fact whether a template is used for projection during compilation.\r\n    markNodeAsProjectedTemplate(view.parent.def, (view.parentNodeDef));\r\n}\r\nfunction markNodeAsProjectedTemplate(viewDef, nodeDef) {\r\n    if (nodeDef.flags & 4 /* ProjectedTemplate */) {\r\n        return;\r\n    }\r\n    viewDef.nodeFlags |= 4 /* ProjectedTemplate */;\r\n    nodeDef.flags |= 4 /* ProjectedTemplate */;\r\n    var parentNodeDef = nodeDef.parent;\r\n    while (parentNodeDef) {\r\n        parentNodeDef.childFlags |= 4 /* ProjectedTemplate */;\r\n        parentNodeDef = parentNodeDef.parent;\r\n    }\r\n}\r\nfunction detachEmbeddedView(elementData, viewIndex) {\r\n    var embeddedViews = elementData.viewContainer._embeddedViews;\r\n    if (viewIndex == null || viewIndex >= embeddedViews.length) {\r\n        viewIndex = embeddedViews.length - 1;\r\n    }\r\n    if (viewIndex < 0) {\r\n        return null;\r\n    }\r\n    var view = embeddedViews[viewIndex];\r\n    view.viewContainerParent = null;\r\n    removeFromArray(embeddedViews, viewIndex);\r\n    // See attachProjectedView for why we don't update projectedViews here.\r\n    Services.dirtyParentQueries(view);\r\n    renderDetachView(view);\r\n    return view;\r\n}\r\nfunction detachProjectedView(view) {\r\n    if (!(view.state & 16 /* IsProjectedView */)) {\r\n        return;\r\n    }\r\n    var dvcElementData = declaredViewContainer(view);\r\n    if (dvcElementData) {\r\n        var projectedViews = dvcElementData.template._projectedViews;\r\n        if (projectedViews) {\r\n            removeFromArray(projectedViews, projectedViews.indexOf(view));\r\n            Services.dirtyParentQueries(view);\r\n        }\r\n    }\r\n}\r\nfunction moveEmbeddedView(elementData, oldViewIndex, newViewIndex) {\r\n    var embeddedViews = elementData.viewContainer._embeddedViews;\r\n    var view = embeddedViews[oldViewIndex];\r\n    removeFromArray(embeddedViews, oldViewIndex);\r\n    if (newViewIndex == null) {\r\n        newViewIndex = embeddedViews.length;\r\n    }\r\n    addToArray(embeddedViews, newViewIndex, view);\r\n    // Note: Don't need to change projectedViews as the order in there\r\n    // as always invalid...\r\n    Services.dirtyParentQueries(view);\r\n    renderDetachView(view);\r\n    var prevView = newViewIndex > 0 ? embeddedViews[newViewIndex - 1] : null;\r\n    renderAttachEmbeddedView(elementData, prevView, view);\r\n    return view;\r\n}\r\nfunction renderAttachEmbeddedView(elementData, prevView, view) {\r\n    var prevRenderNode = prevView ? renderNode(prevView, (prevView.def.lastRenderRootNode)) :\r\n        elementData.renderElement;\r\n    var parentNode = view.renderer.parentNode(prevRenderNode);\r\n    var nextSibling = view.renderer.nextSibling(prevRenderNode);\r\n    // Note: We can't check if `nextSibling` is present, as on WebWorkers it will always be!\r\n    // However, browsers automatically do `appendChild` when there is no `nextSibling`.\r\n    visitRootRenderNodes(view, 2 /* InsertBefore */, parentNode, nextSibling, undefined);\r\n}\r\nfunction renderDetachView(view) {\r\n    visitRootRenderNodes(view, 3 /* RemoveChild */, null, null, undefined);\r\n}\r\nfunction addToArray(arr, index, value) {\r\n    // perf: array.push is faster than array.splice!\r\n    if (index >= arr.length) {\r\n        arr.push(value);\r\n    }\r\n    else {\r\n        arr.splice(index, 0, value);\r\n    }\r\n}\r\nfunction removeFromArray(arr, index) {\r\n    // perf: array.pop is faster than array.splice!\r\n    if (index >= arr.length - 1) {\r\n        arr.pop();\r\n    }\r\n    else {\r\n        arr.splice(index, 1);\r\n    }\r\n}\r\n\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nvar EMPTY_CONTEXT = new Object();\r\n// Attention: this function is called as top level function.\r\n// Putting any logic in here will destroy closure tree shaking!\r\nfunction createComponentFactory(selector, componentType, viewDefFactory, inputs, outputs, ngContentSelectors) {\r\n    return new ComponentFactory_(selector, componentType, viewDefFactory, inputs, outputs, ngContentSelectors);\r\n}\r\nfunction getComponentViewDefinitionFactory(componentFactory) {\r\n    return componentFactory.viewDefFactory;\r\n}\r\nvar ComponentFactory_ = /** @class */ (function (_super) {\r\n    __extends(ComponentFactory_, _super);\r\n    function ComponentFactory_(selector, componentType, viewDefFactory, _inputs, _outputs, ngContentSelectors) {\r\n        var _this = \r\n        // Attention: this ctor is called as top level function.\r\n        // Putting any logic in here will destroy closure tree shaking!\r\n        _super.call(this) || this;\r\n        _this.selector = selector;\r\n        _this.componentType = componentType;\r\n        _this._inputs = _inputs;\r\n        _this._outputs = _outputs;\r\n        _this.ngContentSelectors = ngContentSelectors;\r\n        _this.viewDefFactory = viewDefFactory;\r\n        return _this;\r\n    }\r\n    Object.defineProperty(ComponentFactory_.prototype, \"inputs\", {\r\n        get: function () {\r\n            var inputsArr = [];\r\n            var inputs = (this._inputs);\r\n            for (var propName in inputs) {\r\n                var templateName = inputs[propName];\r\n                inputsArr.push({ propName: propName, templateName: templateName });\r\n            }\r\n            return inputsArr;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ComponentFactory_.prototype, \"outputs\", {\r\n        get: function () {\r\n            var outputsArr = [];\r\n            for (var propName in this._outputs) {\r\n                var templateName = this._outputs[propName];\r\n                outputsArr.push({ propName: propName, templateName: templateName });\r\n            }\r\n            return outputsArr;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Creates a new component.\r\n     */\r\n    /**\r\n       * Creates a new component.\r\n       */\r\n    ComponentFactory_.prototype.create = /**\r\n       * Creates a new component.\r\n       */\r\n    function (injector, projectableNodes, rootSelectorOrNode, ngModule) {\r\n        if (!ngModule) {\r\n            throw new Error('ngModule should be provided');\r\n        }\r\n        var viewDef = resolveDefinition(this.viewDefFactory);\r\n        var componentNodeIndex = viewDef.nodes[0].element.componentProvider.nodeIndex;\r\n        var view = Services.createRootView(injector, projectableNodes || [], rootSelectorOrNode, viewDef, ngModule, EMPTY_CONTEXT);\r\n        var component = asProviderData(view, componentNodeIndex).instance;\r\n        if (rootSelectorOrNode) {\r\n            view.renderer.setAttribute(asElementData(view, 0).renderElement, 'ng-version', VERSION.full);\r\n        }\r\n        return new ComponentRef_(view, new ViewRef_(view), component);\r\n    };\r\n    return ComponentFactory_;\r\n}(ComponentFactory));\r\nvar ComponentRef_ = /** @class */ (function (_super) {\r\n    __extends(ComponentRef_, _super);\r\n    function ComponentRef_(_view, _viewRef, _component) {\r\n        var _this = _super.call(this) || this;\r\n        _this._view = _view;\r\n        _this._viewRef = _viewRef;\r\n        _this._component = _component;\r\n        _this._elDef = _this._view.def.nodes[0];\r\n        _this.hostView = _viewRef;\r\n        _this.changeDetectorRef = _viewRef;\r\n        _this.instance = _component;\r\n        return _this;\r\n    }\r\n    Object.defineProperty(ComponentRef_.prototype, \"location\", {\r\n        get: function () {\r\n            return new ElementRef(asElementData(this._view, this._elDef.nodeIndex).renderElement);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ComponentRef_.prototype, \"injector\", {\r\n        get: function () { return new Injector_(this._view, this._elDef); },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ComponentRef_.prototype, \"componentType\", {\r\n        get: function () { return this._component.constructor; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    ComponentRef_.prototype.destroy = function () { this._viewRef.destroy(); };\r\n    ComponentRef_.prototype.onDestroy = function (callback) { this._viewRef.onDestroy(callback); };\r\n    return ComponentRef_;\r\n}(ComponentRef));\r\nfunction createViewContainerData(view, elDef, elData) {\r\n    return new ViewContainerRef_(view, elDef, elData);\r\n}\r\nvar ViewContainerRef_ = /** @class */ (function () {\r\n    function ViewContainerRef_(_view, _elDef, _data) {\r\n        this._view = _view;\r\n        this._elDef = _elDef;\r\n        this._data = _data;\r\n        /**\r\n           * @internal\r\n           */\r\n        this._embeddedViews = [];\r\n    }\r\n    Object.defineProperty(ViewContainerRef_.prototype, \"element\", {\r\n        get: function () { return new ElementRef(this._data.renderElement); },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ViewContainerRef_.prototype, \"injector\", {\r\n        get: function () { return new Injector_(this._view, this._elDef); },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ViewContainerRef_.prototype, \"parentInjector\", {\r\n        get: function () {\r\n            var view = this._view;\r\n            var elDef = this._elDef.parent;\r\n            while (!elDef && view) {\r\n                elDef = viewParentEl(view);\r\n                view = (view.parent);\r\n            }\r\n            return view ? new Injector_(view, elDef) : new Injector_(this._view, null);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    ViewContainerRef_.prototype.clear = function () {\r\n        var len = this._embeddedViews.length;\r\n        for (var i = len - 1; i >= 0; i--) {\r\n            var view = (detachEmbeddedView(this._data, i));\r\n            Services.destroyView(view);\r\n        }\r\n    };\r\n    ViewContainerRef_.prototype.get = function (index) {\r\n        var view = this._embeddedViews[index];\r\n        if (view) {\r\n            var ref = new ViewRef_(view);\r\n            ref.attachToViewContainerRef(this);\r\n            return ref;\r\n        }\r\n        return null;\r\n    };\r\n    Object.defineProperty(ViewContainerRef_.prototype, \"length\", {\r\n        get: function () { return this._embeddedViews.length; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    ViewContainerRef_.prototype.createEmbeddedView = function (templateRef, context, index) {\r\n        var viewRef = templateRef.createEmbeddedView(context || {});\r\n        this.insert(viewRef, index);\r\n        return viewRef;\r\n    };\r\n    ViewContainerRef_.prototype.createComponent = function (componentFactory, index, injector, projectableNodes, ngModuleRef) {\r\n        var contextInjector = injector || this.parentInjector;\r\n        if (!ngModuleRef && !(componentFactory instanceof ComponentFactoryBoundToModule)) {\r\n            ngModuleRef = contextInjector.get(NgModuleRef);\r\n        }\r\n        var componentRef = componentFactory.create(contextInjector, projectableNodes, undefined, ngModuleRef);\r\n        this.insert(componentRef.hostView, index);\r\n        return componentRef;\r\n    };\r\n    ViewContainerRef_.prototype.insert = function (viewRef, index) {\r\n        if (viewRef.destroyed) {\r\n            throw new Error('Cannot insert a destroyed View in a ViewContainer!');\r\n        }\r\n        var viewRef_ = viewRef;\r\n        var viewData = viewRef_._view;\r\n        attachEmbeddedView(this._view, this._data, index, viewData);\r\n        viewRef_.attachToViewContainerRef(this);\r\n        return viewRef;\r\n    };\r\n    ViewContainerRef_.prototype.move = function (viewRef, currentIndex) {\r\n        if (viewRef.destroyed) {\r\n            throw new Error('Cannot move a destroyed View in a ViewContainer!');\r\n        }\r\n        var previousIndex = this._embeddedViews.indexOf(viewRef._view);\r\n        moveEmbeddedView(this._data, previousIndex, currentIndex);\r\n        return viewRef;\r\n    };\r\n    ViewContainerRef_.prototype.indexOf = function (viewRef) {\r\n        return this._embeddedViews.indexOf(viewRef._view);\r\n    };\r\n    ViewContainerRef_.prototype.remove = function (index) {\r\n        var viewData = detachEmbeddedView(this._data, index);\r\n        if (viewData) {\r\n            Services.destroyView(viewData);\r\n        }\r\n    };\r\n    ViewContainerRef_.prototype.detach = function (index) {\r\n        var view = detachEmbeddedView(this._data, index);\r\n        return view ? new ViewRef_(view) : null;\r\n    };\r\n    return ViewContainerRef_;\r\n}());\r\nfunction createChangeDetectorRef(view) {\r\n    return new ViewRef_(view);\r\n}\r\nvar ViewRef_ = /** @class */ (function () {\r\n    function ViewRef_(_view) {\r\n        this._view = _view;\r\n        this._viewContainerRef = null;\r\n        this._appRef = null;\r\n    }\r\n    Object.defineProperty(ViewRef_.prototype, \"rootNodes\", {\r\n        get: function () { return rootRenderNodes(this._view); },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ViewRef_.prototype, \"context\", {\r\n        get: function () { return this._view.context; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ViewRef_.prototype, \"destroyed\", {\r\n        get: function () { return (this._view.state & 128 /* Destroyed */) !== 0; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    ViewRef_.prototype.markForCheck = function () { markParentViewsForCheck(this._view); };\r\n    ViewRef_.prototype.detach = function () { this._view.state &= ~4 /* Attached */; };\r\n    ViewRef_.prototype.detectChanges = function () {\r\n        var fs = this._view.root.rendererFactory;\r\n        if (fs.begin) {\r\n            fs.begin();\r\n        }\r\n        try {\r\n            Services.checkAndUpdateView(this._view);\r\n        }\r\n        finally {\r\n            if (fs.end) {\r\n                fs.end();\r\n            }\r\n        }\r\n    };\r\n    ViewRef_.prototype.checkNoChanges = function () { Services.checkNoChangesView(this._view); };\r\n    ViewRef_.prototype.reattach = function () { this._view.state |= 4 /* Attached */; };\r\n    ViewRef_.prototype.onDestroy = function (callback) {\r\n        if (!this._view.disposables) {\r\n            this._view.disposables = [];\r\n        }\r\n        this._view.disposables.push(callback);\r\n    };\r\n    ViewRef_.prototype.destroy = function () {\r\n        if (this._appRef) {\r\n            this._appRef.detachView(this);\r\n        }\r\n        else if (this._viewContainerRef) {\r\n            this._viewContainerRef.detach(this._viewContainerRef.indexOf(this));\r\n        }\r\n        Services.destroyView(this._view);\r\n    };\r\n    ViewRef_.prototype.detachFromAppRef = function () {\r\n        this._appRef = null;\r\n        renderDetachView(this._view);\r\n        Services.dirtyParentQueries(this._view);\r\n    };\r\n    ViewRef_.prototype.attachToAppRef = function (appRef) {\r\n        if (this._viewContainerRef) {\r\n            throw new Error('This view is already attached to a ViewContainer!');\r\n        }\r\n        this._appRef = appRef;\r\n    };\r\n    ViewRef_.prototype.attachToViewContainerRef = function (vcRef) {\r\n        if (this._appRef) {\r\n            throw new Error('This view is already attached directly to the ApplicationRef!');\r\n        }\r\n        this._viewContainerRef = vcRef;\r\n    };\r\n    return ViewRef_;\r\n}());\r\nfunction createTemplateData(view, def) {\r\n    return new TemplateRef_(view, def);\r\n}\r\nvar TemplateRef_ = /** @class */ (function (_super) {\r\n    __extends(TemplateRef_, _super);\r\n    function TemplateRef_(_parentView, _def) {\r\n        var _this = _super.call(this) || this;\r\n        _this._parentView = _parentView;\r\n        _this._def = _def;\r\n        return _this;\r\n    }\r\n    TemplateRef_.prototype.createEmbeddedView = function (context) {\r\n        return new ViewRef_(Services.createEmbeddedView(this._parentView, this._def, (this._def.element.template), context));\r\n    };\r\n    Object.defineProperty(TemplateRef_.prototype, \"elementRef\", {\r\n        get: function () {\r\n            return new ElementRef(asElementData(this._parentView, this._def.nodeIndex).renderElement);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return TemplateRef_;\r\n}(TemplateRef));\r\nfunction createInjector$1(view, elDef) {\r\n    return new Injector_(view, elDef);\r\n}\r\nvar Injector_ = /** @class */ (function () {\r\n    function Injector_(view, elDef) {\r\n        this.view = view;\r\n        this.elDef = elDef;\r\n    }\r\n    Injector_.prototype.get = function (token, notFoundValue) {\r\n        if (notFoundValue === void 0) { notFoundValue = Injector.THROW_IF_NOT_FOUND; }\r\n        var allowPrivateServices = this.elDef ? (this.elDef.flags & 33554432 /* ComponentView */) !== 0 : false;\r\n        return Services.resolveDep(this.view, this.elDef, allowPrivateServices, { flags: 0 /* None */, token: token, tokenKey: tokenKey(token) }, notFoundValue);\r\n    };\r\n    return Injector_;\r\n}());\r\nfunction nodeValue(view, index) {\r\n    var def = view.def.nodes[index];\r\n    if (def.flags & 1 /* TypeElement */) {\r\n        var elData = asElementData(view, def.nodeIndex);\r\n        return def.element.template ? elData.template : elData.renderElement;\r\n    }\r\n    else if (def.flags & 2 /* TypeText */) {\r\n        return asTextData(view, def.nodeIndex).renderText;\r\n    }\r\n    else if (def.flags & (20224 /* CatProvider */ | 16 /* TypePipe */)) {\r\n        return asProviderData(view, def.nodeIndex).instance;\r\n    }\r\n    throw new Error(\"Illegal state: read nodeValue for node index \" + index);\r\n}\r\nfunction createRendererV1(view) {\r\n    return new RendererAdapter(view.renderer);\r\n}\r\nvar RendererAdapter = /** @class */ (function () {\r\n    function RendererAdapter(delegate) {\r\n        this.delegate = delegate;\r\n    }\r\n    RendererAdapter.prototype.selectRootElement = function (selectorOrNode) {\r\n        return this.delegate.selectRootElement(selectorOrNode);\r\n    };\r\n    RendererAdapter.prototype.createElement = function (parent, namespaceAndName) {\r\n        var _a = __read(splitNamespace(namespaceAndName), 2), ns = _a[0], name = _a[1];\r\n        var el = this.delegate.createElement(name, ns);\r\n        if (parent) {\r\n            this.delegate.appendChild(parent, el);\r\n        }\r\n        return el;\r\n    };\r\n    RendererAdapter.prototype.createViewRoot = function (hostElement) { return hostElement; };\r\n    RendererAdapter.prototype.createTemplateAnchor = function (parentElement) {\r\n        var comment = this.delegate.createComment('');\r\n        if (parentElement) {\r\n            this.delegate.appendChild(parentElement, comment);\r\n        }\r\n        return comment;\r\n    };\r\n    RendererAdapter.prototype.createText = function (parentElement, value) {\r\n        var node = this.delegate.createText(value);\r\n        if (parentElement) {\r\n            this.delegate.appendChild(parentElement, node);\r\n        }\r\n        return node;\r\n    };\r\n    RendererAdapter.prototype.projectNodes = function (parentElement, nodes) {\r\n        for (var i = 0; i < nodes.length; i++) {\r\n            this.delegate.appendChild(parentElement, nodes[i]);\r\n        }\r\n    };\r\n    RendererAdapter.prototype.attachViewAfter = function (node, viewRootNodes) {\r\n        var parentElement = this.delegate.parentNode(node);\r\n        var nextSibling = this.delegate.nextSibling(node);\r\n        for (var i = 0; i < viewRootNodes.length; i++) {\r\n            this.delegate.insertBefore(parentElement, viewRootNodes[i], nextSibling);\r\n        }\r\n    };\r\n    RendererAdapter.prototype.detachView = function (viewRootNodes) {\r\n        for (var i = 0; i < viewRootNodes.length; i++) {\r\n            var node = viewRootNodes[i];\r\n            var parentElement = this.delegate.parentNode(node);\r\n            this.delegate.removeChild(parentElement, node);\r\n        }\r\n    };\r\n    RendererAdapter.prototype.destroyView = function (hostElement, viewAllNodes) {\r\n        for (var i = 0; i < viewAllNodes.length; i++) {\r\n            this.delegate.destroyNode(viewAllNodes[i]);\r\n        }\r\n    };\r\n    RendererAdapter.prototype.listen = function (renderElement, name, callback) {\r\n        return this.delegate.listen(renderElement, name, callback);\r\n    };\r\n    RendererAdapter.prototype.listenGlobal = function (target, name, callback) {\r\n        return this.delegate.listen(target, name, callback);\r\n    };\r\n    RendererAdapter.prototype.setElementProperty = function (renderElement, propertyName, propertyValue) {\r\n        this.delegate.setProperty(renderElement, propertyName, propertyValue);\r\n    };\r\n    RendererAdapter.prototype.setElementAttribute = function (renderElement, namespaceAndName, attributeValue) {\r\n        var _a = __read(splitNamespace(namespaceAndName), 2), ns = _a[0], name = _a[1];\r\n        if (attributeValue != null) {\r\n            this.delegate.setAttribute(renderElement, name, attributeValue, ns);\r\n        }\r\n        else {\r\n            this.delegate.removeAttribute(renderElement, name, ns);\r\n        }\r\n    };\r\n    RendererAdapter.prototype.setBindingDebugInfo = function (renderElement, propertyName, propertyValue) { };\r\n    RendererAdapter.prototype.setElementClass = function (renderElement, className, isAdd) {\r\n        if (isAdd) {\r\n            this.delegate.addClass(renderElement, className);\r\n        }\r\n        else {\r\n            this.delegate.removeClass(renderElement, className);\r\n        }\r\n    };\r\n    RendererAdapter.prototype.setElementStyle = function (renderElement, styleName, styleValue) {\r\n        if (styleValue != null) {\r\n            this.delegate.setStyle(renderElement, styleName, styleValue);\r\n        }\r\n        else {\r\n            this.delegate.removeStyle(renderElement, styleName);\r\n        }\r\n    };\r\n    RendererAdapter.prototype.invokeElementMethod = function (renderElement, methodName, args) {\r\n        renderElement[methodName].apply(renderElement, args);\r\n    };\r\n    RendererAdapter.prototype.setText = function (renderNode$$1, text) { this.delegate.setValue(renderNode$$1, text); };\r\n    RendererAdapter.prototype.animate = function () { throw new Error('Renderer.animate is no longer supported!'); };\r\n    return RendererAdapter;\r\n}());\r\nfunction createNgModuleRef(moduleType, parent, bootstrapComponents, def) {\r\n    return new NgModuleRef_(moduleType, parent, bootstrapComponents, def);\r\n}\r\nvar NgModuleRef_ = /** @class */ (function () {\r\n    function NgModuleRef_(_moduleType, _parent, _bootstrapComponents, _def) {\r\n        this._moduleType = _moduleType;\r\n        this._parent = _parent;\r\n        this._bootstrapComponents = _bootstrapComponents;\r\n        this._def = _def;\r\n        this._destroyListeners = [];\r\n        this._destroyed = false;\r\n        this.injector = this;\r\n        initNgModule(this);\r\n    }\r\n    NgModuleRef_.prototype.get = function (token, notFoundValue, injectFlags) {\r\n        if (notFoundValue === void 0) { notFoundValue = Injector.THROW_IF_NOT_FOUND; }\r\n        if (injectFlags === void 0) { injectFlags = 0 /* Default */; }\r\n        var flags = 0;\r\n        if (injectFlags & 4 /* SkipSelf */) {\r\n            flags |= 1 /* SkipSelf */;\r\n        }\r\n        else if (injectFlags & 2 /* Self */) {\r\n            flags |= 4 /* Self */;\r\n        }\r\n        return resolveNgModuleDep(this, { token: token, tokenKey: tokenKey(token), flags: flags }, notFoundValue);\r\n    };\r\n    Object.defineProperty(NgModuleRef_.prototype, \"instance\", {\r\n        get: function () { return this.get(this._moduleType); },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(NgModuleRef_.prototype, \"componentFactoryResolver\", {\r\n        get: function () { return this.get(ComponentFactoryResolver); },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    NgModuleRef_.prototype.destroy = function () {\r\n        if (this._destroyed) {\r\n            throw new Error(\"The ng module \" + stringify(this.instance.constructor) + \" has already been destroyed.\");\r\n        }\r\n        this._destroyed = true;\r\n        callNgModuleLifecycle(this, 131072 /* OnDestroy */);\r\n        this._destroyListeners.forEach(function (listener) { return listener(); });\r\n    };\r\n    NgModuleRef_.prototype.onDestroy = function (callback) { this._destroyListeners.push(callback); };\r\n    return NgModuleRef_;\r\n}());\r\n\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nvar RendererV1TokenKey = tokenKey(Renderer);\r\nvar Renderer2TokenKey = tokenKey(Renderer2);\r\nvar ElementRefTokenKey = tokenKey(ElementRef);\r\nvar ViewContainerRefTokenKey = tokenKey(ViewContainerRef);\r\nvar TemplateRefTokenKey = tokenKey(TemplateRef);\r\nvar ChangeDetectorRefTokenKey = tokenKey(ChangeDetectorRef);\r\nvar InjectorRefTokenKey = tokenKey(Injector);\r\nvar INJECTORRefTokenKey = tokenKey(INJECTOR);\r\nfunction directiveDef(checkIndex, flags, matchedQueries, childCount, ctor, deps, props, outputs) {\r\n    var bindings = [];\r\n    if (props) {\r\n        for (var prop in props) {\r\n            var _a = __read(props[prop], 2), bindingIndex = _a[0], nonMinifiedName = _a[1];\r\n            bindings[bindingIndex] = {\r\n                flags: 8 /* TypeProperty */,\r\n                name: prop, nonMinifiedName: nonMinifiedName,\r\n                ns: null,\r\n                securityContext: null,\r\n                suffix: null\r\n            };\r\n        }\r\n    }\r\n    var outputDefs = [];\r\n    if (outputs) {\r\n        for (var propName in outputs) {\r\n            outputDefs.push({ type: 1 /* DirectiveOutput */, propName: propName, target: null, eventName: outputs[propName] });\r\n        }\r\n    }\r\n    flags |= 16384 /* TypeDirective */;\r\n    return _def(checkIndex, flags, matchedQueries, childCount, ctor, ctor, deps, bindings, outputDefs);\r\n}\r\nfunction pipeDef(flags, ctor, deps) {\r\n    flags |= 16 /* TypePipe */;\r\n    return _def(-1, flags, null, 0, ctor, ctor, deps);\r\n}\r\nfunction providerDef(flags, matchedQueries, token, value, deps) {\r\n    return _def(-1, flags, matchedQueries, 0, token, value, deps);\r\n}\r\nfunction _def(checkIndex, flags, matchedQueriesDsl, childCount, token, value, deps, bindings, outputs) {\r\n    var _a = splitMatchedQueriesDsl(matchedQueriesDsl), matchedQueries = _a.matchedQueries, references = _a.references, matchedQueryIds = _a.matchedQueryIds;\r\n    if (!outputs) {\r\n        outputs = [];\r\n    }\r\n    if (!bindings) {\r\n        bindings = [];\r\n    }\r\n    // Need to resolve forwardRefs as e.g. for `useValue` we\r\n    // lowered the expression and then stopped evaluating it,\r\n    // i.e. also didn't unwrap it.\r\n    value = resolveForwardRef(value);\r\n    var depDefs = splitDepsDsl(deps, stringify(token));\r\n    return {\r\n        // will bet set by the view definition\r\n        nodeIndex: -1,\r\n        parent: null,\r\n        renderParent: null,\r\n        bindingIndex: -1,\r\n        outputIndex: -1,\r\n        // regular values\r\n        checkIndex: checkIndex,\r\n        flags: flags,\r\n        childFlags: 0,\r\n        directChildFlags: 0,\r\n        childMatchedQueries: 0, matchedQueries: matchedQueries, matchedQueryIds: matchedQueryIds, references: references,\r\n        ngContentIndex: -1, childCount: childCount, bindings: bindings,\r\n        bindingFlags: calcBindingFlags(bindings), outputs: outputs,\r\n        element: null,\r\n        provider: { token: token, value: value, deps: depDefs },\r\n        text: null,\r\n        query: null,\r\n        ngContent: null\r\n    };\r\n}\r\nfunction createProviderInstance(view, def) {\r\n    return _createProviderInstance(view, def);\r\n}\r\nfunction createPipeInstance(view, def) {\r\n    // deps are looked up from component.\r\n    var compView = view;\r\n    while (compView.parent && !isComponentView(compView)) {\r\n        compView = compView.parent;\r\n    }\r\n    // pipes can see the private services of the component\r\n    var allowPrivateServices = true;\r\n    // pipes are always eager and classes!\r\n    return createClass((compView.parent), (viewParentEl(compView)), allowPrivateServices, def.provider.value, def.provider.deps);\r\n}\r\nfunction createDirectiveInstance(view, def) {\r\n    // components can see other private services, other directives can't.\r\n    var allowPrivateServices = (def.flags & 32768 /* Component */) > 0;\r\n    // directives are always eager and classes!\r\n    var instance = createClass(view, (def.parent), allowPrivateServices, def.provider.value, def.provider.deps);\r\n    if (def.outputs.length) {\r\n        for (var i = 0; i < def.outputs.length; i++) {\r\n            var output = def.outputs[i];\r\n            var subscription = instance[output.propName].subscribe(eventHandlerClosure(view, def.parent.nodeIndex, output.eventName));\r\n            view.disposables[def.outputIndex + i] = subscription.unsubscribe.bind(subscription);\r\n        }\r\n    }\r\n    return instance;\r\n}\r\nfunction eventHandlerClosure(view, index, eventName) {\r\n    return function (event) { return dispatchEvent(view, index, eventName, event); };\r\n}\r\nfunction checkAndUpdateDirectiveInline(view, def, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {\r\n    var providerData = asProviderData(view, def.nodeIndex);\r\n    var directive = providerData.instance;\r\n    var changed = false;\r\n    var changes = (undefined);\r\n    var bindLen = def.bindings.length;\r\n    if (bindLen > 0 && checkBinding(view, def, 0, v0)) {\r\n        changed = true;\r\n        changes = updateProp(view, providerData, def, 0, v0, changes);\r\n    }\r\n    if (bindLen > 1 && checkBinding(view, def, 1, v1)) {\r\n        changed = true;\r\n        changes = updateProp(view, providerData, def, 1, v1, changes);\r\n    }\r\n    if (bindLen > 2 && checkBinding(view, def, 2, v2)) {\r\n        changed = true;\r\n        changes = updateProp(view, providerData, def, 2, v2, changes);\r\n    }\r\n    if (bindLen > 3 && checkBinding(view, def, 3, v3)) {\r\n        changed = true;\r\n        changes = updateProp(view, providerData, def, 3, v3, changes);\r\n    }\r\n    if (bindLen > 4 && checkBinding(view, def, 4, v4)) {\r\n        changed = true;\r\n        changes = updateProp(view, providerData, def, 4, v4, changes);\r\n    }\r\n    if (bindLen > 5 && checkBinding(view, def, 5, v5)) {\r\n        changed = true;\r\n        changes = updateProp(view, providerData, def, 5, v5, changes);\r\n    }\r\n    if (bindLen > 6 && checkBinding(view, def, 6, v6)) {\r\n        changed = true;\r\n        changes = updateProp(view, providerData, def, 6, v6, changes);\r\n    }\r\n    if (bindLen > 7 && checkBinding(view, def, 7, v7)) {\r\n        changed = true;\r\n        changes = updateProp(view, providerData, def, 7, v7, changes);\r\n    }\r\n    if (bindLen > 8 && checkBinding(view, def, 8, v8)) {\r\n        changed = true;\r\n        changes = updateProp(view, providerData, def, 8, v8, changes);\r\n    }\r\n    if (bindLen > 9 && checkBinding(view, def, 9, v9)) {\r\n        changed = true;\r\n        changes = updateProp(view, providerData, def, 9, v9, changes);\r\n    }\r\n    if (changes) {\r\n        directive.ngOnChanges(changes);\r\n    }\r\n    if ((def.flags & 65536 /* OnInit */) &&\r\n        shouldCallLifecycleInitHook(view, 256 /* InitState_CallingOnInit */, def.nodeIndex)) {\r\n        directive.ngOnInit();\r\n    }\r\n    if (def.flags & 262144 /* DoCheck */) {\r\n        directive.ngDoCheck();\r\n    }\r\n    return changed;\r\n}\r\nfunction checkAndUpdateDirectiveDynamic(view, def, values) {\r\n    var providerData = asProviderData(view, def.nodeIndex);\r\n    var directive = providerData.instance;\r\n    var changed = false;\r\n    var changes = (undefined);\r\n    for (var i = 0; i < values.length; i++) {\r\n        if (checkBinding(view, def, i, values[i])) {\r\n            changed = true;\r\n            changes = updateProp(view, providerData, def, i, values[i], changes);\r\n        }\r\n    }\r\n    if (changes) {\r\n        directive.ngOnChanges(changes);\r\n    }\r\n    if ((def.flags & 65536 /* OnInit */) &&\r\n        shouldCallLifecycleInitHook(view, 256 /* InitState_CallingOnInit */, def.nodeIndex)) {\r\n        directive.ngOnInit();\r\n    }\r\n    if (def.flags & 262144 /* DoCheck */) {\r\n        directive.ngDoCheck();\r\n    }\r\n    return changed;\r\n}\r\nfunction _createProviderInstance(view, def) {\r\n    // private services can see other private services\r\n    var allowPrivateServices = (def.flags & 8192 /* PrivateProvider */) > 0;\r\n    var providerDef = def.provider;\r\n    switch (def.flags & 201347067 /* Types */) {\r\n        case 512 /* TypeClassProvider */:\r\n            return createClass(view, (def.parent), allowPrivateServices, providerDef.value, providerDef.deps);\r\n        case 1024 /* TypeFactoryProvider */:\r\n            return callFactory(view, (def.parent), allowPrivateServices, providerDef.value, providerDef.deps);\r\n        case 2048 /* TypeUseExistingProvider */:\r\n            return resolveDep(view, (def.parent), allowPrivateServices, providerDef.deps[0]);\r\n        case 256 /* TypeValueProvider */:\r\n            return providerDef.value;\r\n    }\r\n}\r\nfunction createClass(view, elDef, allowPrivateServices, ctor, deps) {\r\n    var len = deps.length;\r\n    switch (len) {\r\n        case 0:\r\n            return new ctor();\r\n        case 1:\r\n            return new ctor(resolveDep(view, elDef, allowPrivateServices, deps[0]));\r\n        case 2:\r\n            return new ctor(resolveDep(view, elDef, allowPrivateServices, deps[0]), resolveDep(view, elDef, allowPrivateServices, deps[1]));\r\n        case 3:\r\n            return new ctor(resolveDep(view, elDef, allowPrivateServices, deps[0]), resolveDep(view, elDef, allowPrivateServices, deps[1]), resolveDep(view, elDef, allowPrivateServices, deps[2]));\r\n        default:\r\n            var depValues = new Array(len);\r\n            for (var i = 0; i < len; i++) {\r\n                depValues[i] = resolveDep(view, elDef, allowPrivateServices, deps[i]);\r\n            }\r\n            return new (ctor.bind.apply(ctor, __spread([void 0], depValues)))();\r\n    }\r\n}\r\nfunction callFactory(view, elDef, allowPrivateServices, factory, deps) {\r\n    var len = deps.length;\r\n    switch (len) {\r\n        case 0:\r\n            return factory();\r\n        case 1:\r\n            return factory(resolveDep(view, elDef, allowPrivateServices, deps[0]));\r\n        case 2:\r\n            return factory(resolveDep(view, elDef, allowPrivateServices, deps[0]), resolveDep(view, elDef, allowPrivateServices, deps[1]));\r\n        case 3:\r\n            return factory(resolveDep(view, elDef, allowPrivateServices, deps[0]), resolveDep(view, elDef, allowPrivateServices, deps[1]), resolveDep(view, elDef, allowPrivateServices, deps[2]));\r\n        default:\r\n            var depValues = Array(len);\r\n            for (var i = 0; i < len; i++) {\r\n                depValues[i] = resolveDep(view, elDef, allowPrivateServices, deps[i]);\r\n            }\r\n            return factory.apply(void 0, __spread(depValues));\r\n    }\r\n}\r\n// This default value is when checking the hierarchy for a token.\r\n//\r\n// It means both:\r\n// - the token is not provided by the current injector,\r\n// - only the element injectors should be checked (ie do not check module injectors\r\n//\r\n//          mod1\r\n//         /\r\n//       el1   mod2\r\n//         \\  /\r\n//         el2\r\n//\r\n// When requesting el2.injector.get(token), we should check in the following order and return the\r\n// first found value:\r\n// - el2.injector.get(token, default)\r\n// - el1.injector.get(token, NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR) -> do not check the module\r\n// - mod2.injector.get(token, default)\r\nvar NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR = {};\r\nfunction resolveDep(view, elDef, allowPrivateServices, depDef, notFoundValue) {\r\n    if (notFoundValue === void 0) { notFoundValue = Injector.THROW_IF_NOT_FOUND; }\r\n    if (depDef.flags & 8 /* Value */) {\r\n        return depDef.token;\r\n    }\r\n    var startView = view;\r\n    if (depDef.flags & 2 /* Optional */) {\r\n        notFoundValue = null;\r\n    }\r\n    var tokenKey$$1 = depDef.tokenKey;\r\n    if (tokenKey$$1 === ChangeDetectorRefTokenKey) {\r\n        // directives on the same element as a component should be able to control the change detector\r\n        // of that component as well.\r\n        allowPrivateServices = !!(elDef && elDef.element.componentView);\r\n    }\r\n    if (elDef && (depDef.flags & 1 /* SkipSelf */)) {\r\n        allowPrivateServices = false;\r\n        elDef = (elDef.parent);\r\n    }\r\n    var searchView = view;\r\n    while (searchView) {\r\n        if (elDef) {\r\n            switch (tokenKey$$1) {\r\n                case RendererV1TokenKey: {\r\n                    var compView = findCompView(searchView, elDef, allowPrivateServices);\r\n                    return createRendererV1(compView);\r\n                }\r\n                case Renderer2TokenKey: {\r\n                    var compView = findCompView(searchView, elDef, allowPrivateServices);\r\n                    return compView.renderer;\r\n                }\r\n                case ElementRefTokenKey:\r\n                    return new ElementRef(asElementData(searchView, elDef.nodeIndex).renderElement);\r\n                case ViewContainerRefTokenKey:\r\n                    return asElementData(searchView, elDef.nodeIndex).viewContainer;\r\n                case TemplateRefTokenKey: {\r\n                    if (elDef.element.template) {\r\n                        return asElementData(searchView, elDef.nodeIndex).template;\r\n                    }\r\n                    break;\r\n                }\r\n                case ChangeDetectorRefTokenKey: {\r\n                    var cdView = findCompView(searchView, elDef, allowPrivateServices);\r\n                    return createChangeDetectorRef(cdView);\r\n                }\r\n                case InjectorRefTokenKey:\r\n                case INJECTORRefTokenKey:\r\n                    return createInjector$1(searchView, elDef);\r\n                default:\r\n                    var providerDef_1 = (allowPrivateServices ? elDef.element.allProviders :\r\n                        elDef.element.publicProviders)[tokenKey$$1];\r\n                    if (providerDef_1) {\r\n                        var providerData = asProviderData(searchView, providerDef_1.nodeIndex);\r\n                        if (!providerData) {\r\n                            providerData = { instance: _createProviderInstance(searchView, providerDef_1) };\r\n                            searchView.nodes[providerDef_1.nodeIndex] = providerData;\r\n                        }\r\n                        return providerData.instance;\r\n                    }\r\n            }\r\n        }\r\n        allowPrivateServices = isComponentView(searchView);\r\n        elDef = (viewParentEl(searchView));\r\n        searchView = (searchView.parent);\r\n        if (depDef.flags & 4 /* Self */) {\r\n            searchView = null;\r\n        }\r\n    }\r\n    var value = startView.root.injector.get(depDef.token, NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR);\r\n    if (value !== NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR ||\r\n        notFoundValue === NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR) {\r\n        // Return the value from the root element injector when\r\n        // - it provides it\r\n        //   (value !== NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR)\r\n        // - the module injector should not be checked\r\n        //   (notFoundValue === NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR)\r\n        return value;\r\n    }\r\n    return startView.root.ngModule.injector.get(depDef.token, notFoundValue);\r\n}\r\nfunction findCompView(view, elDef, allowPrivateServices) {\r\n    var compView;\r\n    if (allowPrivateServices) {\r\n        compView = asElementData(view, elDef.nodeIndex).componentView;\r\n    }\r\n    else {\r\n        compView = view;\r\n        while (compView.parent && !isComponentView(compView)) {\r\n            compView = compView.parent;\r\n        }\r\n    }\r\n    return compView;\r\n}\r\nfunction updateProp(view, providerData, def, bindingIdx, value, changes) {\r\n    if (def.flags & 32768 /* Component */) {\r\n        var compView = asElementData(view, def.parent.nodeIndex).componentView;\r\n        if (compView.def.flags & 2 /* OnPush */) {\r\n            compView.state |= 8 /* ChecksEnabled */;\r\n        }\r\n    }\r\n    var binding = def.bindings[bindingIdx];\r\n    var propName = (binding.name);\r\n    // Note: This is still safe with Closure Compiler as\r\n    // the user passed in the property name as an object has to `providerDef`,\r\n    // so Closure Compiler will have renamed the property correctly already.\r\n    providerData.instance[propName] = value;\r\n    if (def.flags & 524288 /* OnChanges */) {\r\n        changes = changes || {};\r\n        var oldValue = WrappedValue.unwrap(view.oldValues[def.bindingIndex + bindingIdx]);\r\n        var binding_1 = def.bindings[bindingIdx];\r\n        changes[binding_1.nonMinifiedName] =\r\n            new SimpleChange(oldValue, value, (view.state & 2 /* FirstCheck */) !== 0);\r\n    }\r\n    view.oldValues[def.bindingIndex + bindingIdx] = value;\r\n    return changes;\r\n}\r\n// This function calls the ngAfterContentCheck, ngAfterContentInit,\r\n// ngAfterViewCheck, and ngAfterViewInit lifecycle hooks (depending on the node\r\n// flags in lifecycle). Unlike ngDoCheck, ngOnChanges and ngOnInit, which are\r\n// called during a pre-order traversal of the view tree (that is calling the\r\n// parent hooks before the child hooks) these events are sent in using a\r\n// post-order traversal of the tree (children before parents). This changes the\r\n// meaning of initIndex in the view state. For ngOnInit, initIndex tracks the\r\n// expected nodeIndex which a ngOnInit should be called. When sending\r\n// ngAfterContentInit and ngAfterViewInit it is the expected count of\r\n// ngAfterContentInit or ngAfterViewInit methods that have been called. This\r\n// ensure that despite being called recursively or after picking up after an\r\n// exception, the ngAfterContentInit or ngAfterViewInit will be called on the\r\n// correct nodes. Consider for example, the following (where E is an element\r\n// and D is a directive)\r\n//  Tree:       pre-order index  post-order index\r\n//    E1        0                6\r\n//      E2      1                1\r\n//       D3     2                0\r\n//      E4      3                5\r\n//       E5     4                4\r\n//        E6    5                2\r\n//        E7    6                3\r\n// As can be seen, the post-order index has an unclear relationship to the\r\n// pre-order index (postOrderIndex === preOrderIndex - parentCount +\r\n// childCount). Since number of calls to ngAfterContentInit and ngAfterViewInit\r\n// are stable (will be the same for the same view regardless of exceptions or\r\n// recursion) we just need to count them which will roughly correspond to the\r\n// post-order index (it skips elements and directives that do not have\r\n// lifecycle hooks).\r\n//\r\n// For example, if an exception is raised in the E6.onAfterViewInit() the\r\n// initIndex is left at 3 (by shouldCallLifecycleInitHook() which set it to\r\n// initIndex + 1). When checkAndUpdateView() is called again D3, E2 and E6 will\r\n// not have their ngAfterViewInit() called but, starting with E7, the rest of\r\n// the view will begin getting ngAfterViewInit() called until a check and\r\n// pass is complete.\r\n//\r\n// This algorthim also handles recursion. Consider if E4's ngAfterViewInit()\r\n// indirectly calls E1's ChangeDetectorRef.detectChanges(). The expected\r\n// initIndex is set to 6, the recusive checkAndUpdateView() starts walk again.\r\n// D3, E2, E6, E7, E5 and E4 are skipped, ngAfterViewInit() is called on E1.\r\n// When the recursion returns the initIndex will be 7 so E1 is skipped as it\r\n// has already been called in the recursively called checkAnUpdateView().\r\nfunction callLifecycleHooksChildrenFirst(view, lifecycles) {\r\n    if (!(view.def.nodeFlags & lifecycles)) {\r\n        return;\r\n    }\r\n    var nodes = view.def.nodes;\r\n    var initIndex = 0;\r\n    for (var i = 0; i < nodes.length; i++) {\r\n        var nodeDef = nodes[i];\r\n        var parent_1 = nodeDef.parent;\r\n        if (!parent_1 && nodeDef.flags & lifecycles) {\r\n            // matching root node (e.g. a pipe)\r\n            callProviderLifecycles(view, i, nodeDef.flags & lifecycles, initIndex++);\r\n        }\r\n        if ((nodeDef.childFlags & lifecycles) === 0) {\r\n            // no child matches one of the lifecycles\r\n            i += nodeDef.childCount;\r\n        }\r\n        while (parent_1 && (parent_1.flags & 1 /* TypeElement */) &&\r\n            i === parent_1.nodeIndex + parent_1.childCount) {\r\n            // last child of an element\r\n            if (parent_1.directChildFlags & lifecycles) {\r\n                initIndex = callElementProvidersLifecycles(view, parent_1, lifecycles, initIndex);\r\n            }\r\n            parent_1 = parent_1.parent;\r\n        }\r\n    }\r\n}\r\nfunction callElementProvidersLifecycles(view, elDef, lifecycles, initIndex) {\r\n    for (var i = elDef.nodeIndex + 1; i <= elDef.nodeIndex + elDef.childCount; i++) {\r\n        var nodeDef = view.def.nodes[i];\r\n        if (nodeDef.flags & lifecycles) {\r\n            callProviderLifecycles(view, i, nodeDef.flags & lifecycles, initIndex++);\r\n        }\r\n        // only visit direct children\r\n        i += nodeDef.childCount;\r\n    }\r\n    return initIndex;\r\n}\r\nfunction callProviderLifecycles(view, index, lifecycles, initIndex) {\r\n    var providerData = asProviderData(view, index);\r\n    if (!providerData) {\r\n        return;\r\n    }\r\n    var provider = providerData.instance;\r\n    if (!provider) {\r\n        return;\r\n    }\r\n    Services.setCurrentNode(view, index);\r\n    if (lifecycles & 1048576 /* AfterContentInit */ &&\r\n        shouldCallLifecycleInitHook(view, 512 /* InitState_CallingAfterContentInit */, initIndex)) {\r\n        provider.ngAfterContentInit();\r\n    }\r\n    if (lifecycles & 2097152 /* AfterContentChecked */) {\r\n        provider.ngAfterContentChecked();\r\n    }\r\n    if (lifecycles & 4194304 /* AfterViewInit */ &&\r\n        shouldCallLifecycleInitHook(view, 768 /* InitState_CallingAfterViewInit */, initIndex)) {\r\n        provider.ngAfterViewInit();\r\n    }\r\n    if (lifecycles & 8388608 /* AfterViewChecked */) {\r\n        provider.ngAfterViewChecked();\r\n    }\r\n    if (lifecycles & 131072 /* OnDestroy */) {\r\n        provider.ngOnDestroy();\r\n    }\r\n}\r\n\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nfunction queryDef(flags, id, bindings) {\r\n    var bindingDefs = [];\r\n    for (var propName in bindings) {\r\n        var bindingType = bindings[propName];\r\n        bindingDefs.push({ propName: propName, bindingType: bindingType });\r\n    }\r\n    return {\r\n        // will bet set by the view definition\r\n        nodeIndex: -1,\r\n        parent: null,\r\n        renderParent: null,\r\n        bindingIndex: -1,\r\n        outputIndex: -1,\r\n        // regular values\r\n        // TODO(vicb): check\r\n        checkIndex: -1, flags: flags,\r\n        childFlags: 0,\r\n        directChildFlags: 0,\r\n        childMatchedQueries: 0,\r\n        ngContentIndex: -1,\r\n        matchedQueries: {},\r\n        matchedQueryIds: 0,\r\n        references: {},\r\n        childCount: 0,\r\n        bindings: [],\r\n        bindingFlags: 0,\r\n        outputs: [],\r\n        element: null,\r\n        provider: null,\r\n        text: null,\r\n        query: { id: id, filterId: filterQueryId(id), bindings: bindingDefs },\r\n        ngContent: null\r\n    };\r\n}\r\nfunction createQuery() {\r\n    return new QueryList();\r\n}\r\nfunction dirtyParentQueries(view) {\r\n    var queryIds = view.def.nodeMatchedQueries;\r\n    while (view.parent && isEmbeddedView(view)) {\r\n        var tplDef = (view.parentNodeDef);\r\n        view = view.parent;\r\n        // content queries\r\n        var end = tplDef.nodeIndex + tplDef.childCount;\r\n        for (var i = 0; i <= end; i++) {\r\n            var nodeDef = view.def.nodes[i];\r\n            if ((nodeDef.flags & 67108864 /* TypeContentQuery */) &&\r\n                (nodeDef.flags & 536870912 /* DynamicQuery */) &&\r\n                (nodeDef.query.filterId & queryIds) === nodeDef.query.filterId) {\r\n                asQueryList(view, i).setDirty();\r\n            }\r\n            if ((nodeDef.flags & 1 /* TypeElement */ && i + nodeDef.childCount < tplDef.nodeIndex) ||\r\n                !(nodeDef.childFlags & 67108864 /* TypeContentQuery */) ||\r\n                !(nodeDef.childFlags & 536870912 /* DynamicQuery */)) {\r\n                // skip elements that don't contain the template element or no query.\r\n                i += nodeDef.childCount;\r\n            }\r\n        }\r\n    }\r\n    // view queries\r\n    if (view.def.nodeFlags & 134217728 /* TypeViewQuery */) {\r\n        for (var i = 0; i < view.def.nodes.length; i++) {\r\n            var nodeDef = view.def.nodes[i];\r\n            if ((nodeDef.flags & 134217728 /* TypeViewQuery */) && (nodeDef.flags & 536870912 /* DynamicQuery */)) {\r\n                asQueryList(view, i).setDirty();\r\n            }\r\n            // only visit the root nodes\r\n            i += nodeDef.childCount;\r\n        }\r\n    }\r\n}\r\nfunction checkAndUpdateQuery(view, nodeDef) {\r\n    var queryList = asQueryList(view, nodeDef.nodeIndex);\r\n    if (!queryList.dirty) {\r\n        return;\r\n    }\r\n    var directiveInstance;\r\n    var newValues = (undefined);\r\n    if (nodeDef.flags & 67108864 /* TypeContentQuery */) {\r\n        var elementDef = (nodeDef.parent.parent);\r\n        newValues = calcQueryValues(view, elementDef.nodeIndex, elementDef.nodeIndex + elementDef.childCount, (nodeDef.query), []);\r\n        directiveInstance = asProviderData(view, nodeDef.parent.nodeIndex).instance;\r\n    }\r\n    else if (nodeDef.flags & 134217728 /* TypeViewQuery */) {\r\n        newValues = calcQueryValues(view, 0, view.def.nodes.length - 1, (nodeDef.query), []);\r\n        directiveInstance = view.component;\r\n    }\r\n    queryList.reset(newValues);\r\n    var bindings = nodeDef.query.bindings;\r\n    var notify = false;\r\n    for (var i = 0; i < bindings.length; i++) {\r\n        var binding = bindings[i];\r\n        var boundValue = void 0;\r\n        switch (binding.bindingType) {\r\n            case 0 /* First */:\r\n                boundValue = queryList.first;\r\n                break;\r\n            case 1 /* All */:\r\n                boundValue = queryList;\r\n                notify = true;\r\n                break;\r\n        }\r\n        directiveInstance[binding.propName] = boundValue;\r\n    }\r\n    if (notify) {\r\n        queryList.notifyOnChanges();\r\n    }\r\n}\r\nfunction calcQueryValues(view, startIndex, endIndex, queryDef, values) {\r\n    for (var i = startIndex; i <= endIndex; i++) {\r\n        var nodeDef = view.def.nodes[i];\r\n        var valueType = nodeDef.matchedQueries[queryDef.id];\r\n        if (valueType != null) {\r\n            values.push(getQueryValue(view, nodeDef, valueType));\r\n        }\r\n        if (nodeDef.flags & 1 /* TypeElement */ && nodeDef.element.template &&\r\n            (nodeDef.element.template.nodeMatchedQueries & queryDef.filterId) ===\r\n                queryDef.filterId) {\r\n            var elementData = asElementData(view, i);\r\n            // check embedded views that were attached at the place of their template,\r\n            // but process child nodes first if some match the query (see issue #16568)\r\n            if ((nodeDef.childMatchedQueries & queryDef.filterId) === queryDef.filterId) {\r\n                calcQueryValues(view, i + 1, i + nodeDef.childCount, queryDef, values);\r\n                i += nodeDef.childCount;\r\n            }\r\n            if (nodeDef.flags & 16777216 /* EmbeddedViews */) {\r\n                var embeddedViews = elementData.viewContainer._embeddedViews;\r\n                for (var k = 0; k < embeddedViews.length; k++) {\r\n                    var embeddedView = embeddedViews[k];\r\n                    var dvc = declaredViewContainer(embeddedView);\r\n                    if (dvc && dvc === elementData) {\r\n                        calcQueryValues(embeddedView, 0, embeddedView.def.nodes.length - 1, queryDef, values);\r\n                    }\r\n                }\r\n            }\r\n            var projectedViews = elementData.template._projectedViews;\r\n            if (projectedViews) {\r\n                for (var k = 0; k < projectedViews.length; k++) {\r\n                    var projectedView = projectedViews[k];\r\n                    calcQueryValues(projectedView, 0, projectedView.def.nodes.length - 1, queryDef, values);\r\n                }\r\n            }\r\n        }\r\n        if ((nodeDef.childMatchedQueries & queryDef.filterId) !== queryDef.filterId) {\r\n            // if no child matches the query, skip the children.\r\n            i += nodeDef.childCount;\r\n        }\r\n    }\r\n    return values;\r\n}\r\nfunction getQueryValue(view, nodeDef, queryValueType) {\r\n    if (queryValueType != null) {\r\n        // a match\r\n        switch (queryValueType) {\r\n            case 1 /* RenderElement */:\r\n                return asElementData(view, nodeDef.nodeIndex).renderElement;\r\n            case 0 /* ElementRef */:\r\n                return new ElementRef(asElementData(view, nodeDef.nodeIndex).renderElement);\r\n            case 2 /* TemplateRef */:\r\n                return asElementData(view, nodeDef.nodeIndex).template;\r\n            case 3 /* ViewContainerRef */:\r\n                return asElementData(view, nodeDef.nodeIndex).viewContainer;\r\n            case 4 /* Provider */:\r\n                return asProviderData(view, nodeDef.nodeIndex).instance;\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nfunction ngContentDef(ngContentIndex, index) {\r\n    return {\r\n        // will bet set by the view definition\r\n        nodeIndex: -1,\r\n        parent: null,\r\n        renderParent: null,\r\n        bindingIndex: -1,\r\n        outputIndex: -1,\r\n        // regular values\r\n        checkIndex: -1,\r\n        flags: 8 /* TypeNgContent */,\r\n        childFlags: 0,\r\n        directChildFlags: 0,\r\n        childMatchedQueries: 0,\r\n        matchedQueries: {},\r\n        matchedQueryIds: 0,\r\n        references: {}, ngContentIndex: ngContentIndex,\r\n        childCount: 0,\r\n        bindings: [],\r\n        bindingFlags: 0,\r\n        outputs: [],\r\n        element: null,\r\n        provider: null,\r\n        text: null,\r\n        query: null,\r\n        ngContent: { index: index }\r\n    };\r\n}\r\nfunction appendNgContent(view, renderHost, def) {\r\n    var parentEl = getParentRenderElement(view, renderHost, def);\r\n    if (!parentEl) {\r\n        // Nothing to do if there is no parent element.\r\n        return;\r\n    }\r\n    var ngContentIndex = def.ngContent.index;\r\n    visitProjectedRenderNodes(view, ngContentIndex, 1 /* AppendChild */, parentEl, null, undefined);\r\n}\r\n\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nfunction purePipeDef(checkIndex, argCount) {\r\n    // argCount + 1 to include the pipe as first arg\r\n    return _pureExpressionDef(128 /* TypePurePipe */, checkIndex, new Array(argCount + 1));\r\n}\r\nfunction pureArrayDef(checkIndex, argCount) {\r\n    return _pureExpressionDef(32 /* TypePureArray */, checkIndex, new Array(argCount));\r\n}\r\nfunction pureObjectDef(checkIndex, propToIndex) {\r\n    var keys = Object.keys(propToIndex);\r\n    var nbKeys = keys.length;\r\n    var propertyNames = new Array(nbKeys);\r\n    for (var i = 0; i < nbKeys; i++) {\r\n        var key = keys[i];\r\n        var index = propToIndex[key];\r\n        propertyNames[index] = key;\r\n    }\r\n    return _pureExpressionDef(64 /* TypePureObject */, checkIndex, propertyNames);\r\n}\r\nfunction _pureExpressionDef(flags, checkIndex, propertyNames) {\r\n    var bindings = new Array(propertyNames.length);\r\n    for (var i = 0; i < propertyNames.length; i++) {\r\n        var prop = propertyNames[i];\r\n        bindings[i] = {\r\n            flags: 8 /* TypeProperty */,\r\n            name: prop,\r\n            ns: null,\r\n            nonMinifiedName: prop,\r\n            securityContext: null,\r\n            suffix: null\r\n        };\r\n    }\r\n    return {\r\n        // will bet set by the view definition\r\n        nodeIndex: -1,\r\n        parent: null,\r\n        renderParent: null,\r\n        bindingIndex: -1,\r\n        outputIndex: -1,\r\n        // regular values\r\n        checkIndex: checkIndex,\r\n        flags: flags,\r\n        childFlags: 0,\r\n        directChildFlags: 0,\r\n        childMatchedQueries: 0,\r\n        matchedQueries: {},\r\n        matchedQueryIds: 0,\r\n        references: {},\r\n        ngContentIndex: -1,\r\n        childCount: 0, bindings: bindings,\r\n        bindingFlags: calcBindingFlags(bindings),\r\n        outputs: [],\r\n        element: null,\r\n        provider: null,\r\n        text: null,\r\n        query: null,\r\n        ngContent: null\r\n    };\r\n}\r\nfunction createPureExpression(view, def) {\r\n    return { value: undefined };\r\n}\r\nfunction checkAndUpdatePureExpressionInline(view, def, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {\r\n    var bindings = def.bindings;\r\n    var changed = false;\r\n    var bindLen = bindings.length;\r\n    if (bindLen > 0 && checkAndUpdateBinding(view, def, 0, v0))\r\n        changed = true;\r\n    if (bindLen > 1 && checkAndUpdateBinding(view, def, 1, v1))\r\n        changed = true;\r\n    if (bindLen > 2 && checkAndUpdateBinding(view, def, 2, v2))\r\n        changed = true;\r\n    if (bindLen > 3 && checkAndUpdateBinding(view, def, 3, v3))\r\n        changed = true;\r\n    if (bindLen > 4 && checkAndUpdateBinding(view, def, 4, v4))\r\n        changed = true;\r\n    if (bindLen > 5 && checkAndUpdateBinding(view, def, 5, v5))\r\n        changed = true;\r\n    if (bindLen > 6 && checkAndUpdateBinding(view, def, 6, v6))\r\n        changed = true;\r\n    if (bindLen > 7 && checkAndUpdateBinding(view, def, 7, v7))\r\n        changed = true;\r\n    if (bindLen > 8 && checkAndUpdateBinding(view, def, 8, v8))\r\n        changed = true;\r\n    if (bindLen > 9 && checkAndUpdateBinding(view, def, 9, v9))\r\n        changed = true;\r\n    if (changed) {\r\n        var data = asPureExpressionData(view, def.nodeIndex);\r\n        var value = void 0;\r\n        switch (def.flags & 201347067 /* Types */) {\r\n            case 32 /* TypePureArray */:\r\n                value = new Array(bindings.length);\r\n                if (bindLen > 0)\r\n                    value[0] = v0;\r\n                if (bindLen > 1)\r\n                    value[1] = v1;\r\n                if (bindLen > 2)\r\n                    value[2] = v2;\r\n                if (bindLen > 3)\r\n                    value[3] = v3;\r\n                if (bindLen > 4)\r\n                    value[4] = v4;\r\n                if (bindLen > 5)\r\n                    value[5] = v5;\r\n                if (bindLen > 6)\r\n                    value[6] = v6;\r\n                if (bindLen > 7)\r\n                    value[7] = v7;\r\n                if (bindLen > 8)\r\n                    value[8] = v8;\r\n                if (bindLen > 9)\r\n                    value[9] = v9;\r\n                break;\r\n            case 64 /* TypePureObject */:\r\n                value = {};\r\n                if (bindLen > 0)\r\n                    value[bindings[0].name] = v0;\r\n                if (bindLen > 1)\r\n                    value[bindings[1].name] = v1;\r\n                if (bindLen > 2)\r\n                    value[bindings[2].name] = v2;\r\n                if (bindLen > 3)\r\n                    value[bindings[3].name] = v3;\r\n                if (bindLen > 4)\r\n                    value[bindings[4].name] = v4;\r\n                if (bindLen > 5)\r\n                    value[bindings[5].name] = v5;\r\n                if (bindLen > 6)\r\n                    value[bindings[6].name] = v6;\r\n                if (bindLen > 7)\r\n                    value[bindings[7].name] = v7;\r\n                if (bindLen > 8)\r\n                    value[bindings[8].name] = v8;\r\n                if (bindLen > 9)\r\n                    value[bindings[9].name] = v9;\r\n                break;\r\n            case 128 /* TypePurePipe */:\r\n                var pipe = v0;\r\n                switch (bindLen) {\r\n                    case 1:\r\n                        value = pipe.transform(v0);\r\n                        break;\r\n                    case 2:\r\n                        value = pipe.transform(v1);\r\n                        break;\r\n                    case 3:\r\n                        value = pipe.transform(v1, v2);\r\n                        break;\r\n                    case 4:\r\n                        value = pipe.transform(v1, v2, v3);\r\n                        break;\r\n                    case 5:\r\n                        value = pipe.transform(v1, v2, v3, v4);\r\n                        break;\r\n                    case 6:\r\n                        value = pipe.transform(v1, v2, v3, v4, v5);\r\n                        break;\r\n                    case 7:\r\n                        value = pipe.transform(v1, v2, v3, v4, v5, v6);\r\n                        break;\r\n                    case 8:\r\n                        value = pipe.transform(v1, v2, v3, v4, v5, v6, v7);\r\n                        break;\r\n                    case 9:\r\n                        value = pipe.transform(v1, v2, v3, v4, v5, v6, v7, v8);\r\n                        break;\r\n                    case 10:\r\n                        value = pipe.transform(v1, v2, v3, v4, v5, v6, v7, v8, v9);\r\n                        break;\r\n                }\r\n                break;\r\n        }\r\n        data.value = value;\r\n    }\r\n    return changed;\r\n}\r\nfunction checkAndUpdatePureExpressionDynamic(view, def, values) {\r\n    var bindings = def.bindings;\r\n    var changed = false;\r\n    for (var i = 0; i < values.length; i++) {\r\n        // Note: We need to loop over all values, so that\r\n        // the old values are updates as well!\r\n        if (checkAndUpdateBinding(view, def, i, values[i])) {\r\n            changed = true;\r\n        }\r\n    }\r\n    if (changed) {\r\n        var data = asPureExpressionData(view, def.nodeIndex);\r\n        var value = void 0;\r\n        switch (def.flags & 201347067 /* Types */) {\r\n            case 32 /* TypePureArray */:\r\n                value = values;\r\n                break;\r\n            case 64 /* TypePureObject */:\r\n                value = {};\r\n                for (var i = 0; i < values.length; i++) {\r\n                    value[bindings[i].name] = values[i];\r\n                }\r\n                break;\r\n            case 128 /* TypePurePipe */:\r\n                var pipe = values[0];\r\n                var params = values.slice(1);\r\n                value = pipe.transform.apply(pipe, __spread(params));\r\n                break;\r\n        }\r\n        data.value = value;\r\n    }\r\n    return changed;\r\n}\r\n\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nfunction textDef(checkIndex, ngContentIndex, staticText) {\r\n    var bindings = new Array(staticText.length - 1);\r\n    for (var i = 1; i < staticText.length; i++) {\r\n        bindings[i - 1] = {\r\n            flags: 8 /* TypeProperty */,\r\n            name: null,\r\n            ns: null,\r\n            nonMinifiedName: null,\r\n            securityContext: null,\r\n            suffix: staticText[i],\r\n        };\r\n    }\r\n    return {\r\n        // will bet set by the view definition\r\n        nodeIndex: -1,\r\n        parent: null,\r\n        renderParent: null,\r\n        bindingIndex: -1,\r\n        outputIndex: -1,\r\n        // regular values\r\n        checkIndex: checkIndex,\r\n        flags: 2 /* TypeText */,\r\n        childFlags: 0,\r\n        directChildFlags: 0,\r\n        childMatchedQueries: 0,\r\n        matchedQueries: {},\r\n        matchedQueryIds: 0,\r\n        references: {}, ngContentIndex: ngContentIndex,\r\n        childCount: 0, bindings: bindings,\r\n        bindingFlags: 8 /* TypeProperty */,\r\n        outputs: [],\r\n        element: null,\r\n        provider: null,\r\n        text: { prefix: staticText[0] },\r\n        query: null,\r\n        ngContent: null,\r\n    };\r\n}\r\nfunction createText(view, renderHost, def) {\r\n    var renderNode$$1;\r\n    var renderer = view.renderer;\r\n    renderNode$$1 = renderer.createText(def.text.prefix);\r\n    var parentEl = getParentRenderElement(view, renderHost, def);\r\n    if (parentEl) {\r\n        renderer.appendChild(parentEl, renderNode$$1);\r\n    }\r\n    return { renderText: renderNode$$1 };\r\n}\r\nfunction checkAndUpdateTextInline(view, def, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {\r\n    var changed = false;\r\n    var bindings = def.bindings;\r\n    var bindLen = bindings.length;\r\n    if (bindLen > 0 && checkAndUpdateBinding(view, def, 0, v0))\r\n        changed = true;\r\n    if (bindLen > 1 && checkAndUpdateBinding(view, def, 1, v1))\r\n        changed = true;\r\n    if (bindLen > 2 && checkAndUpdateBinding(view, def, 2, v2))\r\n        changed = true;\r\n    if (bindLen > 3 && checkAndUpdateBinding(view, def, 3, v3))\r\n        changed = true;\r\n    if (bindLen > 4 && checkAndUpdateBinding(view, def, 4, v4))\r\n        changed = true;\r\n    if (bindLen > 5 && checkAndUpdateBinding(view, def, 5, v5))\r\n        changed = true;\r\n    if (bindLen > 6 && checkAndUpdateBinding(view, def, 6, v6))\r\n        changed = true;\r\n    if (bindLen > 7 && checkAndUpdateBinding(view, def, 7, v7))\r\n        changed = true;\r\n    if (bindLen > 8 && checkAndUpdateBinding(view, def, 8, v8))\r\n        changed = true;\r\n    if (bindLen > 9 && checkAndUpdateBinding(view, def, 9, v9))\r\n        changed = true;\r\n    if (changed) {\r\n        var value = def.text.prefix;\r\n        if (bindLen > 0)\r\n            value += _addInterpolationPart(v0, bindings[0]);\r\n        if (bindLen > 1)\r\n            value += _addInterpolationPart(v1, bindings[1]);\r\n        if (bindLen > 2)\r\n            value += _addInterpolationPart(v2, bindings[2]);\r\n        if (bindLen > 3)\r\n            value += _addInterpolationPart(v3, bindings[3]);\r\n        if (bindLen > 4)\r\n            value += _addInterpolationPart(v4, bindings[4]);\r\n        if (bindLen > 5)\r\n            value += _addInterpolationPart(v5, bindings[5]);\r\n        if (bindLen > 6)\r\n            value += _addInterpolationPart(v6, bindings[6]);\r\n        if (bindLen > 7)\r\n            value += _addInterpolationPart(v7, bindings[7]);\r\n        if (bindLen > 8)\r\n            value += _addInterpolationPart(v8, bindings[8]);\r\n        if (bindLen > 9)\r\n            value += _addInterpolationPart(v9, bindings[9]);\r\n        var renderNode$$1 = asTextData(view, def.nodeIndex).renderText;\r\n        view.renderer.setValue(renderNode$$1, value);\r\n    }\r\n    return changed;\r\n}\r\nfunction checkAndUpdateTextDynamic(view, def, values) {\r\n    var bindings = def.bindings;\r\n    var changed = false;\r\n    for (var i = 0; i < values.length; i++) {\r\n        // Note: We need to loop over all values, so that\r\n        // the old values are updates as well!\r\n        if (checkAndUpdateBinding(view, def, i, values[i])) {\r\n            changed = true;\r\n        }\r\n    }\r\n    if (changed) {\r\n        var value = '';\r\n        for (var i = 0; i < values.length; i++) {\r\n            value = value + _addInterpolationPart(values[i], bindings[i]);\r\n        }\r\n        value = def.text.prefix + value;\r\n        var renderNode$$1 = asTextData(view, def.nodeIndex).renderText;\r\n        view.renderer.setValue(renderNode$$1, value);\r\n    }\r\n    return changed;\r\n}\r\nfunction _addInterpolationPart(value, binding) {\r\n    var valueStr = value != null ? value.toString() : '';\r\n    return valueStr + binding.suffix;\r\n}\r\n\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nfunction viewDef(flags, nodes, updateDirectives, updateRenderer) {\r\n    // clone nodes and set auto calculated values\r\n    var viewBindingCount = 0;\r\n    var viewDisposableCount = 0;\r\n    var viewNodeFlags = 0;\r\n    var viewRootNodeFlags = 0;\r\n    var viewMatchedQueries = 0;\r\n    var currentParent = null;\r\n    var currentRenderParent = null;\r\n    var currentElementHasPublicProviders = false;\r\n    var currentElementHasPrivateProviders = false;\r\n    var lastRenderRootNode = null;\r\n    for (var i = 0; i < nodes.length; i++) {\r\n        var node = nodes[i];\r\n        node.nodeIndex = i;\r\n        node.parent = currentParent;\r\n        node.bindingIndex = viewBindingCount;\r\n        node.outputIndex = viewDisposableCount;\r\n        node.renderParent = currentRenderParent;\r\n        viewNodeFlags |= node.flags;\r\n        viewMatchedQueries |= node.matchedQueryIds;\r\n        if (node.element) {\r\n            var elDef = node.element;\r\n            elDef.publicProviders =\r\n                currentParent ? currentParent.element.publicProviders : Object.create(null);\r\n            elDef.allProviders = elDef.publicProviders;\r\n            // Note: We assume that all providers of an element are before any child element!\r\n            currentElementHasPublicProviders = false;\r\n            currentElementHasPrivateProviders = false;\r\n            if (node.element.template) {\r\n                viewMatchedQueries |= node.element.template.nodeMatchedQueries;\r\n            }\r\n        }\r\n        validateNode(currentParent, node, nodes.length);\r\n        viewBindingCount += node.bindings.length;\r\n        viewDisposableCount += node.outputs.length;\r\n        if (!currentRenderParent && (node.flags & 3 /* CatRenderNode */)) {\r\n            lastRenderRootNode = node;\r\n        }\r\n        if (node.flags & 20224 /* CatProvider */) {\r\n            if (!currentElementHasPublicProviders) {\r\n                currentElementHasPublicProviders = true;\r\n                // Use prototypical inheritance to not get O(n^2) complexity...\r\n                // Use prototypical inheritance to not get O(n^2) complexity...\r\n                currentParent.element.publicProviders =\r\n                    Object.create(currentParent.element.publicProviders);\r\n                currentParent.element.allProviders = currentParent.element.publicProviders;\r\n            }\r\n            var isPrivateService = (node.flags & 8192 /* PrivateProvider */) !== 0;\r\n            var isComponent = (node.flags & 32768 /* Component */) !== 0;\r\n            if (!isPrivateService || isComponent) {\r\n                currentParent.element.publicProviders[tokenKey(node.provider.token)] = node;\r\n            }\r\n            else {\r\n                if (!currentElementHasPrivateProviders) {\r\n                    currentElementHasPrivateProviders = true;\r\n                    // Use prototypical inheritance to not get O(n^2) complexity...\r\n                    // Use prototypical inheritance to not get O(n^2) complexity...\r\n                    currentParent.element.allProviders =\r\n                        Object.create(currentParent.element.publicProviders);\r\n                }\r\n                currentParent.element.allProviders[tokenKey(node.provider.token)] = node;\r\n            }\r\n            if (isComponent) {\r\n                currentParent.element.componentProvider = node;\r\n            }\r\n        }\r\n        if (currentParent) {\r\n            currentParent.childFlags |= node.flags;\r\n            currentParent.directChildFlags |= node.flags;\r\n            currentParent.childMatchedQueries |= node.matchedQueryIds;\r\n            if (node.element && node.element.template) {\r\n                currentParent.childMatchedQueries |= node.element.template.nodeMatchedQueries;\r\n            }\r\n        }\r\n        else {\r\n            viewRootNodeFlags |= node.flags;\r\n        }\r\n        if (node.childCount > 0) {\r\n            currentParent = node;\r\n            if (!isNgContainer(node)) {\r\n                currentRenderParent = node;\r\n            }\r\n        }\r\n        else {\r\n            // When the current node has no children, check if it is the last children of its parent.\r\n            // When it is, propagate the flags up.\r\n            // The loop is required because an element could be the last transitive children of several\r\n            // elements. We loop to either the root or the highest opened element (= with remaining\r\n            // children)\r\n            while (currentParent && i === currentParent.nodeIndex + currentParent.childCount) {\r\n                var newParent = currentParent.parent;\r\n                if (newParent) {\r\n                    newParent.childFlags |= currentParent.childFlags;\r\n                    newParent.childMatchedQueries |= currentParent.childMatchedQueries;\r\n                }\r\n                currentParent = newParent;\r\n                // We also need to update the render parent & account for ng-container\r\n                if (currentParent && isNgContainer(currentParent)) {\r\n                    currentRenderParent = currentParent.renderParent;\r\n                }\r\n                else {\r\n                    currentRenderParent = currentParent;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    var handleEvent = function (view, nodeIndex, eventName, event) {\r\n        return nodes[nodeIndex].element.handleEvent(view, eventName, event);\r\n    };\r\n    return {\r\n        // Will be filled later...\r\n        factory: null,\r\n        nodeFlags: viewNodeFlags,\r\n        rootNodeFlags: viewRootNodeFlags,\r\n        nodeMatchedQueries: viewMatchedQueries, flags: flags,\r\n        nodes: nodes,\r\n        updateDirectives: updateDirectives || NOOP,\r\n        updateRenderer: updateRenderer || NOOP, handleEvent: handleEvent,\r\n        bindingCount: viewBindingCount,\r\n        outputCount: viewDisposableCount, lastRenderRootNode: lastRenderRootNode\r\n    };\r\n}\r\nfunction isNgContainer(node) {\r\n    return (node.flags & 1 /* TypeElement */) !== 0 && node.element.name === null;\r\n}\r\nfunction validateNode(parent, node, nodeCount) {\r\n    var template = node.element && node.element.template;\r\n    if (template) {\r\n        if (!template.lastRenderRootNode) {\r\n            throw new Error(\"Illegal State: Embedded templates without nodes are not allowed!\");\r\n        }\r\n        if (template.lastRenderRootNode &&\r\n            template.lastRenderRootNode.flags & 16777216 /* EmbeddedViews */) {\r\n            throw new Error(\"Illegal State: Last root node of a template can't have embedded views, at index \" + node.nodeIndex + \"!\");\r\n        }\r\n    }\r\n    if (node.flags & 20224 /* CatProvider */) {\r\n        var parentFlags = parent ? parent.flags : 0;\r\n        if ((parentFlags & 1 /* TypeElement */) === 0) {\r\n            throw new Error(\"Illegal State: StaticProvider/Directive nodes need to be children of elements or anchors, at index \" + node.nodeIndex + \"!\");\r\n        }\r\n    }\r\n    if (node.query) {\r\n        if (node.flags & 67108864 /* TypeContentQuery */ &&\r\n            (!parent || (parent.flags & 16384 /* TypeDirective */) === 0)) {\r\n            throw new Error(\"Illegal State: Content Query nodes need to be children of directives, at index \" + node.nodeIndex + \"!\");\r\n        }\r\n        if (node.flags & 134217728 /* TypeViewQuery */ && parent) {\r\n            throw new Error(\"Illegal State: View Query nodes have to be top level nodes, at index \" + node.nodeIndex + \"!\");\r\n        }\r\n    }\r\n    if (node.childCount) {\r\n        var parentEnd = parent ? parent.nodeIndex + parent.childCount : nodeCount - 1;\r\n        if (node.nodeIndex <= parentEnd && node.nodeIndex + node.childCount > parentEnd) {\r\n            throw new Error(\"Illegal State: childCount of node leads outside of parent, at index \" + node.nodeIndex + \"!\");\r\n        }\r\n    }\r\n}\r\nfunction createEmbeddedView(parent, anchorDef$$1, viewDef, context) {\r\n    // embedded views are seen as siblings to the anchor, so we need\r\n    // to get the parent of the anchor and use it as parentIndex.\r\n    var view = createView(parent.root, parent.renderer, parent, anchorDef$$1, viewDef);\r\n    initView(view, parent.component, context);\r\n    createViewNodes(view);\r\n    return view;\r\n}\r\nfunction createRootView(root, def, context) {\r\n    var view = createView(root, root.renderer, null, null, def);\r\n    initView(view, context, context);\r\n    createViewNodes(view);\r\n    return view;\r\n}\r\nfunction createComponentView(parentView, nodeDef, viewDef, hostElement) {\r\n    var rendererType = nodeDef.element.componentRendererType;\r\n    var compRenderer;\r\n    if (!rendererType) {\r\n        compRenderer = parentView.root.renderer;\r\n    }\r\n    else {\r\n        compRenderer = parentView.root.rendererFactory.createRenderer(hostElement, rendererType);\r\n    }\r\n    return createView(parentView.root, compRenderer, parentView, nodeDef.element.componentProvider, viewDef);\r\n}\r\nfunction createView(root, renderer, parent, parentNodeDef, def) {\r\n    var nodes = new Array(def.nodes.length);\r\n    var disposables = def.outputCount ? new Array(def.outputCount) : null;\r\n    var view = {\r\n        def: def,\r\n        parent: parent,\r\n        viewContainerParent: null, parentNodeDef: parentNodeDef,\r\n        context: null,\r\n        component: null, nodes: nodes,\r\n        state: 13 /* CatInit */, root: root, renderer: renderer,\r\n        oldValues: new Array(def.bindingCount), disposables: disposables,\r\n        initIndex: -1\r\n    };\r\n    return view;\r\n}\r\nfunction initView(view, component, context) {\r\n    view.component = component;\r\n    view.context = context;\r\n}\r\nfunction createViewNodes(view) {\r\n    var renderHost;\r\n    if (isComponentView(view)) {\r\n        var hostDef = view.parentNodeDef;\r\n        renderHost = asElementData((view.parent), hostDef.parent.nodeIndex).renderElement;\r\n    }\r\n    var def = view.def;\r\n    var nodes = view.nodes;\r\n    for (var i = 0; i < def.nodes.length; i++) {\r\n        var nodeDef = def.nodes[i];\r\n        Services.setCurrentNode(view, i);\r\n        var nodeData = void 0;\r\n        switch (nodeDef.flags & 201347067 /* Types */) {\r\n            case 1 /* TypeElement */:\r\n                var el = createElement(view, renderHost, nodeDef);\r\n                var componentView = (undefined);\r\n                if (nodeDef.flags & 33554432 /* ComponentView */) {\r\n                    var compViewDef = resolveDefinition((nodeDef.element.componentView));\r\n                    componentView = Services.createComponentView(view, nodeDef, compViewDef, el);\r\n                }\r\n                listenToElementOutputs(view, componentView, nodeDef, el);\r\n                nodeData = {\r\n                    renderElement: el,\r\n                    componentView: componentView,\r\n                    viewContainer: null,\r\n                    template: nodeDef.element.template ? createTemplateData(view, nodeDef) : undefined\r\n                };\r\n                if (nodeDef.flags & 16777216 /* EmbeddedViews */) {\r\n                    nodeData.viewContainer = createViewContainerData(view, nodeDef, nodeData);\r\n                }\r\n                break;\r\n            case 2 /* TypeText */:\r\n                nodeData = createText(view, renderHost, nodeDef);\r\n                break;\r\n            case 512 /* TypeClassProvider */:\r\n            case 1024 /* TypeFactoryProvider */:\r\n            case 2048 /* TypeUseExistingProvider */:\r\n            case 256 /* TypeValueProvider */: {\r\n                nodeData = nodes[i];\r\n                if (!nodeData && !(nodeDef.flags & 4096 /* LazyProvider */)) {\r\n                    var instance = createProviderInstance(view, nodeDef);\r\n                    nodeData = { instance: instance };\r\n                }\r\n                break;\r\n            }\r\n            case 16 /* TypePipe */: {\r\n                var instance = createPipeInstance(view, nodeDef);\r\n                nodeData = { instance: instance };\r\n                break;\r\n            }\r\n            case 16384 /* TypeDirective */: {\r\n                nodeData = nodes[i];\r\n                if (!nodeData) {\r\n                    var instance = createDirectiveInstance(view, nodeDef);\r\n                    nodeData = { instance: instance };\r\n                }\r\n                if (nodeDef.flags & 32768 /* Component */) {\r\n                    var compView = asElementData(view, nodeDef.parent.nodeIndex).componentView;\r\n                    initView(compView, nodeData.instance, nodeData.instance);\r\n                }\r\n                break;\r\n            }\r\n            case 32 /* TypePureArray */:\r\n            case 64 /* TypePureObject */:\r\n            case 128 /* TypePurePipe */:\r\n                nodeData = createPureExpression(view, nodeDef);\r\n                break;\r\n            case 67108864 /* TypeContentQuery */:\r\n            case 134217728 /* TypeViewQuery */:\r\n                nodeData = createQuery();\r\n                break;\r\n            case 8 /* TypeNgContent */:\r\n                appendNgContent(view, renderHost, nodeDef);\r\n                // no runtime data needed for NgContent...\r\n                nodeData = undefined;\r\n                break;\r\n        }\r\n        nodes[i] = nodeData;\r\n    }\r\n    // Create the ViewData.nodes of component views after we created everything else,\r\n    // so that e.g. ng-content works\r\n    execComponentViewsAction(view, ViewAction.CreateViewNodes);\r\n    // fill static content and view queries\r\n    execQueriesAction(view, 67108864 /* TypeContentQuery */ | 134217728 /* TypeViewQuery */, 268435456 /* StaticQuery */, 0 /* CheckAndUpdate */);\r\n}\r\nfunction checkNoChangesView(view) {\r\n    markProjectedViewsForCheck(view);\r\n    Services.updateDirectives(view, 1 /* CheckNoChanges */);\r\n    execEmbeddedViewsAction(view, ViewAction.CheckNoChanges);\r\n    Services.updateRenderer(view, 1 /* CheckNoChanges */);\r\n    execComponentViewsAction(view, ViewAction.CheckNoChanges);\r\n    // Note: We don't check queries for changes as we didn't do this in v2.x.\r\n    // TODO(tbosch): investigate if we can enable the check again in v5.x with a nicer error message.\r\n    view.state &= ~(64 /* CheckProjectedViews */ | 32 /* CheckProjectedView */);\r\n}\r\nfunction checkAndUpdateView(view) {\r\n    if (view.state & 1 /* BeforeFirstCheck */) {\r\n        view.state &= ~1 /* BeforeFirstCheck */;\r\n        view.state |= 2 /* FirstCheck */;\r\n    }\r\n    else {\r\n        view.state &= ~2 /* FirstCheck */;\r\n    }\r\n    shiftInitState(view, 0 /* InitState_BeforeInit */, 256 /* InitState_CallingOnInit */);\r\n    markProjectedViewsForCheck(view);\r\n    Services.updateDirectives(view, 0 /* CheckAndUpdate */);\r\n    execEmbeddedViewsAction(view, ViewAction.CheckAndUpdate);\r\n    execQueriesAction(view, 67108864 /* TypeContentQuery */, 536870912 /* DynamicQuery */, 0 /* CheckAndUpdate */);\r\n    var callInit = shiftInitState(view, 256 /* InitState_CallingOnInit */, 512 /* InitState_CallingAfterContentInit */);\r\n    callLifecycleHooksChildrenFirst(view, 2097152 /* AfterContentChecked */ | (callInit ? 1048576 /* AfterContentInit */ : 0));\r\n    Services.updateRenderer(view, 0 /* CheckAndUpdate */);\r\n    execComponentViewsAction(view, ViewAction.CheckAndUpdate);\r\n    execQueriesAction(view, 134217728 /* TypeViewQuery */, 536870912 /* DynamicQuery */, 0 /* CheckAndUpdate */);\r\n    callInit = shiftInitState(view, 512 /* InitState_CallingAfterContentInit */, 768 /* InitState_CallingAfterViewInit */);\r\n    callLifecycleHooksChildrenFirst(view, 8388608 /* AfterViewChecked */ | (callInit ? 4194304 /* AfterViewInit */ : 0));\r\n    if (view.def.flags & 2 /* OnPush */) {\r\n        view.state &= ~8 /* ChecksEnabled */;\r\n    }\r\n    view.state &= ~(64 /* CheckProjectedViews */ | 32 /* CheckProjectedView */);\r\n    shiftInitState(view, 768 /* InitState_CallingAfterViewInit */, 1024 /* InitState_AfterInit */);\r\n}\r\nfunction checkAndUpdateNode(view, nodeDef, argStyle, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {\r\n    if (argStyle === 0 /* Inline */) {\r\n        return checkAndUpdateNodeInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);\r\n    }\r\n    else {\r\n        return checkAndUpdateNodeDynamic(view, nodeDef, v0);\r\n    }\r\n}\r\nfunction markProjectedViewsForCheck(view) {\r\n    var def = view.def;\r\n    if (!(def.nodeFlags & 4 /* ProjectedTemplate */)) {\r\n        return;\r\n    }\r\n    for (var i = 0; i < def.nodes.length; i++) {\r\n        var nodeDef = def.nodes[i];\r\n        if (nodeDef.flags & 4 /* ProjectedTemplate */) {\r\n            var projectedViews = asElementData(view, i).template._projectedViews;\r\n            if (projectedViews) {\r\n                for (var i_1 = 0; i_1 < projectedViews.length; i_1++) {\r\n                    var projectedView = projectedViews[i_1];\r\n                    projectedView.state |= 32 /* CheckProjectedView */;\r\n                    markParentViewsForCheckProjectedViews(projectedView, view);\r\n                }\r\n            }\r\n        }\r\n        else if ((nodeDef.childFlags & 4 /* ProjectedTemplate */) === 0) {\r\n            // a parent with leafs\r\n            // no child is a component,\r\n            // then skip the children\r\n            i += nodeDef.childCount;\r\n        }\r\n    }\r\n}\r\nfunction checkAndUpdateNodeInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {\r\n    switch (nodeDef.flags & 201347067 /* Types */) {\r\n        case 1 /* TypeElement */:\r\n            return checkAndUpdateElementInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);\r\n        case 2 /* TypeText */:\r\n            return checkAndUpdateTextInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);\r\n        case 16384 /* TypeDirective */:\r\n            return checkAndUpdateDirectiveInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);\r\n        case 32 /* TypePureArray */:\r\n        case 64 /* TypePureObject */:\r\n        case 128 /* TypePurePipe */:\r\n            return checkAndUpdatePureExpressionInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);\r\n        default:\r\n            throw 'unreachable';\r\n    }\r\n}\r\nfunction checkAndUpdateNodeDynamic(view, nodeDef, values) {\r\n    switch (nodeDef.flags & 201347067 /* Types */) {\r\n        case 1 /* TypeElement */:\r\n            return checkAndUpdateElementDynamic(view, nodeDef, values);\r\n        case 2 /* TypeText */:\r\n            return checkAndUpdateTextDynamic(view, nodeDef, values);\r\n        case 16384 /* TypeDirective */:\r\n            return checkAndUpdateDirectiveDynamic(view, nodeDef, values);\r\n        case 32 /* TypePureArray */:\r\n        case 64 /* TypePureObject */:\r\n        case 128 /* TypePurePipe */:\r\n            return checkAndUpdatePureExpressionDynamic(view, nodeDef, values);\r\n        default:\r\n            throw 'unreachable';\r\n    }\r\n}\r\nfunction checkNoChangesNode(view, nodeDef, argStyle, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {\r\n    if (argStyle === 0 /* Inline */) {\r\n        checkNoChangesNodeInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);\r\n    }\r\n    else {\r\n        checkNoChangesNodeDynamic(view, nodeDef, v0);\r\n    }\r\n    // Returning false is ok here as we would have thrown in case of a change.\r\n    return false;\r\n}\r\nfunction checkNoChangesNodeInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {\r\n    var bindLen = nodeDef.bindings.length;\r\n    if (bindLen > 0)\r\n        checkBindingNoChanges(view, nodeDef, 0, v0);\r\n    if (bindLen > 1)\r\n        checkBindingNoChanges(view, nodeDef, 1, v1);\r\n    if (bindLen > 2)\r\n        checkBindingNoChanges(view, nodeDef, 2, v2);\r\n    if (bindLen > 3)\r\n        checkBindingNoChanges(view, nodeDef, 3, v3);\r\n    if (bindLen > 4)\r\n        checkBindingNoChanges(view, nodeDef, 4, v4);\r\n    if (bindLen > 5)\r\n        checkBindingNoChanges(view, nodeDef, 5, v5);\r\n    if (bindLen > 6)\r\n        checkBindingNoChanges(view, nodeDef, 6, v6);\r\n    if (bindLen > 7)\r\n        checkBindingNoChanges(view, nodeDef, 7, v7);\r\n    if (bindLen > 8)\r\n        checkBindingNoChanges(view, nodeDef, 8, v8);\r\n    if (bindLen > 9)\r\n        checkBindingNoChanges(view, nodeDef, 9, v9);\r\n}\r\nfunction checkNoChangesNodeDynamic(view, nodeDef, values) {\r\n    for (var i = 0; i < values.length; i++) {\r\n        checkBindingNoChanges(view, nodeDef, i, values[i]);\r\n    }\r\n}\r\n/**\r\n * Workaround https://github.com/angular/tsickle/issues/497\r\n * @suppress {misplacedTypeAnnotation}\r\n */\r\nfunction checkNoChangesQuery(view, nodeDef) {\r\n    var queryList = asQueryList(view, nodeDef.nodeIndex);\r\n    if (queryList.dirty) {\r\n        throw expressionChangedAfterItHasBeenCheckedError(Services.createDebugContext(view, nodeDef.nodeIndex), \"Query \" + nodeDef.query.id + \" not dirty\", \"Query \" + nodeDef.query.id + \" dirty\", (view.state & 1 /* BeforeFirstCheck */) !== 0);\r\n    }\r\n}\r\nfunction destroyView(view) {\r\n    if (view.state & 128 /* Destroyed */) {\r\n        return;\r\n    }\r\n    execEmbeddedViewsAction(view, ViewAction.Destroy);\r\n    execComponentViewsAction(view, ViewAction.Destroy);\r\n    callLifecycleHooksChildrenFirst(view, 131072 /* OnDestroy */);\r\n    if (view.disposables) {\r\n        for (var i = 0; i < view.disposables.length; i++) {\r\n            view.disposables[i]();\r\n        }\r\n    }\r\n    detachProjectedView(view);\r\n    if (view.renderer.destroyNode) {\r\n        destroyViewNodes(view);\r\n    }\r\n    if (isComponentView(view)) {\r\n        view.renderer.destroy();\r\n    }\r\n    view.state |= 128 /* Destroyed */;\r\n}\r\nfunction destroyViewNodes(view) {\r\n    var len = view.def.nodes.length;\r\n    for (var i = 0; i < len; i++) {\r\n        var def = view.def.nodes[i];\r\n        if (def.flags & 1 /* TypeElement */) {\r\n            view.renderer.destroyNode(asElementData(view, i).renderElement);\r\n        }\r\n        else if (def.flags & 2 /* TypeText */) {\r\n            view.renderer.destroyNode(asTextData(view, i).renderText);\r\n        }\r\n        else if (def.flags & 67108864 /* TypeContentQuery */ || def.flags & 134217728 /* TypeViewQuery */) {\r\n            asQueryList(view, i).destroy();\r\n        }\r\n    }\r\n}\r\nvar ViewAction;\r\n(function (ViewAction) {\r\n    ViewAction[ViewAction[\"CreateViewNodes\"] = 0] = \"CreateViewNodes\";\r\n    ViewAction[ViewAction[\"CheckNoChanges\"] = 1] = \"CheckNoChanges\";\r\n    ViewAction[ViewAction[\"CheckNoChangesProjectedViews\"] = 2] = \"CheckNoChangesProjectedViews\";\r\n    ViewAction[ViewAction[\"CheckAndUpdate\"] = 3] = \"CheckAndUpdate\";\r\n    ViewAction[ViewAction[\"CheckAndUpdateProjectedViews\"] = 4] = \"CheckAndUpdateProjectedViews\";\r\n    ViewAction[ViewAction[\"Destroy\"] = 5] = \"Destroy\";\r\n})(ViewAction || (ViewAction = {}));\r\nfunction execComponentViewsAction(view, action) {\r\n    var def = view.def;\r\n    if (!(def.nodeFlags & 33554432 /* ComponentView */)) {\r\n        return;\r\n    }\r\n    for (var i = 0; i < def.nodes.length; i++) {\r\n        var nodeDef = def.nodes[i];\r\n        if (nodeDef.flags & 33554432 /* ComponentView */) {\r\n            // a leaf\r\n            callViewAction(asElementData(view, i).componentView, action);\r\n        }\r\n        else if ((nodeDef.childFlags & 33554432 /* ComponentView */) === 0) {\r\n            // a parent with leafs\r\n            // no child is a component,\r\n            // then skip the children\r\n            i += nodeDef.childCount;\r\n        }\r\n    }\r\n}\r\nfunction execEmbeddedViewsAction(view, action) {\r\n    var def = view.def;\r\n    if (!(def.nodeFlags & 16777216 /* EmbeddedViews */)) {\r\n        return;\r\n    }\r\n    for (var i = 0; i < def.nodes.length; i++) {\r\n        var nodeDef = def.nodes[i];\r\n        if (nodeDef.flags & 16777216 /* EmbeddedViews */) {\r\n            // a leaf\r\n            var embeddedViews = asElementData(view, i).viewContainer._embeddedViews;\r\n            for (var k = 0; k < embeddedViews.length; k++) {\r\n                callViewAction(embeddedViews[k], action);\r\n            }\r\n        }\r\n        else if ((nodeDef.childFlags & 16777216 /* EmbeddedViews */) === 0) {\r\n            // a parent with leafs\r\n            // no child is a component,\r\n            // then skip the children\r\n            i += nodeDef.childCount;\r\n        }\r\n    }\r\n}\r\nfunction callViewAction(view, action) {\r\n    var viewState = view.state;\r\n    switch (action) {\r\n        case ViewAction.CheckNoChanges:\r\n            if ((viewState & 128 /* Destroyed */) === 0) {\r\n                if ((viewState & 12 /* CatDetectChanges */) === 12 /* CatDetectChanges */) {\r\n                    checkNoChangesView(view);\r\n                }\r\n                else if (viewState & 64 /* CheckProjectedViews */) {\r\n                    execProjectedViewsAction(view, ViewAction.CheckNoChangesProjectedViews);\r\n                }\r\n            }\r\n            break;\r\n        case ViewAction.CheckNoChangesProjectedViews:\r\n            if ((viewState & 128 /* Destroyed */) === 0) {\r\n                if (viewState & 32 /* CheckProjectedView */) {\r\n                    checkNoChangesView(view);\r\n                }\r\n                else if (viewState & 64 /* CheckProjectedViews */) {\r\n                    execProjectedViewsAction(view, action);\r\n                }\r\n            }\r\n            break;\r\n        case ViewAction.CheckAndUpdate:\r\n            if ((viewState & 128 /* Destroyed */) === 0) {\r\n                if ((viewState & 12 /* CatDetectChanges */) === 12 /* CatDetectChanges */) {\r\n                    checkAndUpdateView(view);\r\n                }\r\n                else if (viewState & 64 /* CheckProjectedViews */) {\r\n                    execProjectedViewsAction(view, ViewAction.CheckAndUpdateProjectedViews);\r\n                }\r\n            }\r\n            break;\r\n        case ViewAction.CheckAndUpdateProjectedViews:\r\n            if ((viewState & 128 /* Destroyed */) === 0) {\r\n                if (viewState & 32 /* CheckProjectedView */) {\r\n                    checkAndUpdateView(view);\r\n                }\r\n                else if (viewState & 64 /* CheckProjectedViews */) {\r\n                    execProjectedViewsAction(view, action);\r\n                }\r\n            }\r\n            break;\r\n        case ViewAction.Destroy:\r\n            // Note: destroyView recurses over all views,\r\n            // so we don't need to special case projected views here.\r\n            destroyView(view);\r\n            break;\r\n        case ViewAction.CreateViewNodes:\r\n            createViewNodes(view);\r\n            break;\r\n    }\r\n}\r\nfunction execProjectedViewsAction(view, action) {\r\n    execEmbeddedViewsAction(view, action);\r\n    execComponentViewsAction(view, action);\r\n}\r\nfunction execQueriesAction(view, queryFlags, staticDynamicQueryFlag, checkType) {\r\n    if (!(view.def.nodeFlags & queryFlags) || !(view.def.nodeFlags & staticDynamicQueryFlag)) {\r\n        return;\r\n    }\r\n    var nodeCount = view.def.nodes.length;\r\n    for (var i = 0; i < nodeCount; i++) {\r\n        var nodeDef = view.def.nodes[i];\r\n        if ((nodeDef.flags & queryFlags) && (nodeDef.flags & staticDynamicQueryFlag)) {\r\n            Services.setCurrentNode(view, nodeDef.nodeIndex);\r\n            switch (checkType) {\r\n                case 0 /* CheckAndUpdate */:\r\n                    checkAndUpdateQuery(view, nodeDef);\r\n                    break;\r\n                case 1 /* CheckNoChanges */:\r\n                    checkNoChangesQuery(view, nodeDef);\r\n                    break;\r\n            }\r\n        }\r\n        if (!(nodeDef.childFlags & queryFlags) || !(nodeDef.childFlags & staticDynamicQueryFlag)) {\r\n            // no child has a matching query\r\n            // then skip the children\r\n            i += nodeDef.childCount;\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nvar initialized = false;\r\nfunction initServicesIfNeeded() {\r\n    if (initialized) {\r\n        return;\r\n    }\r\n    initialized = true;\r\n    var services = isDevMode() ? createDebugServices() : createProdServices();\r\n    Services.setCurrentNode = services.setCurrentNode;\r\n    Services.createRootView = services.createRootView;\r\n    Services.createEmbeddedView = services.createEmbeddedView;\r\n    Services.createComponentView = services.createComponentView;\r\n    Services.createNgModuleRef = services.createNgModuleRef;\r\n    Services.overrideProvider = services.overrideProvider;\r\n    Services.overrideComponentView = services.overrideComponentView;\r\n    Services.clearOverrides = services.clearOverrides;\r\n    Services.checkAndUpdateView = services.checkAndUpdateView;\r\n    Services.checkNoChangesView = services.checkNoChangesView;\r\n    Services.destroyView = services.destroyView;\r\n    Services.resolveDep = resolveDep;\r\n    Services.createDebugContext = services.createDebugContext;\r\n    Services.handleEvent = services.handleEvent;\r\n    Services.updateDirectives = services.updateDirectives;\r\n    Services.updateRenderer = services.updateRenderer;\r\n    Services.dirtyParentQueries = dirtyParentQueries;\r\n}\r\nfunction createProdServices() {\r\n    return {\r\n        setCurrentNode: function () { },\r\n        createRootView: createProdRootView,\r\n        createEmbeddedView: createEmbeddedView,\r\n        createComponentView: createComponentView,\r\n        createNgModuleRef: createNgModuleRef,\r\n        overrideProvider: NOOP,\r\n        overrideComponentView: NOOP,\r\n        clearOverrides: NOOP,\r\n        checkAndUpdateView: checkAndUpdateView,\r\n        checkNoChangesView: checkNoChangesView,\r\n        destroyView: destroyView,\r\n        createDebugContext: function (view, nodeIndex) { return new DebugContext_(view, nodeIndex); },\r\n        handleEvent: function (view, nodeIndex, eventName, event) {\r\n            return view.def.handleEvent(view, nodeIndex, eventName, event);\r\n        },\r\n        updateDirectives: function (view, checkType) {\r\n            return view.def.updateDirectives(checkType === 0 /* CheckAndUpdate */ ? prodCheckAndUpdateNode :\r\n                prodCheckNoChangesNode, view);\r\n        },\r\n        updateRenderer: function (view, checkType) {\r\n            return view.def.updateRenderer(checkType === 0 /* CheckAndUpdate */ ? prodCheckAndUpdateNode :\r\n                prodCheckNoChangesNode, view);\r\n        },\r\n    };\r\n}\r\nfunction createDebugServices() {\r\n    return {\r\n        setCurrentNode: debugSetCurrentNode,\r\n        createRootView: debugCreateRootView,\r\n        createEmbeddedView: debugCreateEmbeddedView,\r\n        createComponentView: debugCreateComponentView,\r\n        createNgModuleRef: debugCreateNgModuleRef,\r\n        overrideProvider: debugOverrideProvider,\r\n        overrideComponentView: debugOverrideComponentView,\r\n        clearOverrides: debugClearOverrides,\r\n        checkAndUpdateView: debugCheckAndUpdateView,\r\n        checkNoChangesView: debugCheckNoChangesView,\r\n        destroyView: debugDestroyView,\r\n        createDebugContext: function (view, nodeIndex) { return new DebugContext_(view, nodeIndex); },\r\n        handleEvent: debugHandleEvent,\r\n        updateDirectives: debugUpdateDirectives,\r\n        updateRenderer: debugUpdateRenderer,\r\n    };\r\n}\r\nfunction createProdRootView(elInjector, projectableNodes, rootSelectorOrNode, def, ngModule, context) {\r\n    var rendererFactory = ngModule.injector.get(RendererFactory2);\r\n    return createRootView(createRootData(elInjector, ngModule, rendererFactory, projectableNodes, rootSelectorOrNode), def, context);\r\n}\r\nfunction debugCreateRootView(elInjector, projectableNodes, rootSelectorOrNode, def, ngModule, context) {\r\n    var rendererFactory = ngModule.injector.get(RendererFactory2);\r\n    var root = createRootData(elInjector, ngModule, new DebugRendererFactory2(rendererFactory), projectableNodes, rootSelectorOrNode);\r\n    var defWithOverride = applyProviderOverridesToView(def);\r\n    return callWithDebugContext(DebugAction.create, createRootView, null, [root, defWithOverride, context]);\r\n}\r\nfunction createRootData(elInjector, ngModule, rendererFactory, projectableNodes, rootSelectorOrNode) {\r\n    var sanitizer = ngModule.injector.get(Sanitizer);\r\n    var errorHandler = ngModule.injector.get(ErrorHandler);\r\n    var renderer = rendererFactory.createRenderer(null, null);\r\n    return {\r\n        ngModule: ngModule,\r\n        injector: elInjector, projectableNodes: projectableNodes,\r\n        selectorOrNode: rootSelectorOrNode, sanitizer: sanitizer, rendererFactory: rendererFactory, renderer: renderer, errorHandler: errorHandler\r\n    };\r\n}\r\nfunction debugCreateEmbeddedView(parentView, anchorDef, viewDef$$1, context) {\r\n    var defWithOverride = applyProviderOverridesToView(viewDef$$1);\r\n    return callWithDebugContext(DebugAction.create, createEmbeddedView, null, [parentView, anchorDef, defWithOverride, context]);\r\n}\r\nfunction debugCreateComponentView(parentView, nodeDef, viewDef$$1, hostElement) {\r\n    var overrideComponentView = viewDefOverrides.get(nodeDef.element.componentProvider.provider.token);\r\n    if (overrideComponentView) {\r\n        viewDef$$1 = overrideComponentView;\r\n    }\r\n    else {\r\n        viewDef$$1 = applyProviderOverridesToView(viewDef$$1);\r\n    }\r\n    return callWithDebugContext(DebugAction.create, createComponentView, null, [parentView, nodeDef, viewDef$$1, hostElement]);\r\n}\r\nfunction debugCreateNgModuleRef(moduleType, parentInjector, bootstrapComponents, def) {\r\n    var defWithOverride = applyProviderOverridesToNgModule(def);\r\n    return createNgModuleRef(moduleType, parentInjector, bootstrapComponents, defWithOverride);\r\n}\r\nvar providerOverrides = new Map();\r\nvar providerOverridesWithScope = new Map();\r\nvar viewDefOverrides = new Map();\r\nfunction debugOverrideProvider(override) {\r\n    providerOverrides.set(override.token, override);\r\n    if (typeof override.token === 'function' && override.token.ngInjectableDef &&\r\n        typeof override.token.ngInjectableDef.providedIn === 'function') {\r\n        providerOverridesWithScope.set(override.token, override);\r\n    }\r\n}\r\nfunction debugOverrideComponentView(comp, compFactory) {\r\n    var hostViewDef = resolveDefinition(getComponentViewDefinitionFactory(compFactory));\r\n    var compViewDef = resolveDefinition((hostViewDef.nodes[0].element.componentView));\r\n    viewDefOverrides.set(comp, compViewDef);\r\n}\r\nfunction debugClearOverrides() {\r\n    providerOverrides.clear();\r\n    providerOverridesWithScope.clear();\r\n    viewDefOverrides.clear();\r\n}\r\n// Notes about the algorithm:\r\n// 1) Locate the providers of an element and check if one of them was overwritten\r\n// 2) Change the providers of that element\r\n//\r\n// We only create new datastructures if we need to, to keep perf impact\r\n// reasonable.\r\nfunction applyProviderOverridesToView(def) {\r\n    if (providerOverrides.size === 0) {\r\n        return def;\r\n    }\r\n    var elementIndicesWithOverwrittenProviders = findElementIndicesWithOverwrittenProviders(def);\r\n    if (elementIndicesWithOverwrittenProviders.length === 0) {\r\n        return def;\r\n    }\r\n    // clone the whole view definition,\r\n    // as it maintains references between the nodes that are hard to update.\r\n    def = def.factory(function () { return NOOP; });\r\n    for (var i = 0; i < elementIndicesWithOverwrittenProviders.length; i++) {\r\n        applyProviderOverridesToElement(def, elementIndicesWithOverwrittenProviders[i]);\r\n    }\r\n    return def;\r\n    function findElementIndicesWithOverwrittenProviders(def) {\r\n        var elIndicesWithOverwrittenProviders = [];\r\n        var lastElementDef = null;\r\n        for (var i = 0; i < def.nodes.length; i++) {\r\n            var nodeDef = def.nodes[i];\r\n            if (nodeDef.flags & 1 /* TypeElement */) {\r\n                lastElementDef = nodeDef;\r\n            }\r\n            if (lastElementDef && nodeDef.flags & 3840 /* CatProviderNoDirective */ &&\r\n                providerOverrides.has(nodeDef.provider.token)) {\r\n                elIndicesWithOverwrittenProviders.push(lastElementDef.nodeIndex);\r\n                lastElementDef = null;\r\n            }\r\n        }\r\n        return elIndicesWithOverwrittenProviders;\r\n    }\r\n    function applyProviderOverridesToElement(viewDef$$1, elIndex) {\r\n        for (var i = elIndex + 1; i < viewDef$$1.nodes.length; i++) {\r\n            var nodeDef = viewDef$$1.nodes[i];\r\n            if (nodeDef.flags & 1 /* TypeElement */) {\r\n                // stop at the next element\r\n                return;\r\n            }\r\n            if (nodeDef.flags & 3840 /* CatProviderNoDirective */) {\r\n                var provider = (nodeDef.provider);\r\n                var override = providerOverrides.get(provider.token);\r\n                if (override) {\r\n                    nodeDef.flags = (nodeDef.flags & ~3840 /* CatProviderNoDirective */) | override.flags;\r\n                    provider.deps = splitDepsDsl(override.deps);\r\n                    provider.value = override.value;\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n// Notes about the algorithm:\r\n// We only create new datastructures if we need to, to keep perf impact\r\n// reasonable.\r\nfunction applyProviderOverridesToNgModule(def) {\r\n    var _a = calcHasOverrides(def), hasOverrides = _a.hasOverrides, hasDeprecatedOverrides = _a.hasDeprecatedOverrides;\r\n    if (!hasOverrides) {\r\n        return def;\r\n    }\r\n    // clone the whole view definition,\r\n    // as it maintains references between the nodes that are hard to update.\r\n    def = def.factory(function () { return NOOP; });\r\n    applyProviderOverrides(def);\r\n    return def;\r\n    function calcHasOverrides(def) {\r\n        var hasOverrides = false;\r\n        var hasDeprecatedOverrides = false;\r\n        if (providerOverrides.size === 0) {\r\n            return { hasOverrides: hasOverrides, hasDeprecatedOverrides: hasDeprecatedOverrides };\r\n        }\r\n        def.providers.forEach(function (node) {\r\n            var override = providerOverrides.get(node.token);\r\n            if ((node.flags & 3840 /* CatProviderNoDirective */) && override) {\r\n                hasOverrides = true;\r\n                hasDeprecatedOverrides = hasDeprecatedOverrides || override.deprecatedBehavior;\r\n            }\r\n        });\r\n        def.modules.forEach(function (module) {\r\n            providerOverridesWithScope.forEach(function (override, token) {\r\n                if (token.ngInjectableDef.providedIn === module) {\r\n                    hasOverrides = true;\r\n                    hasDeprecatedOverrides = hasDeprecatedOverrides || override.deprecatedBehavior;\r\n                }\r\n            });\r\n        });\r\n        return { hasOverrides: hasOverrides, hasDeprecatedOverrides: hasDeprecatedOverrides };\r\n    }\r\n    function applyProviderOverrides(def) {\r\n        for (var i = 0; i < def.providers.length; i++) {\r\n            var provider = def.providers[i];\r\n            if (hasDeprecatedOverrides) {\r\n                // We had a bug where me made\r\n                // all providers lazy. Keep this logic behind a flag\r\n                // for migrating existing users.\r\n                provider.flags |= 4096 /* LazyProvider */;\r\n            }\r\n            var override = providerOverrides.get(provider.token);\r\n            if (override) {\r\n                provider.flags = (provider.flags & ~3840 /* CatProviderNoDirective */) | override.flags;\r\n                provider.deps = splitDepsDsl(override.deps);\r\n                provider.value = override.value;\r\n            }\r\n        }\r\n        if (providerOverridesWithScope.size > 0) {\r\n            var moduleSet_1 = new Set(def.modules);\r\n            providerOverridesWithScope.forEach(function (override, token) {\r\n                if (moduleSet_1.has(token.ngInjectableDef.providedIn)) {\r\n                    var provider = {\r\n                        token: token,\r\n                        flags: override.flags | (hasDeprecatedOverrides ? 4096 /* LazyProvider */ : 0 /* None */),\r\n                        deps: splitDepsDsl(override.deps),\r\n                        value: override.value,\r\n                        index: def.providers.length,\r\n                    };\r\n                    def.providers.push(provider);\r\n                    def.providersByKey[tokenKey(token)] = provider;\r\n                }\r\n            });\r\n        }\r\n    }\r\n}\r\nfunction prodCheckAndUpdateNode(view, checkIndex, argStyle, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {\r\n    var nodeDef = view.def.nodes[checkIndex];\r\n    checkAndUpdateNode(view, nodeDef, argStyle, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);\r\n    return (nodeDef.flags & 224 /* CatPureExpression */) ?\r\n        asPureExpressionData(view, checkIndex).value :\r\n        undefined;\r\n}\r\nfunction prodCheckNoChangesNode(view, checkIndex, argStyle, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {\r\n    var nodeDef = view.def.nodes[checkIndex];\r\n    checkNoChangesNode(view, nodeDef, argStyle, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);\r\n    return (nodeDef.flags & 224 /* CatPureExpression */) ?\r\n        asPureExpressionData(view, checkIndex).value :\r\n        undefined;\r\n}\r\nfunction debugCheckAndUpdateView(view) {\r\n    return callWithDebugContext(DebugAction.detectChanges, checkAndUpdateView, null, [view]);\r\n}\r\nfunction debugCheckNoChangesView(view) {\r\n    return callWithDebugContext(DebugAction.checkNoChanges, checkNoChangesView, null, [view]);\r\n}\r\nfunction debugDestroyView(view) {\r\n    return callWithDebugContext(DebugAction.destroy, destroyView, null, [view]);\r\n}\r\nvar DebugAction;\r\n(function (DebugAction) {\r\n    DebugAction[DebugAction[\"create\"] = 0] = \"create\";\r\n    DebugAction[DebugAction[\"detectChanges\"] = 1] = \"detectChanges\";\r\n    DebugAction[DebugAction[\"checkNoChanges\"] = 2] = \"checkNoChanges\";\r\n    DebugAction[DebugAction[\"destroy\"] = 3] = \"destroy\";\r\n    DebugAction[DebugAction[\"handleEvent\"] = 4] = \"handleEvent\";\r\n})(DebugAction || (DebugAction = {}));\r\nvar _currentAction;\r\nvar _currentView;\r\nvar _currentNodeIndex;\r\nfunction debugSetCurrentNode(view, nodeIndex) {\r\n    _currentView = view;\r\n    _currentNodeIndex = nodeIndex;\r\n}\r\nfunction debugHandleEvent(view, nodeIndex, eventName, event) {\r\n    debugSetCurrentNode(view, nodeIndex);\r\n    return callWithDebugContext(DebugAction.handleEvent, view.def.handleEvent, null, [view, nodeIndex, eventName, event]);\r\n}\r\nfunction debugUpdateDirectives(view, checkType) {\r\n    if (view.state & 128 /* Destroyed */) {\r\n        throw viewDestroyedError(DebugAction[_currentAction]);\r\n    }\r\n    debugSetCurrentNode(view, nextDirectiveWithBinding(view, 0));\r\n    return view.def.updateDirectives(debugCheckDirectivesFn, view);\r\n    function debugCheckDirectivesFn(view, nodeIndex, argStyle) {\r\n        var values = [];\r\n        for (var _i = 3; _i < arguments.length; _i++) {\r\n            values[_i - 3] = arguments[_i];\r\n        }\r\n        var nodeDef = view.def.nodes[nodeIndex];\r\n        if (checkType === 0 /* CheckAndUpdate */) {\r\n            debugCheckAndUpdateNode(view, nodeDef, argStyle, values);\r\n        }\r\n        else {\r\n            debugCheckNoChangesNode(view, nodeDef, argStyle, values);\r\n        }\r\n        if (nodeDef.flags & 16384 /* TypeDirective */) {\r\n            debugSetCurrentNode(view, nextDirectiveWithBinding(view, nodeIndex));\r\n        }\r\n        return (nodeDef.flags & 224 /* CatPureExpression */) ?\r\n            asPureExpressionData(view, nodeDef.nodeIndex).value :\r\n            undefined;\r\n    }\r\n}\r\nfunction debugUpdateRenderer(view, checkType) {\r\n    if (view.state & 128 /* Destroyed */) {\r\n        throw viewDestroyedError(DebugAction[_currentAction]);\r\n    }\r\n    debugSetCurrentNode(view, nextRenderNodeWithBinding(view, 0));\r\n    return view.def.updateRenderer(debugCheckRenderNodeFn, view);\r\n    function debugCheckRenderNodeFn(view, nodeIndex, argStyle) {\r\n        var values = [];\r\n        for (var _i = 3; _i < arguments.length; _i++) {\r\n            values[_i - 3] = arguments[_i];\r\n        }\r\n        var nodeDef = view.def.nodes[nodeIndex];\r\n        if (checkType === 0 /* CheckAndUpdate */) {\r\n            debugCheckAndUpdateNode(view, nodeDef, argStyle, values);\r\n        }\r\n        else {\r\n            debugCheckNoChangesNode(view, nodeDef, argStyle, values);\r\n        }\r\n        if (nodeDef.flags & 3 /* CatRenderNode */) {\r\n            debugSetCurrentNode(view, nextRenderNodeWithBinding(view, nodeIndex));\r\n        }\r\n        return (nodeDef.flags & 224 /* CatPureExpression */) ?\r\n            asPureExpressionData(view, nodeDef.nodeIndex).value :\r\n            undefined;\r\n    }\r\n}\r\nfunction debugCheckAndUpdateNode(view, nodeDef, argStyle, givenValues) {\r\n    var changed = checkAndUpdateNode.apply(void 0, __spread([view, nodeDef, argStyle], givenValues));\r\n    if (changed) {\r\n        var values = argStyle === 1 /* Dynamic */ ? givenValues[0] : givenValues;\r\n        if (nodeDef.flags & 16384 /* TypeDirective */) {\r\n            var bindingValues = {};\r\n            for (var i = 0; i < nodeDef.bindings.length; i++) {\r\n                var binding = nodeDef.bindings[i];\r\n                var value = values[i];\r\n                if (binding.flags & 8 /* TypeProperty */) {\r\n                    bindingValues[normalizeDebugBindingName((binding.nonMinifiedName))] =\r\n                        normalizeDebugBindingValue(value);\r\n                }\r\n            }\r\n            var elDef = (nodeDef.parent);\r\n            var el = asElementData(view, elDef.nodeIndex).renderElement;\r\n            if (!elDef.element.name) {\r\n                // a comment.\r\n                view.renderer.setValue(el, \"bindings=\" + JSON.stringify(bindingValues, null, 2));\r\n            }\r\n            else {\r\n                // a regular element.\r\n                for (var attr in bindingValues) {\r\n                    var value = bindingValues[attr];\r\n                    if (value != null) {\r\n                        view.renderer.setAttribute(el, attr, value);\r\n                    }\r\n                    else {\r\n                        view.renderer.removeAttribute(el, attr);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\nfunction debugCheckNoChangesNode(view, nodeDef, argStyle, values) {\r\n    checkNoChangesNode.apply(void 0, __spread([view, nodeDef, argStyle], values));\r\n}\r\nfunction normalizeDebugBindingName(name) {\r\n    // Attribute names with `$` (eg `x-y$`) are valid per spec, but unsupported by some browsers\r\n    name = camelCaseToDashCase(name.replace(/[$@]/g, '_'));\r\n    return \"ng-reflect-\" + name;\r\n}\r\nvar CAMEL_CASE_REGEXP = /([A-Z])/g;\r\nfunction camelCaseToDashCase(input) {\r\n    return input.replace(CAMEL_CASE_REGEXP, function () {\r\n        var m = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            m[_i] = arguments[_i];\r\n        }\r\n        return '-' + m[1].toLowerCase();\r\n    });\r\n}\r\nfunction normalizeDebugBindingValue(value) {\r\n    try {\r\n        // Limit the size of the value as otherwise the DOM just gets polluted.\r\n        return value != null ? value.toString().slice(0, 30) : value;\r\n    }\r\n    catch (e) {\r\n        return '[ERROR] Exception while trying to serialize the value';\r\n    }\r\n}\r\nfunction nextDirectiveWithBinding(view, nodeIndex) {\r\n    for (var i = nodeIndex; i < view.def.nodes.length; i++) {\r\n        var nodeDef = view.def.nodes[i];\r\n        if (nodeDef.flags & 16384 /* TypeDirective */ && nodeDef.bindings && nodeDef.bindings.length) {\r\n            return i;\r\n        }\r\n    }\r\n    return null;\r\n}\r\nfunction nextRenderNodeWithBinding(view, nodeIndex) {\r\n    for (var i = nodeIndex; i < view.def.nodes.length; i++) {\r\n        var nodeDef = view.def.nodes[i];\r\n        if ((nodeDef.flags & 3 /* CatRenderNode */) && nodeDef.bindings && nodeDef.bindings.length) {\r\n            return i;\r\n        }\r\n    }\r\n    return null;\r\n}\r\nvar DebugContext_ = /** @class */ (function () {\r\n    function DebugContext_(view, nodeIndex) {\r\n        this.view = view;\r\n        this.nodeIndex = nodeIndex;\r\n        if (nodeIndex == null) {\r\n            this.nodeIndex = nodeIndex = 0;\r\n        }\r\n        this.nodeDef = view.def.nodes[nodeIndex];\r\n        var elDef = this.nodeDef;\r\n        var elView = view;\r\n        while (elDef && (elDef.flags & 1 /* TypeElement */) === 0) {\r\n            elDef = (elDef.parent);\r\n        }\r\n        if (!elDef) {\r\n            while (!elDef && elView) {\r\n                elDef = (viewParentEl(elView));\r\n                elView = (elView.parent);\r\n            }\r\n        }\r\n        this.elDef = elDef;\r\n        this.elView = elView;\r\n    }\r\n    Object.defineProperty(DebugContext_.prototype, \"elOrCompView\", {\r\n        get: function () {\r\n            // Has to be done lazily as we use the DebugContext also during creation of elements...\r\n            return asElementData(this.elView, this.elDef.nodeIndex).componentView || this.view;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DebugContext_.prototype, \"injector\", {\r\n        get: function () { return createInjector$1(this.elView, this.elDef); },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DebugContext_.prototype, \"component\", {\r\n        get: function () { return this.elOrCompView.component; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DebugContext_.prototype, \"context\", {\r\n        get: function () { return this.elOrCompView.context; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DebugContext_.prototype, \"providerTokens\", {\r\n        get: function () {\r\n            var tokens = [];\r\n            if (this.elDef) {\r\n                for (var i = this.elDef.nodeIndex + 1; i <= this.elDef.nodeIndex + this.elDef.childCount; i++) {\r\n                    var childDef = this.elView.def.nodes[i];\r\n                    if (childDef.flags & 20224 /* CatProvider */) {\r\n                        tokens.push(childDef.provider.token);\r\n                    }\r\n                    i += childDef.childCount;\r\n                }\r\n            }\r\n            return tokens;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DebugContext_.prototype, \"references\", {\r\n        get: function () {\r\n            var references = {};\r\n            if (this.elDef) {\r\n                collectReferences(this.elView, this.elDef, references);\r\n                for (var i = this.elDef.nodeIndex + 1; i <= this.elDef.nodeIndex + this.elDef.childCount; i++) {\r\n                    var childDef = this.elView.def.nodes[i];\r\n                    if (childDef.flags & 20224 /* CatProvider */) {\r\n                        collectReferences(this.elView, childDef, references);\r\n                    }\r\n                    i += childDef.childCount;\r\n                }\r\n            }\r\n            return references;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DebugContext_.prototype, \"componentRenderElement\", {\r\n        get: function () {\r\n            var elData = findHostElement(this.elOrCompView);\r\n            return elData ? elData.renderElement : undefined;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DebugContext_.prototype, \"renderNode\", {\r\n        get: function () {\r\n            return this.nodeDef.flags & 2 /* TypeText */ ? renderNode(this.view, this.nodeDef) :\r\n                renderNode(this.elView, this.elDef);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    DebugContext_.prototype.logError = function (console) {\r\n        var values = [];\r\n        for (var _i = 1; _i < arguments.length; _i++) {\r\n            values[_i - 1] = arguments[_i];\r\n        }\r\n        var logViewDef;\r\n        var logNodeIndex;\r\n        if (this.nodeDef.flags & 2 /* TypeText */) {\r\n            logViewDef = this.view.def;\r\n            logNodeIndex = this.nodeDef.nodeIndex;\r\n        }\r\n        else {\r\n            logViewDef = this.elView.def;\r\n            logNodeIndex = this.elDef.nodeIndex;\r\n        }\r\n        // Note: we only generate a log function for text and element nodes\r\n        // to make the generated code as small as possible.\r\n        var renderNodeIndex = getRenderNodeIndex(logViewDef, logNodeIndex);\r\n        var currRenderNodeIndex = -1;\r\n        var nodeLogger = function () {\r\n            currRenderNodeIndex++;\r\n            if (currRenderNodeIndex === renderNodeIndex) {\r\n                return (_a = console.error).bind.apply(_a, __spread([console], values));\r\n            }\r\n            else {\r\n                return NOOP;\r\n            }\r\n            var _a;\r\n        };\r\n        logViewDef.factory(nodeLogger);\r\n        if (currRenderNodeIndex < renderNodeIndex) {\r\n            console.error('Illegal state: the ViewDefinitionFactory did not call the logger!');\r\n            console.error.apply(console, __spread(values));\r\n        }\r\n    };\r\n    return DebugContext_;\r\n}());\r\nfunction getRenderNodeIndex(viewDef$$1, nodeIndex) {\r\n    var renderNodeIndex = -1;\r\n    for (var i = 0; i <= nodeIndex; i++) {\r\n        var nodeDef = viewDef$$1.nodes[i];\r\n        if (nodeDef.flags & 3 /* CatRenderNode */) {\r\n            renderNodeIndex++;\r\n        }\r\n    }\r\n    return renderNodeIndex;\r\n}\r\nfunction findHostElement(view) {\r\n    while (view && !isComponentView(view)) {\r\n        view = (view.parent);\r\n    }\r\n    if (view.parent) {\r\n        return asElementData(view.parent, viewParentEl(view).nodeIndex);\r\n    }\r\n    return null;\r\n}\r\nfunction collectReferences(view, nodeDef, references) {\r\n    for (var refName in nodeDef.references) {\r\n        references[refName] = getQueryValue(view, nodeDef, nodeDef.references[refName]);\r\n    }\r\n}\r\nfunction callWithDebugContext(action, fn, self, args) {\r\n    var oldAction = _currentAction;\r\n    var oldView = _currentView;\r\n    var oldNodeIndex = _currentNodeIndex;\r\n    try {\r\n        _currentAction = action;\r\n        var result = fn.apply(self, args);\r\n        _currentView = oldView;\r\n        _currentNodeIndex = oldNodeIndex;\r\n        _currentAction = oldAction;\r\n        return result;\r\n    }\r\n    catch (e) {\r\n        if (isViewDebugError(e) || !_currentView) {\r\n            throw e;\r\n        }\r\n        throw viewWrappedDebugError(e, (getCurrentDebugContext()));\r\n    }\r\n}\r\nfunction getCurrentDebugContext() {\r\n    return _currentView ? new DebugContext_(_currentView, _currentNodeIndex) : null;\r\n}\r\nvar DebugRendererFactory2 = /** @class */ (function () {\r\n    function DebugRendererFactory2(delegate) {\r\n        this.delegate = delegate;\r\n    }\r\n    DebugRendererFactory2.prototype.createRenderer = function (element, renderData) {\r\n        return new DebugRenderer2(this.delegate.createRenderer(element, renderData));\r\n    };\r\n    DebugRendererFactory2.prototype.begin = function () {\r\n        if (this.delegate.begin) {\r\n            this.delegate.begin();\r\n        }\r\n    };\r\n    DebugRendererFactory2.prototype.end = function () {\r\n        if (this.delegate.end) {\r\n            this.delegate.end();\r\n        }\r\n    };\r\n    DebugRendererFactory2.prototype.whenRenderingDone = function () {\r\n        if (this.delegate.whenRenderingDone) {\r\n            return this.delegate.whenRenderingDone();\r\n        }\r\n        return Promise.resolve(null);\r\n    };\r\n    return DebugRendererFactory2;\r\n}());\r\nvar DebugRenderer2 = /** @class */ (function () {\r\n    function DebugRenderer2(delegate) {\r\n        this.delegate = delegate;\r\n        this.data = this.delegate.data;\r\n    }\r\n    DebugRenderer2.prototype.destroyNode = function (node) {\r\n        removeDebugNodeFromIndex((getDebugNode(node)));\r\n        if (this.delegate.destroyNode) {\r\n            this.delegate.destroyNode(node);\r\n        }\r\n    };\r\n    DebugRenderer2.prototype.destroy = function () { this.delegate.destroy(); };\r\n    DebugRenderer2.prototype.createElement = function (name, namespace) {\r\n        var el = this.delegate.createElement(name, namespace);\r\n        var debugCtx = getCurrentDebugContext();\r\n        if (debugCtx) {\r\n            var debugEl = new DebugElement(el, null, debugCtx);\r\n            debugEl.name = name;\r\n            indexDebugNode(debugEl);\r\n        }\r\n        return el;\r\n    };\r\n    DebugRenderer2.prototype.createComment = function (value) {\r\n        var comment = this.delegate.createComment(value);\r\n        var debugCtx = getCurrentDebugContext();\r\n        if (debugCtx) {\r\n            indexDebugNode(new DebugNode(comment, null, debugCtx));\r\n        }\r\n        return comment;\r\n    };\r\n    DebugRenderer2.prototype.createText = function (value) {\r\n        var text = this.delegate.createText(value);\r\n        var debugCtx = getCurrentDebugContext();\r\n        if (debugCtx) {\r\n            indexDebugNode(new DebugNode(text, null, debugCtx));\r\n        }\r\n        return text;\r\n    };\r\n    DebugRenderer2.prototype.appendChild = function (parent, newChild) {\r\n        var debugEl = getDebugNode(parent);\r\n        var debugChildEl = getDebugNode(newChild);\r\n        if (debugEl && debugChildEl && debugEl instanceof DebugElement) {\r\n            debugEl.addChild(debugChildEl);\r\n        }\r\n        this.delegate.appendChild(parent, newChild);\r\n    };\r\n    DebugRenderer2.prototype.insertBefore = function (parent, newChild, refChild) {\r\n        var debugEl = getDebugNode(parent);\r\n        var debugChildEl = getDebugNode(newChild);\r\n        var debugRefEl = (getDebugNode(refChild));\r\n        if (debugEl && debugChildEl && debugEl instanceof DebugElement) {\r\n            debugEl.insertBefore(debugRefEl, debugChildEl);\r\n        }\r\n        this.delegate.insertBefore(parent, newChild, refChild);\r\n    };\r\n    DebugRenderer2.prototype.removeChild = function (parent, oldChild) {\r\n        var debugEl = getDebugNode(parent);\r\n        var debugChildEl = getDebugNode(oldChild);\r\n        if (debugEl && debugChildEl && debugEl instanceof DebugElement) {\r\n            debugEl.removeChild(debugChildEl);\r\n        }\r\n        this.delegate.removeChild(parent, oldChild);\r\n    };\r\n    DebugRenderer2.prototype.selectRootElement = function (selectorOrNode) {\r\n        var el = this.delegate.selectRootElement(selectorOrNode);\r\n        var debugCtx = getCurrentDebugContext();\r\n        if (debugCtx) {\r\n            indexDebugNode(new DebugElement(el, null, debugCtx));\r\n        }\r\n        return el;\r\n    };\r\n    DebugRenderer2.prototype.setAttribute = function (el, name, value, namespace) {\r\n        var debugEl = getDebugNode(el);\r\n        if (debugEl && debugEl instanceof DebugElement) {\r\n            var fullName = namespace ? namespace + ':' + name : name;\r\n            debugEl.attributes[fullName] = value;\r\n        }\r\n        this.delegate.setAttribute(el, name, value, namespace);\r\n    };\r\n    DebugRenderer2.prototype.removeAttribute = function (el, name, namespace) {\r\n        var debugEl = getDebugNode(el);\r\n        if (debugEl && debugEl instanceof DebugElement) {\r\n            var fullName = namespace ? namespace + ':' + name : name;\r\n            debugEl.attributes[fullName] = null;\r\n        }\r\n        this.delegate.removeAttribute(el, name, namespace);\r\n    };\r\n    DebugRenderer2.prototype.addClass = function (el, name) {\r\n        var debugEl = getDebugNode(el);\r\n        if (debugEl && debugEl instanceof DebugElement) {\r\n            debugEl.classes[name] = true;\r\n        }\r\n        this.delegate.addClass(el, name);\r\n    };\r\n    DebugRenderer2.prototype.removeClass = function (el, name) {\r\n        var debugEl = getDebugNode(el);\r\n        if (debugEl && debugEl instanceof DebugElement) {\r\n            debugEl.classes[name] = false;\r\n        }\r\n        this.delegate.removeClass(el, name);\r\n    };\r\n    DebugRenderer2.prototype.setStyle = function (el, style, value, flags) {\r\n        var debugEl = getDebugNode(el);\r\n        if (debugEl && debugEl instanceof DebugElement) {\r\n            debugEl.styles[style] = value;\r\n        }\r\n        this.delegate.setStyle(el, style, value, flags);\r\n    };\r\n    DebugRenderer2.prototype.removeStyle = function (el, style, flags) {\r\n        var debugEl = getDebugNode(el);\r\n        if (debugEl && debugEl instanceof DebugElement) {\r\n            debugEl.styles[style] = null;\r\n        }\r\n        this.delegate.removeStyle(el, style, flags);\r\n    };\r\n    DebugRenderer2.prototype.setProperty = function (el, name, value) {\r\n        var debugEl = getDebugNode(el);\r\n        if (debugEl && debugEl instanceof DebugElement) {\r\n            debugEl.properties[name] = value;\r\n        }\r\n        this.delegate.setProperty(el, name, value);\r\n    };\r\n    DebugRenderer2.prototype.listen = function (target, eventName, callback) {\r\n        if (typeof target !== 'string') {\r\n            var debugEl = getDebugNode(target);\r\n            if (debugEl) {\r\n                debugEl.listeners.push(new EventListener(eventName, callback));\r\n            }\r\n        }\r\n        return this.delegate.listen(target, eventName, callback);\r\n    };\r\n    DebugRenderer2.prototype.parentNode = function (node) { return this.delegate.parentNode(node); };\r\n    DebugRenderer2.prototype.nextSibling = function (node) { return this.delegate.nextSibling(node); };\r\n    DebugRenderer2.prototype.setValue = function (node, value) { return this.delegate.setValue(node, value); };\r\n    return DebugRenderer2;\r\n}());\r\n\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nfunction overrideProvider(override) {\r\n    initServicesIfNeeded();\r\n    return Services.overrideProvider(override);\r\n}\r\nfunction overrideComponentView(comp, componentFactory) {\r\n    initServicesIfNeeded();\r\n    return Services.overrideComponentView(comp, componentFactory);\r\n}\r\nfunction clearOverrides() {\r\n    initServicesIfNeeded();\r\n    return Services.clearOverrides();\r\n}\r\n// Attention: this function is called as top level function.\r\n// Putting any logic in here will destroy closure tree shaking!\r\nfunction createNgModuleFactory(ngModuleType, bootstrapComponents, defFactory) {\r\n    return new NgModuleFactory_(ngModuleType, bootstrapComponents, defFactory);\r\n}\r\nvar NgModuleFactory_ = /** @class */ (function (_super) {\r\n    __extends(NgModuleFactory_, _super);\r\n    function NgModuleFactory_(moduleType, _bootstrapComponents, _ngModuleDefFactory) {\r\n        var _this = \r\n        // Attention: this ctor is called as top level function.\r\n        // Putting any logic in here will destroy closure tree shaking!\r\n        _super.call(this) || this;\r\n        _this.moduleType = moduleType;\r\n        _this._bootstrapComponents = _bootstrapComponents;\r\n        _this._ngModuleDefFactory = _ngModuleDefFactory;\r\n        return _this;\r\n    }\r\n    NgModuleFactory_.prototype.create = function (parentInjector) {\r\n        initServicesIfNeeded();\r\n        var def = resolveDefinition(this._ngModuleDefFactory);\r\n        return Services.createNgModuleRef(this.moduleType, parentInjector || Injector.NULL, this._bootstrapComponents, def);\r\n    };\r\n    return NgModuleFactory_;\r\n}(NgModuleFactory));\r\n\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n// The functions in this file verify that the assumptions we are making\r\n// about state in an instruction are correct before implementing any logic.\r\n// They are meant only to be called in dev mode as sanity checks.\r\n\r\nfunction assertEqual(actual, expected, msg) {\r\n    if (actual != expected) {\r\n        throwError(msg);\r\n    }\r\n}\r\nfunction assertNotEqual(actual, expected, msg) {\r\n    if (actual == expected) {\r\n        throwError(msg);\r\n    }\r\n}\r\nfunction assertSame(actual, expected, msg) {\r\n    if (actual !== expected) {\r\n        throwError(msg);\r\n    }\r\n}\r\nfunction assertLessThan(actual, expected, msg) {\r\n    if (actual >= expected) {\r\n        throwError(msg);\r\n    }\r\n}\r\nfunction assertGreaterThan(actual, expected, msg) {\r\n    if (actual <= expected) {\r\n        throwError(msg);\r\n    }\r\n}\r\nfunction assertNull(actual, msg) {\r\n    if (actual != null) {\r\n        throwError(msg);\r\n    }\r\n}\r\nfunction assertNotNull(actual, msg) {\r\n    if (actual == null) {\r\n        throwError(msg);\r\n    }\r\n}\r\nfunction assertComponentType(actual, msg) {\r\n    if (msg === void 0) { msg = 'Type passed in is not ComponentType, it does not have \\'ngComponentDef\\' property.'; }\r\n    if (!actual.ngComponentDef) {\r\n        throwError(msg);\r\n    }\r\n}\r\nfunction throwError(msg) {\r\n    debugger; // Left intentionally for better debugger experience.\r\n    throw new Error(\"ASSERTION ERROR: \" + msg);\r\n}\r\n\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * If this is the first template pass, any ngOnInit or ngDoCheck hooks will be queued into\r\n * TView.initHooks during directiveCreate.\r\n *\r\n * The directive index and hook type are encoded into one number (1st bit: type, remaining bits:\r\n * directive index), then saved in the even indices of the initHooks array. The odd indices\r\n * hold the hook functions themselves.\r\n *\r\n * @param index The index of the directive in LView.data\r\n * @param hooks The static hooks map on the directive def\r\n * @param tView The current TView\r\n */\r\nfunction queueInitHooks(index, onInit, doCheck, tView) {\r\n    ngDevMode &&\r\n        assertEqual(tView.firstTemplatePass, true, 'Should only be called on first template pass');\r\n    if (onInit) {\r\n        (tView.initHooks || (tView.initHooks = [])).push(index, onInit);\r\n    }\r\n    if (doCheck) {\r\n        (tView.initHooks || (tView.initHooks = [])).push(index, doCheck);\r\n        (tView.checkHooks || (tView.checkHooks = [])).push(index, doCheck);\r\n    }\r\n}\r\n/**\r\n * Loops through the directives on a node and queues all their hooks except ngOnInit\r\n * and ngDoCheck, which are queued separately in directiveCreate.\r\n */\r\nfunction queueLifecycleHooks(flags, currentView) {\r\n    var tView = currentView.tView;\r\n    if (tView.firstTemplatePass === true) {\r\n        var start = flags >> 13;\r\n        var count = flags & 4095;\r\n        var end = start + count;\r\n        // It's necessary to loop through the directives at elementEnd() (rather than processing in\r\n        // directiveCreate) so we can preserve the current hook order. Content, view, and destroy\r\n        // hooks for projected components and directives must be called *before* their hosts.\r\n        for (var i = start; i < end; i++) {\r\n            var def = tView.directives[i];\r\n            queueContentHooks(def, tView, i);\r\n            queueViewHooks(def, tView, i);\r\n            queueDestroyHooks(def, tView, i);\r\n        }\r\n    }\r\n}\r\n/** Queues afterContentInit and afterContentChecked hooks on TView */\r\nfunction queueContentHooks(def, tView, i) {\r\n    if (def.afterContentInit) {\r\n        (tView.contentHooks || (tView.contentHooks = [])).push(i, def.afterContentInit);\r\n    }\r\n    if (def.afterContentChecked) {\r\n        (tView.contentHooks || (tView.contentHooks = [])).push(i, def.afterContentChecked);\r\n        (tView.contentCheckHooks || (tView.contentCheckHooks = [])).push(i, def.afterContentChecked);\r\n    }\r\n}\r\n/** Queues afterViewInit and afterViewChecked hooks on TView */\r\nfunction queueViewHooks(def, tView, i) {\r\n    if (def.afterViewInit) {\r\n        (tView.viewHooks || (tView.viewHooks = [])).push(i, def.afterViewInit);\r\n    }\r\n    if (def.afterViewChecked) {\r\n        (tView.viewHooks || (tView.viewHooks = [])).push(i, def.afterViewChecked);\r\n        (tView.viewCheckHooks || (tView.viewCheckHooks = [])).push(i, def.afterViewChecked);\r\n    }\r\n}\r\n/** Queues onDestroy hooks on TView */\r\nfunction queueDestroyHooks(def, tView, i) {\r\n    if (def.onDestroy != null) {\r\n        (tView.destroyHooks || (tView.destroyHooks = [])).push(i, def.onDestroy);\r\n    }\r\n}\r\n/**\r\n * Calls onInit and doCheck calls if they haven't already been called.\r\n *\r\n * @param currentView The current view\r\n */\r\nfunction executeInitHooks(currentView, tView, creationMode) {\r\n    if (currentView.lifecycleStage === 1 /* Init */) {\r\n        executeHooks((currentView.directives), tView.initHooks, tView.checkHooks, creationMode);\r\n        currentView.lifecycleStage = 2 /* AfterInit */;\r\n    }\r\n}\r\n/**\r\n * Iterates over afterViewInit and afterViewChecked functions and calls them.\r\n *\r\n * @param currentView The current view\r\n */\r\nfunction executeHooks(data, allHooks, checkHooks, creationMode) {\r\n    var hooksToCall = creationMode ? allHooks : checkHooks;\r\n    if (hooksToCall) {\r\n        callHooks(data, hooksToCall);\r\n    }\r\n}\r\n/**\r\n * Calls lifecycle hooks with their contexts, skipping init hooks if it's not\r\n * creation mode.\r\n *\r\n * @param currentView The current view\r\n * @param arr The array in which the hooks are found\r\n */\r\nfunction callHooks(data, arr) {\r\n    for (var i = 0; i < arr.length; i += 2) {\r\n        arr[i + 1].call(data[arr[i]]);\r\n    }\r\n}\r\n\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nvar ngDevModeResetPerfCounters = (typeof ngDevMode == 'undefined' && (function (global) {\r\n    function ngDevModeResetPerfCounters() {\r\n        global['ngDevMode'] = {\r\n            firstTemplatePass: 0,\r\n            tNode: 0,\r\n            tView: 0,\r\n            rendererCreateTextNode: 0,\r\n            rendererSetText: 0,\r\n            rendererCreateElement: 0,\r\n            rendererAddEventListener: 0,\r\n            rendererSetAttribute: 0,\r\n            rendererRemoveAttribute: 0,\r\n            rendererSetProperty: 0,\r\n            rendererSetClassName: 0,\r\n            rendererAddClass: 0,\r\n            rendererRemoveClass: 0,\r\n            rendererSetStyle: 0,\r\n            rendererRemoveStyle: 0,\r\n        };\r\n    }\r\n    ngDevModeResetPerfCounters();\r\n    return ngDevModeResetPerfCounters;\r\n})(typeof window != 'undefined' && window || typeof self != 'undefined' && self ||\r\n    typeof global != 'undefined' && global));\r\n\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nvar NG_PROJECT_AS_ATTR_NAME = 'ngProjectAs';\r\n// Note: This hack is necessary so we don't erroneously get a circular dependency\r\n// failure based on types.\r\n\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nfunction assertNodeType(node, type) {\r\n    assertNotNull(node, 'should be called with a node');\r\n    assertEqual(node.type, type, \"should be a \" + typeName(type));\r\n}\r\nfunction assertNodeOfPossibleTypes(node) {\r\n    var types = [];\r\n    for (var _i = 1; _i < arguments.length; _i++) {\r\n        types[_i - 1] = arguments[_i];\r\n    }\r\n    assertNotNull(node, 'should be called with a node');\r\n    var found = types.some(function (type) { return node.type === type; });\r\n    assertEqual(found, true, \"Should be one of \" + types.map(typeName).join(', '));\r\n}\r\nfunction typeName(type) {\r\n    if (type == 1 /* Projection */)\r\n        return 'Projection';\r\n    if (type == 0 /* Container */)\r\n        return 'Container';\r\n    if (type == 2 /* View */)\r\n        return 'View';\r\n    if (type == 3 /* Element */)\r\n        return 'Element';\r\n    return '<unknown>';\r\n}\r\n\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n// Note: This hack is necessary so we don't erroneously get a circular dependency\r\n// failure based on types.\r\n\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n// Note: This hack is necessary so we don't erroneously get a circular dependency\r\n// failure based on types.\r\n\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n// TODO: cleanup once the code is merged in angular/angular\r\n// TODO: cleanup once the code is merged in angular/angular\r\nvar RendererStyleFlags3;\r\n// TODO: cleanup once the code is merged in angular/angular\r\n(function (RendererStyleFlags3) {\r\n    RendererStyleFlags3[RendererStyleFlags3[\"Important\"] = 1] = \"Important\";\r\n    RendererStyleFlags3[RendererStyleFlags3[\"DashCase\"] = 2] = \"DashCase\";\r\n})(RendererStyleFlags3 || (RendererStyleFlags3 = {}));\r\n/** Returns whether the `renderer` is a `ProceduralRenderer3` */\r\nfunction isProceduralRenderer(renderer) {\r\n    return !!(renderer.listen);\r\n}\r\nvar domRendererFactory3 = {\r\n    createRenderer: function (hostElement, rendererType) { return document; }\r\n};\r\n// Note: This hack is necessary so we don't erroneously get a circular dependency\r\n// failure based on types.\r\n\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n// Note: This hack is necessary so we don't erroneously get a circular dependency\r\n// failure based on types.\r\n\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n* Must use this method for CD (instead of === ) since NaN !== NaN\r\n*/\r\nfunction isDifferent(a, b) {\r\n    // NaN is the only value that is not equal to itself so the first\r\n    // test checks if both a and b are not NaN\r\n    return !(a !== a && b !== b) && a !== b;\r\n}\r\nfunction stringify$1(value) {\r\n    if (typeof value == 'function')\r\n        return value.name || value;\r\n    if (typeof value == 'string')\r\n        return value;\r\n    if (value == null)\r\n        return '';\r\n    return '' + value;\r\n}\r\n/**\r\n *  Function that throws a \"not implemented\" error so it's clear certain\r\n *  behaviors/methods aren't yet ready.\r\n *\r\n * @returns Not implemented error\r\n */\r\nfunction notImplemented() {\r\n    return new Error('NotImplemented');\r\n}\r\n/**\r\n * Flattens an array in non-recursive way. Input arrays are not modified.\r\n */\r\nfunction flatten$1(list) {\r\n    var result = [];\r\n    var i = 0;\r\n    while (i < list.length) {\r\n        var item = list[i];\r\n        if (Array.isArray(item)) {\r\n            if (item.length > 0) {\r\n                list = item.concat(list.slice(i + 1));\r\n                i = 0;\r\n            }\r\n            else {\r\n                i++;\r\n            }\r\n        }\r\n        else {\r\n            result.push(item);\r\n            i++;\r\n        }\r\n    }\r\n    return result;\r\n}\r\n\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * Returns the first RNode following the given LNode in the same parent DOM element.\r\n *\r\n * This is needed in order to insert the given node with insertBefore.\r\n *\r\n * @param node The node whose following DOM node must be found.\r\n * @param stopNode A parent node at which the lookup in the tree should be stopped, or null if the\r\n * lookup should not be stopped until the result is found.\r\n * @returns RNode before which the provided node should be inserted or null if the lookup was\r\n * stopped\r\n * or if there is no native node after the given logical node in the same native parent.\r\n */\r\nfunction findNextRNodeSibling(node, stopNode) {\r\n    var currentNode = node;\r\n    while (currentNode && currentNode !== stopNode) {\r\n        var pNextOrParent = currentNode.pNextOrParent;\r\n        if (pNextOrParent) {\r\n            while (pNextOrParent.type !== 1 /* Projection */) {\r\n                var nativeNode = findFirstRNode(pNextOrParent);\r\n                if (nativeNode) {\r\n                    return nativeNode;\r\n                }\r\n                pNextOrParent = (pNextOrParent.pNextOrParent);\r\n            }\r\n            currentNode = pNextOrParent;\r\n        }\r\n        else {\r\n            var currentSibling = currentNode.next;\r\n            while (currentSibling) {\r\n                var nativeNode = findFirstRNode(currentSibling);\r\n                if (nativeNode) {\r\n                    return nativeNode;\r\n                }\r\n                currentSibling = currentSibling.next;\r\n            }\r\n            var parentNode = currentNode.parent;\r\n            currentNode = null;\r\n            if (parentNode) {\r\n                var parentType = parentNode.type;\r\n                if (parentType === 0 /* Container */ || parentType === 2 /* View */) {\r\n                    currentNode = parentNode;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return null;\r\n}\r\n/**\r\n * Get the next node in the LNode tree, taking into account the place where a node is\r\n * projected (in the shadow DOM) rather than where it comes from (in the light DOM).\r\n *\r\n * @param node The node whose next node in the LNode tree must be found.\r\n * @return LNode|null The next sibling in the LNode tree.\r\n */\r\nfunction getNextLNodeWithProjection(node) {\r\n    var pNextOrParent = node.pNextOrParent;\r\n    if (pNextOrParent) {\r\n        // The node is projected\r\n        var isLastProjectedNode = pNextOrParent.type === 1;\r\n        // returns pNextOrParent if we are not at the end of the list, null otherwise\r\n        return isLastProjectedNode ? null : pNextOrParent;\r\n    }\r\n    // returns node.next because the the node is not projected\r\n    return node.next;\r\n}\r\n/**\r\n * Find the next node in the LNode tree, taking into account the place where a node is\r\n * projected (in the shadow DOM) rather than where it comes from (in the light DOM).\r\n *\r\n * If there is no sibling node, this function goes to the next sibling of the parent node...\r\n * until it reaches rootNode (at which point null is returned).\r\n *\r\n * @param initialNode The node whose following node in the LNode tree must be found.\r\n * @param rootNode The root node at which the lookup should stop.\r\n * @return LNode|null The following node in the LNode tree.\r\n */\r\nfunction getNextOrParentSiblingNode(initialNode, rootNode) {\r\n    var node = initialNode;\r\n    var nextNode = getNextLNodeWithProjection(node);\r\n    while (node && !nextNode) {\r\n        // if node.pNextOrParent is not null here, it is not the next node\r\n        // (because, at this point, nextNode is null, so it is the parent)\r\n        node = node.pNextOrParent || node.parent;\r\n        if (node === rootNode) {\r\n            return null;\r\n        }\r\n        nextNode = node && getNextLNodeWithProjection(node);\r\n    }\r\n    return nextNode;\r\n}\r\n/**\r\n * Returns the first RNode inside the given LNode.\r\n *\r\n * @param node The node whose first DOM node must be found\r\n * @returns RNode The first RNode of the given LNode or null if there is none.\r\n */\r\nfunction findFirstRNode(rootNode) {\r\n    var node = rootNode;\r\n    while (node) {\r\n        var nextNode = null;\r\n        if (node.type === 3 /* Element */) {\r\n            // A LElementNode has a matching RNode in LElementNode.native\r\n            return node.native;\r\n        }\r\n        else if (node.type === 0 /* Container */) {\r\n            var lContainerNode = node;\r\n            var childContainerData = lContainerNode.dynamicLContainerNode ?\r\n                lContainerNode.dynamicLContainerNode.data :\r\n                lContainerNode.data;\r\n            nextNode = childContainerData.views.length ? childContainerData.views[0].child : null;\r\n        }\r\n        else if (node.type === 1 /* Projection */) {\r\n            // For Projection look at the first projected node\r\n            nextNode = node.data.head;\r\n        }\r\n        else {\r\n            // Otherwise look at the first child\r\n            nextNode = node.child;\r\n        }\r\n        node = nextNode === null ? getNextOrParentSiblingNode(node, rootNode) : nextNode;\r\n    }\r\n    return null;\r\n}\r\nfunction createTextNode(value, renderer) {\r\n    return isProceduralRenderer(renderer) ? renderer.createText(stringify$1(value)) :\r\n        renderer.createTextNode(stringify$1(value));\r\n}\r\nfunction addRemoveViewFromContainer(container, rootNode, insertMode, beforeNode) {\r\n    ngDevMode && assertNodeType(container, 0 /* Container */);\r\n    ngDevMode && assertNodeType(rootNode, 2 /* View */);\r\n    var parentNode = container.data.renderParent;\r\n    var parent = parentNode ? parentNode.native : null;\r\n    var node = rootNode.child;\r\n    if (parent) {\r\n        while (node) {\r\n            var nextNode = null;\r\n            var renderer = container.view.renderer;\r\n            if (node.type === 3 /* Element */) {\r\n                if (insertMode) {\r\n                    isProceduralRenderer(renderer) ?\r\n                        renderer.insertBefore(parent, (node.native), beforeNode) :\r\n                        parent.insertBefore((node.native), beforeNode, true);\r\n                }\r\n                else {\r\n                    isProceduralRenderer(renderer) ? renderer.removeChild(parent, (node.native)) :\r\n                        parent.removeChild((node.native));\r\n                }\r\n                nextNode = node.next;\r\n            }\r\n            else if (node.type === 0 /* Container */) {\r\n                // if we get to a container, it must be a root node of a view because we are only\r\n                // propagating down into child views / containers and not child elements\r\n                var childContainerData = node.data;\r\n                childContainerData.renderParent = parentNode;\r\n                nextNode = childContainerData.views.length ? childContainerData.views[0].child : null;\r\n            }\r\n            else if (node.type === 1 /* Projection */) {\r\n                nextNode = node.data.head;\r\n            }\r\n            else {\r\n                nextNode = node.child;\r\n            }\r\n            if (nextNode === null) {\r\n                node = getNextOrParentSiblingNode(node, rootNode);\r\n            }\r\n            else {\r\n                node = nextNode;\r\n            }\r\n        }\r\n    }\r\n}\r\n/**\r\n * Traverses down and up the tree of views and containers to remove listeners and\r\n * call onDestroy callbacks.\r\n *\r\n * Notes:\r\n *  - Because it's used for onDestroy calls, it needs to be bottom-up.\r\n *  - Must process containers instead of their views to avoid splicing\r\n *  when views are destroyed and re-added.\r\n *  - Using a while loop because it's faster than recursion\r\n *  - Destroy only called on movement to sibling or movement to parent (laterally or up)\r\n *\r\n *  @param rootView The view to destroy\r\n */\r\nfunction destroyViewTree(rootView) {\r\n    // A view to cleanup doesn't have children so we should not try to descend down the view tree.\r\n    if (!rootView.child) {\r\n        return cleanUpView(rootView);\r\n    }\r\n    var viewOrContainer = rootView.child;\r\n    while (viewOrContainer) {\r\n        var next = null;\r\n        if (viewOrContainer.views && viewOrContainer.views.length) {\r\n            next = viewOrContainer.views[0].data;\r\n        }\r\n        else if (viewOrContainer.child) {\r\n            next = viewOrContainer.child;\r\n        }\r\n        else if (viewOrContainer.next) {\r\n            // Only move to the side and clean if operating below rootView -\r\n            // otherwise we would start cleaning up sibling views of the rootView.\r\n            cleanUpView(viewOrContainer);\r\n            next = viewOrContainer.next;\r\n        }\r\n        if (next == null) {\r\n            // If the viewOrContainer is the rootView and next is null it means that we are dealing\r\n            // with a root view that doesn't have children. We didn't descend into child views\r\n            // so no need to go back up the views tree.\r\n            while (viewOrContainer && !viewOrContainer.next && viewOrContainer !== rootView) {\r\n                cleanUpView(viewOrContainer);\r\n                viewOrContainer = getParentState(viewOrContainer, rootView);\r\n            }\r\n            cleanUpView(viewOrContainer || rootView);\r\n            next = viewOrContainer && viewOrContainer.next;\r\n        }\r\n        viewOrContainer = next;\r\n    }\r\n}\r\n/**\r\n * Inserts a view into a container.\r\n *\r\n * This adds the view to the container's array of active views in the correct\r\n * position. It also adds the view's elements to the DOM if the container isn't a\r\n * root node of another view (in that case, the view's elements will be added when\r\n * the container's parent view is added later).\r\n *\r\n * @param container The container into which the view should be inserted\r\n * @param newView The view to insert\r\n * @param index The index at which to insert the view\r\n * @returns The inserted view\r\n */\r\nfunction insertView(container, newView, index) {\r\n    var state = container.data;\r\n    var views = state.views;\r\n    if (index > 0) {\r\n        // This is a new view, we need to add it to the children.\r\n        setViewNext(views[index - 1], newView);\r\n    }\r\n    if (index < views.length) {\r\n        setViewNext(newView, views[index]);\r\n        views.splice(index, 0, newView);\r\n    }\r\n    else {\r\n        views.push(newView);\r\n    }\r\n    // If the container's renderParent is null, we know that it is a root node of its own parent view\r\n    // and we should wait until that parent processes its nodes (otherwise, we will insert this view's\r\n    // nodes twice - once now and once when its parent inserts its views).\r\n    if (container.data.renderParent !== null) {\r\n        var beforeNode = findNextRNodeSibling(newView, container);\r\n        if (!beforeNode) {\r\n            var containerNextNativeNode = container.native;\r\n            if (containerNextNativeNode === undefined) {\r\n                containerNextNativeNode = container.native = findNextRNodeSibling(container, null);\r\n            }\r\n            beforeNode = containerNextNativeNode;\r\n        }\r\n        addRemoveViewFromContainer(container, newView, true, beforeNode);\r\n    }\r\n    return newView;\r\n}\r\n/**\r\n * Removes a view from a container.\r\n *\r\n * This method splices the view from the container's array of active views. It also\r\n * removes the view's elements from the DOM and conducts cleanup (e.g. removing\r\n * listeners, calling onDestroys).\r\n *\r\n * @param container The container from which to remove a view\r\n * @param removeIndex The index of the view to remove\r\n * @returns The removed view\r\n */\r\nfunction removeView(container, removeIndex) {\r\n    var views = container.data.views;\r\n    var viewNode = views[removeIndex];\r\n    if (removeIndex > 0) {\r\n        setViewNext(views[removeIndex - 1], viewNode.next);\r\n    }\r\n    views.splice(removeIndex, 1);\r\n    viewNode.next = null;\r\n    destroyViewTree(viewNode.data);\r\n    addRemoveViewFromContainer(container, viewNode, false);\r\n    // Notify query that view has been removed\r\n    container.data.queries && container.data.queries.removeView(removeIndex);\r\n    return viewNode;\r\n}\r\n/**\r\n * Sets a next on the view node, so views in for loops can easily jump from\r\n * one view to the next to add/remove elements. Also adds the LView (view.data)\r\n * to the view tree for easy traversal when cleaning up the view.\r\n *\r\n * @param view The view to set up\r\n * @param next The view's new next\r\n */\r\nfunction setViewNext(view, next) {\r\n    view.next = next;\r\n    view.data.next = next ? next.data : null;\r\n}\r\n/**\r\n * Determines which LViewOrLContainer to jump to when traversing back up the\r\n * tree in destroyViewTree.\r\n *\r\n * Normally, the view's parent LView should be checked, but in the case of\r\n * embedded views, the container (which is the view node's parent, but not the\r\n * LView's parent) needs to be checked for a possible next property.\r\n *\r\n * @param state The LViewOrLContainer for which we need a parent state\r\n * @param rootView The rootView, so we don't propagate too far up the view tree\r\n * @returns The correct parent LViewOrLContainer\r\n */\r\nfunction getParentState(state, rootView) {\r\n    var node;\r\n    if ((node = state.node) && node.type === 2 /* View */) {\r\n        // if it's an embedded view, the state needs to go up to the container, in case the\r\n        // container has a next\r\n        return node.parent.data;\r\n    }\r\n    else {\r\n        // otherwise, use parent view for containers or component views\r\n        return state.parent === rootView ? null : state.parent;\r\n    }\r\n}\r\n/**\r\n * Removes all listeners and call all onDestroys in a given view.\r\n *\r\n * @param view The LView to clean up\r\n */\r\nfunction cleanUpView(view) {\r\n    removeListeners(view);\r\n    executeOnDestroys(view);\r\n    executePipeOnDestroys(view);\r\n}\r\n/** Removes listeners and unsubscribes from output subscriptions */\r\nfunction removeListeners(view) {\r\n    var cleanup = (view.cleanup);\r\n    if (cleanup != null) {\r\n        for (var i = 0; i < cleanup.length - 1; i += 2) {\r\n            if (typeof cleanup[i] === 'string') {\r\n                cleanup[i + 1].removeEventListener(cleanup[i], cleanup[i + 2], cleanup[i + 3]);\r\n                i += 2;\r\n            }\r\n            else {\r\n                cleanup[i].call(cleanup[i + 1]);\r\n            }\r\n        }\r\n        view.cleanup = null;\r\n    }\r\n}\r\n/** Calls onDestroy hooks for this view */\r\nfunction executeOnDestroys(view) {\r\n    var tView = view.tView;\r\n    var destroyHooks;\r\n    if (tView != null && (destroyHooks = tView.destroyHooks) != null) {\r\n        callHooks((view.directives), destroyHooks);\r\n    }\r\n}\r\n/** Calls pipe destroy hooks for this view */\r\nfunction executePipeOnDestroys(view) {\r\n    var pipeDestroyHooks = view.tView && view.tView.pipeDestroyHooks;\r\n    if (pipeDestroyHooks) {\r\n        callHooks((view.data), pipeDestroyHooks);\r\n    }\r\n}\r\n/**\r\n * Returns whether a native element should be inserted in the given parent.\r\n *\r\n * The native node can be inserted when its parent is:\r\n * - A regular element => Yes\r\n * - A component host element =>\r\n *    - if the `currentView` === the parent `view`: The element is in the content (vs the\r\n *      template)\r\n *      => don't add as the parent component will project if needed.\r\n *    - `currentView` !== the parent `view` => The element is in the template (vs the content),\r\n *      add it\r\n * - View element => delay insertion, will be done on `viewEnd()`\r\n *\r\n * @param parent The parent in which to insert the child\r\n * @param currentView The LView being processed\r\n * @return boolean Whether the child element should be inserted.\r\n */\r\nfunction canInsertNativeNode(parent, currentView) {\r\n    var parentIsElement = parent.type === 3;\r\n    return parentIsElement &&\r\n        (parent.view !== currentView || parent.data === null /* Regular Element. */);\r\n}\r\n/**\r\n * Appends the `child` element to the `parent`.\r\n *\r\n * The element insertion might be delayed {@link canInsertNativeNode}\r\n *\r\n * @param parent The parent to which to append the child\r\n * @param child The child that should be appended\r\n * @param currentView The current LView\r\n * @returns Whether or not the child was appended\r\n */\r\nfunction appendChild(parent, child, currentView) {\r\n    if (child !== null && canInsertNativeNode(parent, currentView)) {\r\n        // We only add element if not in View or not projected.\r\n        var renderer = currentView.renderer;\r\n        isProceduralRenderer(renderer) ? renderer.appendChild(parent.native, child) :\r\n            parent.native.appendChild(child);\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\n/**\r\n * Inserts the provided node before the correct element in the DOM.\r\n *\r\n * The element insertion might be delayed {@link canInsertNativeNode}\r\n *\r\n * @param node Node to insert\r\n * @param currentView Current LView\r\n */\r\n\r\n/**\r\n * Appends a projected node to the DOM, or in the case of a projected container,\r\n * appends the nodes from all of the container's active views to the DOM.\r\n *\r\n * @param node The node to process\r\n * @param currentParent The last parent element to be processed\r\n * @param currentView Current LView\r\n */\r\nfunction appendProjectedNode(node, currentParent, currentView) {\r\n    if (node.type !== 0 /* Container */) {\r\n        appendChild(currentParent, node.native, currentView);\r\n    }\r\n    else {\r\n        // The node we are adding is a Container and we are adding it to Element which\r\n        // is not a component (no more re-projection).\r\n        // Alternatively a container is projected at the root of a component's template\r\n        // and can't be re-projected (as not content of any component).\r\n        // Assignee the final projection location in those cases.\r\n        var lContainer = node.data;\r\n        lContainer.renderParent = currentParent;\r\n        var views = lContainer.views;\r\n        for (var i = 0; i < views.length; i++) {\r\n            addRemoveViewFromContainer(node, views[i], true, null);\r\n        }\r\n    }\r\n    if (node.dynamicLContainerNode) {\r\n        node.dynamicLContainerNode.data.renderParent = currentParent;\r\n    }\r\n}\r\n\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nfunction isCssClassMatching(nodeClassAttrVal, cssClassToMatch) {\r\n    var nodeClassesLen = nodeClassAttrVal.length;\r\n    var matchIndex = nodeClassAttrVal.indexOf(cssClassToMatch);\r\n    var matchEndIdx = matchIndex + cssClassToMatch.length;\r\n    if (matchIndex === -1 // no match\r\n        || (matchIndex > 0 && nodeClassAttrVal[matchIndex - 1] !== ' ') // no space before\r\n        ||\r\n            (matchEndIdx < nodeClassesLen && nodeClassAttrVal[matchEndIdx] !== ' ')) {\r\n        return false;\r\n    }\r\n    return true;\r\n}\r\n/**\r\n * A utility function to match an Ivy node static data against a simple CSS selector\r\n *\r\n * @param node static data to match\r\n * @param selector\r\n * @returns true if node matches the selector.\r\n */\r\nfunction isNodeMatchingSelector(tNode, selector) {\r\n    ngDevMode && assertNotNull(selector[0], 'Selector should have a tag name');\r\n    var mode = 4;\r\n    var nodeAttrs = (tNode.attrs);\r\n    // When processing \":not\" selectors, we skip to the next \":not\" if the\r\n    // current one doesn't match\r\n    var skipToNextSelector = false;\r\n    for (var i = 0; i < selector.length; i++) {\r\n        var current = selector[i];\r\n        if (typeof current === 'number') {\r\n            // If we finish processing a :not selector and it hasn't failed, return false\r\n            if (!skipToNextSelector && !isPositive(mode) && !isPositive(current)) {\r\n                return false;\r\n            }\r\n            // If we are skipping to the next :not() and this mode flag is positive,\r\n            // it's a part of the current :not() selector, and we should keep skipping\r\n            if (skipToNextSelector && isPositive(current))\r\n                continue;\r\n            skipToNextSelector = false;\r\n            mode = current | (mode & 1 /* NOT */);\r\n            continue;\r\n        }\r\n        if (skipToNextSelector)\r\n            continue;\r\n        if (mode & 4 /* ELEMENT */) {\r\n            mode = 2 /* ATTRIBUTE */ | mode & 1 /* NOT */;\r\n            if (current !== '' && current !== tNode.tagName) {\r\n                if (isPositive(mode))\r\n                    return false;\r\n                skipToNextSelector = true;\r\n            }\r\n        }\r\n        else {\r\n            var attrName = mode & 8 /* CLASS */ ? 'class' : current;\r\n            var attrIndexInNode = findAttrIndexInNode(attrName, nodeAttrs);\r\n            if (attrIndexInNode === -1) {\r\n                if (isPositive(mode))\r\n                    return false;\r\n                skipToNextSelector = true;\r\n                continue;\r\n            }\r\n            var selectorAttrValue = mode & 8 /* CLASS */ ? current : selector[++i];\r\n            if (selectorAttrValue !== '') {\r\n                var nodeAttrValue = nodeAttrs[attrIndexInNode + 1];\r\n                if (mode & 8 /* CLASS */ &&\r\n                    !isCssClassMatching(nodeAttrValue, selectorAttrValue) ||\r\n                    mode & 2 /* ATTRIBUTE */ && selectorAttrValue !== nodeAttrValue) {\r\n                    if (isPositive(mode))\r\n                        return false;\r\n                    skipToNextSelector = true;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return isPositive(mode) || skipToNextSelector;\r\n}\r\nfunction isPositive(mode) {\r\n    return (mode & 1 /* NOT */) === 0;\r\n}\r\nfunction findAttrIndexInNode(name, attrs) {\r\n    if (attrs === null)\r\n        return -1;\r\n    for (var i = 0; i < attrs.length; i += 2) {\r\n        if (attrs[i] === name)\r\n            return i;\r\n    }\r\n    return -1;\r\n}\r\nfunction isNodeMatchingSelectorList(tNode, selector) {\r\n    for (var i = 0; i < selector.length; i++) {\r\n        if (isNodeMatchingSelector(tNode, selector[i])) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\r\nfunction getProjectAsAttrValue(tNode) {\r\n    var nodeAttrs = tNode.attrs;\r\n    if (nodeAttrs != null) {\r\n        var ngProjectAsAttrIdx = nodeAttrs.indexOf(NG_PROJECT_AS_ATTR_NAME);\r\n        // only check for ngProjectAs in attribute names, don't accidentally match attribute's value\r\n        // (attribute names are stored at even indexes)\r\n        if ((ngProjectAsAttrIdx & 1) === 0) {\r\n            return nodeAttrs[ngProjectAsAttrIdx + 1];\r\n        }\r\n    }\r\n    return null;\r\n}\r\n/**\r\n * Checks a given node against matching selectors and returns\r\n * selector index (or 0 if none matched).\r\n *\r\n * This function takes into account the ngProjectAs attribute: if present its value will be compared\r\n * to the raw (un-parsed) CSS selector instead of using standard selector matching logic.\r\n */\r\nfunction matchingSelectorIndex(tNode, selectors, textSelectors) {\r\n    var ngProjectAsAttrVal = getProjectAsAttrValue(tNode);\r\n    for (var i = 0; i < selectors.length; i++) {\r\n        // if a node has the ngProjectAs attribute match it against unparsed selector\r\n        // match a node against a parsed selector only if ngProjectAs attribute is not present\r\n        if (ngProjectAsAttrVal === textSelectors[i] ||\r\n            ngProjectAsAttrVal === null && isNodeMatchingSelectorList(tNode, selectors[i])) {\r\n            return i + 1; // first matching selector \"captures\" a given node\r\n        }\r\n    }\r\n    return 0;\r\n}\r\n\r\n/** Called when directives inject each other (creating a circular dependency) */\r\nfunction throwCyclicDependencyError(token) {\r\n    throw new Error(\"Cannot instantiate cyclic dependency! \" + token);\r\n}\r\n/** Called when there are multiple component selectors that match a given node */\r\nfunction throwMultipleComponentError(tNode) {\r\n    throw new Error(\"Multiple components match node with tagname \" + tNode.tagName);\r\n}\r\n/** Throws an ExpressionChangedAfterChecked error if checkNoChanges mode is on. */\r\nfunction throwErrorIfNoChangesMode(creationMode, checkNoChangesMode, oldValue, currValue) {\r\n    if (checkNoChangesMode) {\r\n        var msg = \"ExpressionChangedAfterItHasBeenCheckedError: Expression has changed after it was checked. Previous value: '\" + oldValue + \"'. Current value: '\" + currValue + \"'.\";\r\n        if (creationMode) {\r\n            msg +=\r\n                \" It seems like the view has been created after its parent and its children have been dirty checked.\" +\r\n                    \" Has it been created in a change detection hook ?\";\r\n        }\r\n        // TODO: include debug context\r\n        throw new Error(msg);\r\n    }\r\n}\r\n\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * Directive (D) sets a property on all component instances using this constant as a key and the\r\n * component's host node (LElement) as the value. This is used in methods like detectChanges to\r\n * facilitate jumping from an instance to the host node.\r\n */\r\nvar NG_HOST_SYMBOL = '__ngHostLNode__';\r\n/**\r\n * A permanent marker promise which signifies that the current CD tree is\r\n * clean.\r\n */\r\nvar _CLEAN_PROMISE = Promise.resolve(null);\r\n/**\r\n * Directive and element indices for top-level directive.\r\n *\r\n * Saved here to avoid re-instantiating an array on every change detection run.\r\n */\r\nvar _ROOT_DIRECTIVE_INDICES = [0, 0];\r\n/**\r\n * Token set in currentMatches while dependencies are being resolved.\r\n *\r\n * If we visit a directive that has a value set to CIRCULAR, we know we've\r\n * already seen it, and thus have a circular dependency.\r\n */\r\nvar CIRCULAR$2 = '__CIRCULAR__';\r\n/**\r\n * This property gets set before entering a template.\r\n *\r\n * This renderer can be one of two varieties of Renderer3:\r\n *\r\n * - ObjectedOrientedRenderer3\r\n *\r\n * This is the native browser API style, e.g. operations are methods on individual objects\r\n * like HTMLElement. With this style, no additional code is needed as a facade (reducing payload\r\n * size).\r\n *\r\n * - ProceduralRenderer3\r\n *\r\n * In non-native browser environments (e.g. platforms such as web-workers), this is the facade\r\n * that enables element manipulation. This also facilitates backwards compatibility with\r\n * Renderer2.\r\n */\r\nvar renderer;\r\nvar rendererFactory;\r\nfunction getRenderer() {\r\n    // top level variables should not be exported for performance reason (PERF_NOTES.md)\r\n    return renderer;\r\n}\r\n/** Used to set the parent property when nodes are created. */\r\nvar previousOrParentNode;\r\nfunction getPreviousOrParentNode() {\r\n    // top level variables should not be exported for performance reason (PERF_NOTES.md)\r\n    return previousOrParentNode;\r\n}\r\n/**\r\n * If `isParent` is:\r\n *  - `true`: then `previousOrParentNode` points to a parent node.\r\n *  - `false`: then `previousOrParentNode` points to previous node (sibling).\r\n */\r\nvar isParent;\r\n/**\r\n * Static data that corresponds to the instance-specific data array on an LView.\r\n *\r\n * Each node's static data is stored in tData at the same index that it's stored\r\n * in the data array. Any nodes that do not have static data store a null value in\r\n * tData to avoid a sparse array.\r\n */\r\nvar tData;\r\n/**\r\n * State of the current view being processed.\r\n *\r\n * NOTE: we cheat here and initialize it to `null` even thought the type does not\r\n * contain `null`. This is because we expect this value to be not `null` as soon\r\n * as we enter the view. Declaring the type as `null` would require us to place `!`\r\n * in most instructions since they all assume that `currentView` is defined.\r\n */\r\nvar currentView = (null);\r\nvar currentQueries;\r\nfunction getCurrentQueries(QueryType) {\r\n    // top level variables should not be exported for performance reason (PERF_NOTES.md)\r\n    return currentQueries || (currentQueries = new QueryType());\r\n}\r\n/**\r\n * This property gets set before entering a template.\r\n */\r\nvar creationMode;\r\nfunction getCreationMode() {\r\n    // top level variables should not be exported for performance reason (PERF_NOTES.md)\r\n    return creationMode;\r\n}\r\n/**\r\n * An array of nodes (text, element, container, etc), pipes, their bindings, and\r\n * any local variables that need to be stored between invocations.\r\n */\r\nvar data;\r\n/**\r\n * An array of directive instances in the current view.\r\n *\r\n * These must be stored separately from LNodes because their presence is\r\n * unknown at compile-time and thus space cannot be reserved in data[].\r\n */\r\nvar directives;\r\n/**\r\n * When a view is destroyed, listeners need to be released and outputs need to be\r\n * unsubscribed. This cleanup array stores both listener data (in chunks of 4)\r\n * and output data (in chunks of 2) for a particular view. Combining the arrays\r\n * saves on memory (70 bytes per array) and on a few bytes of code size (for two\r\n * separate for loops).\r\n *\r\n * If it's a listener being stored:\r\n * 1st index is: event name to remove\r\n * 2nd index is: native element\r\n * 3rd index is: listener function\r\n * 4th index is: useCapture boolean\r\n *\r\n * If it's an output subscription:\r\n * 1st index is: unsubscribe function\r\n * 2nd index is: context for function\r\n */\r\nvar cleanup;\r\n/**\r\n * In this mode, any changes in bindings will throw an ExpressionChangedAfterChecked error.\r\n *\r\n * Necessary to support ChangeDetectorRef.checkNoChanges().\r\n */\r\nvar checkNoChangesMode = false;\r\n/** Whether or not this is the first time the current view has been processed. */\r\nvar firstTemplatePass = true;\r\n/**\r\n * Swap the current state with a new state.\r\n *\r\n * For performance reasons we store the state in the top level of the module.\r\n * This way we minimize the number of properties to read. Whenever a new view\r\n * is entered we have to store the state for later, and when the view is\r\n * exited the state has to be restored\r\n *\r\n * @param newView New state to become active\r\n * @param host Element to which the View is a child of\r\n * @returns the previous state;\r\n */\r\nfunction enterView(newView, host) {\r\n    var oldView = currentView;\r\n    data = newView && newView.data;\r\n    directives = newView && newView.directives;\r\n    tData = newView && newView.tView.data;\r\n    creationMode = newView && (newView.flags & 1 /* CreationMode */) === 1 /* CreationMode */;\r\n    firstTemplatePass = newView && newView.tView.firstTemplatePass;\r\n    cleanup = newView && newView.cleanup;\r\n    renderer = newView && newView.renderer;\r\n    if (newView && newView.bindingIndex < 0) {\r\n        newView.bindingIndex = newView.bindingStartIndex;\r\n    }\r\n    if (host != null) {\r\n        previousOrParentNode = host;\r\n        isParent = true;\r\n    }\r\n    currentView = newView;\r\n    currentQueries = newView && newView.queries;\r\n    return oldView;\r\n}\r\n/**\r\n * Used in lieu of enterView to make it clear when we are exiting a child view. This makes\r\n * the direction of traversal (up or down the view tree) a bit clearer.\r\n *\r\n * @param newView New state to become active\r\n * @param creationOnly An optional boolean to indicate that the view was processed in creation mode\r\n * only, i.e. the first update will be done later. Only possible for dynamically created views.\r\n */\r\nfunction leaveView(newView, creationOnly) {\r\n    if (!creationOnly) {\r\n        if (!checkNoChangesMode) {\r\n            executeHooks((directives), currentView.tView.viewHooks, currentView.tView.viewCheckHooks, creationMode);\r\n        }\r\n        // Views are clean and in update mode after being checked, so these bits are cleared\r\n        currentView.flags &= ~(1 /* CreationMode */ | 4 /* Dirty */);\r\n    }\r\n    currentView.lifecycleStage = 1 /* Init */;\r\n    currentView.bindingIndex = -1;\r\n    enterView(newView, null);\r\n}\r\n/**\r\n * Refreshes the view, executing the following steps in that order:\r\n * triggers init hooks, refreshes dynamic children, triggers content hooks, sets host bindings,\r\n * refreshes child components.\r\n * Note: view hooks are triggered later when leaving the view.\r\n * */\r\nfunction refreshView() {\r\n    var tView = currentView.tView;\r\n    if (!checkNoChangesMode) {\r\n        executeInitHooks(currentView, tView, creationMode);\r\n    }\r\n    refreshDynamicChildren();\r\n    if (!checkNoChangesMode) {\r\n        executeHooks((directives), tView.contentHooks, tView.contentCheckHooks, creationMode);\r\n    }\r\n    // This needs to be set before children are processed to support recursive components\r\n    tView.firstTemplatePass = firstTemplatePass = false;\r\n    setHostBindings(tView.hostBindings);\r\n    refreshChildComponents(tView.components);\r\n}\r\n/** Sets the host bindings for the current view. */\r\nfunction setHostBindings(bindings) {\r\n    if (bindings != null) {\r\n        var defs = (currentView.tView.directives);\r\n        for (var i = 0; i < bindings.length; i += 2) {\r\n            var dirIndex = bindings[i];\r\n            var def = defs[dirIndex];\r\n            def.hostBindings && def.hostBindings(dirIndex, bindings[i + 1]);\r\n        }\r\n    }\r\n}\r\n/** Refreshes child components in the current view. */\r\nfunction refreshChildComponents(components) {\r\n    if (components != null) {\r\n        for (var i = 0; i < components.length; i += 2) {\r\n            componentRefresh(components[i], components[i + 1]);\r\n        }\r\n    }\r\n}\r\nfunction executeInitAndContentHooks() {\r\n    if (!checkNoChangesMode) {\r\n        var tView = currentView.tView;\r\n        executeInitHooks(currentView, tView, creationMode);\r\n        executeHooks((directives), tView.contentHooks, tView.contentCheckHooks, creationMode);\r\n    }\r\n}\r\nfunction createLView(viewId, renderer, tView, template, context, flags) {\r\n    var newView = {\r\n        parent: currentView,\r\n        id: viewId,\r\n        // -1 for component views\r\n        flags: flags | 1 /* CreationMode */ | 8 /* Attached */,\r\n        node: (null),\r\n        // until we initialize it in createNode.\r\n        data: [],\r\n        directives: null,\r\n        tView: tView,\r\n        cleanup: null,\r\n        renderer: renderer,\r\n        child: null,\r\n        tail: null,\r\n        next: null,\r\n        bindingStartIndex: -1,\r\n        bindingIndex: -1,\r\n        template: template,\r\n        context: context,\r\n        dynamicViewCount: 0,\r\n        lifecycleStage: 1 /* Init */,\r\n        queries: null,\r\n        injector: currentView && currentView.injector,\r\n    };\r\n    return newView;\r\n}\r\n/**\r\n * Creation of LNode object is extracted to a separate function so we always create LNode object\r\n * with the same shape\r\n * (same properties assigned in the same order).\r\n */\r\nfunction createLNodeObject(type, currentView, parent, native, state, queries) {\r\n    return {\r\n        type: type,\r\n        native: native,\r\n        view: currentView,\r\n        parent: parent,\r\n        child: null,\r\n        next: null,\r\n        nodeInjector: parent ? parent.nodeInjector : null,\r\n        data: state,\r\n        queries: queries,\r\n        tNode: null,\r\n        pNextOrParent: null,\r\n        dynamicLContainerNode: null\r\n    };\r\n}\r\nfunction createLNode(index, type, native, state) {\r\n    var parent = isParent ? previousOrParentNode :\r\n        previousOrParentNode && previousOrParentNode.parent;\r\n    var queries = (isParent ? currentQueries : previousOrParentNode && previousOrParentNode.queries) ||\r\n        parent && parent.queries && parent.queries.child();\r\n    var isState = state != null;\r\n    var node = createLNodeObject(type, currentView, parent, native, isState ? state : null, queries);\r\n    if ((type & 2 /* ViewOrElement */) === 2 /* ViewOrElement */ && isState) {\r\n        // Bit of a hack to bust through the readonly because there is a circular dep between\r\n        // LView and LNode.\r\n        ngDevMode && assertNull(state.node, 'LView.node should not have been initialized');\r\n        state.node = node;\r\n    }\r\n    if (index != null) {\r\n        // We are Element or Container\r\n        ngDevMode && assertDataNext(index);\r\n        data[index] = node;\r\n        // Every node adds a value to the static data array to avoid a sparse array\r\n        if (index >= tData.length) {\r\n            tData[index] = null;\r\n        }\r\n        else {\r\n            node.tNode = tData[index];\r\n        }\r\n        // Now link ourselves into the tree.\r\n        if (isParent) {\r\n            currentQueries = null;\r\n            if (previousOrParentNode.view === currentView ||\r\n                previousOrParentNode.type === 2 /* View */) {\r\n                // We are in the same view, which means we are adding content node to the parent View.\r\n                ngDevMode && assertNull(previousOrParentNode.child, \"previousOrParentNode's child should not have been set.\");\r\n                previousOrParentNode.child = node;\r\n            }\r\n            else {\r\n                // We are adding component view, so we don't link parent node child to this node.\r\n            }\r\n        }\r\n        else if (previousOrParentNode) {\r\n            ngDevMode && assertNull(previousOrParentNode.next, \"previousOrParentNode's next property should not have been set \" + index + \".\");\r\n            previousOrParentNode.next = node;\r\n            if (previousOrParentNode.dynamicLContainerNode) {\r\n                previousOrParentNode.dynamicLContainerNode.next = node;\r\n            }\r\n        }\r\n    }\r\n    previousOrParentNode = node;\r\n    isParent = true;\r\n    return node;\r\n}\r\n/**\r\n * Resets the application state.\r\n */\r\nfunction resetApplicationState() {\r\n    isParent = false;\r\n    previousOrParentNode = (null);\r\n}\r\n/**\r\n *\r\n * @param hostNode Existing node to render into.\r\n * @param template Template function with the instructions.\r\n * @param context to pass into the template.\r\n * @param providedRendererFactory renderer factory to use\r\n * @param host The host element node to use\r\n * @param directives Directive defs that should be used for matching\r\n * @param pipes Pipe defs that should be used for matching\r\n */\r\n\r\n/**\r\n * Used for rendering embedded views (e.g. dynamically created views)\r\n *\r\n * Dynamically created views must store/retrieve their TViews differently from component views\r\n * because their template functions are nested in the template functions of their hosts, creating\r\n * closures. If their host template happens to be an embedded template in a loop (e.g. ngFor inside\r\n * an ngFor), the nesting would mean we'd have multiple instances of the template function, so we\r\n * can't store TViews in the template function itself (as we do for comps). Instead, we store the\r\n * TView for dynamically created views on their host TNode, which only has one instance.\r\n */\r\nfunction renderEmbeddedTemplate(viewNode, tView, template, context, renderer, directives, pipes) {\r\n    var _isParent = isParent;\r\n    var _previousOrParentNode = previousOrParentNode;\r\n    var oldView;\r\n    var rf = 2;\r\n    try {\r\n        isParent = true;\r\n        previousOrParentNode = (null);\r\n        if (viewNode == null) {\r\n            var lView = createLView(-1, renderer, tView, template, context, 2 /* CheckAlways */);\r\n            viewNode = createLNode(null, 2 /* View */, null, lView);\r\n            rf = 1 /* Create */;\r\n        }\r\n        oldView = enterView(viewNode.data, viewNode);\r\n        template(rf, context);\r\n        if (rf & 2 /* Update */) {\r\n            refreshView();\r\n        }\r\n        else {\r\n            viewNode.data.tView.firstTemplatePass = firstTemplatePass = false;\r\n        }\r\n    }\r\n    finally {\r\n        // renderEmbeddedTemplate() is called twice in fact, once for creation only and then once for\r\n        // update. When for creation only, leaveView() must not trigger view hooks, nor clean flags.\r\n        var isCreationOnly = (rf & 1 /* Create */) === 1;\r\n        leaveView((oldView), isCreationOnly);\r\n        isParent = _isParent;\r\n        previousOrParentNode = _previousOrParentNode;\r\n    }\r\n    return viewNode;\r\n}\r\nfunction renderComponentOrTemplate(node, hostView, componentOrContext, template) {\r\n    var oldView = enterView(hostView, node);\r\n    try {\r\n        if (rendererFactory.begin) {\r\n            rendererFactory.begin();\r\n        }\r\n        if (template) {\r\n            template(getRenderFlags(hostView), (componentOrContext));\r\n            refreshView();\r\n        }\r\n        else {\r\n            executeInitAndContentHooks();\r\n            // Element was stored at 0 in data and directive was stored at 0 in directives\r\n            // in renderComponent()\r\n            setHostBindings(_ROOT_DIRECTIVE_INDICES);\r\n            componentRefresh(0, 0);\r\n        }\r\n    }\r\n    finally {\r\n        if (rendererFactory.end) {\r\n            rendererFactory.end();\r\n        }\r\n        leaveView(oldView);\r\n    }\r\n}\r\n/**\r\n * This function returns the default configuration of rendering flags depending on when the\r\n * template is in creation mode or update mode. By default, the update block is run with the\r\n * creation block when the view is in creation mode. Otherwise, the update block is run\r\n * alone.\r\n *\r\n * Dynamically created views do NOT use this configuration (update block and create block are\r\n * always run separately).\r\n */\r\nfunction getRenderFlags(view) {\r\n    return view.flags & 1 /* CreationMode */ ? 1 /* Create */ | 2 /* Update */ :\r\n        2 /* Update */;\r\n}\r\n/**\r\n * Create DOM element. The instruction must later be followed by `elementEnd()` call.\r\n *\r\n * @param index Index of the element in the data array\r\n * @param name Name of the DOM Node\r\n * @param attrs Statically bound set of attributes to be written into the DOM element on creation.\r\n * @param localRefs A set of local reference bindings on the element.\r\n *\r\n * Attributes and localRefs are passed as an array of strings where elements with an even index\r\n * hold an attribute name and elements with an odd index hold an attribute value, ex.:\r\n * ['id', 'warning5', 'class', 'alert']\r\n */\r\nfunction elementStart(index, name, attrs, localRefs) {\r\n    ngDevMode &&\r\n        assertEqual(currentView.bindingStartIndex, -1, 'elements should be created before any bindings');\r\n    ngDevMode && ngDevMode.rendererCreateElement++;\r\n    var native = renderer.createElement(name);\r\n    var node = createLNode(index, 3 /* Element */, (native), null);\r\n    if (attrs)\r\n        setUpAttributes(native, attrs);\r\n    appendChild((node.parent), native, currentView);\r\n    createDirectivesAndLocals(index, name, attrs, localRefs, false);\r\n    return native;\r\n}\r\n/**\r\n * Creates directive instances and populates local refs.\r\n *\r\n * @param index Index of the current node (to create TNode)\r\n * @param name Tag name of the current node\r\n * @param attrs Attrs of the current node\r\n * @param localRefs Local refs of the current node\r\n * @param inlineViews Whether or not this node will create inline views\r\n */\r\nfunction createDirectivesAndLocals(index, name, attrs, localRefs, inlineViews) {\r\n    var node = previousOrParentNode;\r\n    if (firstTemplatePass) {\r\n        ngDevMode && ngDevMode.firstTemplatePass++;\r\n        ngDevMode && assertDataInRange(index - 1);\r\n        node.tNode = tData[index] = createTNode(name, attrs || null, inlineViews ? [] : null);\r\n        cacheMatchingDirectivesForNode(node.tNode, currentView.tView, localRefs || null);\r\n    }\r\n    else {\r\n        instantiateDirectivesDirectly();\r\n    }\r\n    saveResolvedLocalsInData();\r\n}\r\n/**\r\n * On first template pass, we match each node against available directive selectors and save\r\n * the resulting defs in the correct instantiation order for subsequent change detection runs\r\n * (so dependencies are always created before the directives that inject them).\r\n */\r\nfunction cacheMatchingDirectivesForNode(tNode, tView, localRefs) {\r\n    // Please make sure to have explicit type for `exportsMap`. Inferred type triggers bug in tsickle.\r\n    var exportsMap = localRefs ? { '': -1 } : null;\r\n    var matches = tView.currentMatches = findDirectiveMatches(tNode);\r\n    if (matches) {\r\n        for (var i = 0; i < matches.length; i += 2) {\r\n            var def = matches[i];\r\n            var valueIndex = i + 1;\r\n            resolveDirective(def, valueIndex, matches, tView);\r\n            saveNameToExportMap(matches[valueIndex], def, exportsMap);\r\n        }\r\n    }\r\n    if (exportsMap)\r\n        cacheMatchingLocalNames(tNode, localRefs, exportsMap);\r\n}\r\n/** Matches the current node against all available selectors. */\r\nfunction findDirectiveMatches(tNode) {\r\n    var registry = currentView.tView.directiveRegistry;\r\n    var matches = null;\r\n    if (registry) {\r\n        for (var i = 0; i < registry.length; i++) {\r\n            var def = registry[i];\r\n            if (isNodeMatchingSelectorList(tNode, (def.selectors))) {\r\n                if (def.template) {\r\n                    if (tNode.flags & 4096 /* isComponent */)\r\n                        throwMultipleComponentError(tNode);\r\n                    tNode.flags = 4096 /* isComponent */;\r\n                }\r\n                if (def.diPublic)\r\n                    def.diPublic(def);\r\n                (matches || (matches = [])).push(def, null);\r\n            }\r\n        }\r\n    }\r\n    return matches;\r\n}\r\nfunction resolveDirective(def, valueIndex, matches, tView) {\r\n    if (matches[valueIndex] === null) {\r\n        matches[valueIndex] = CIRCULAR$2;\r\n        var instance = def.factory();\r\n        (tView.directives || (tView.directives = [])).push(def);\r\n        return directiveCreate(matches[valueIndex] = tView.directives.length - 1, instance, def);\r\n    }\r\n    else if (matches[valueIndex] === CIRCULAR$2) {\r\n        // If we revisit this directive before it's resolved, we know it's circular\r\n        throwCyclicDependencyError(def.type);\r\n    }\r\n    return null;\r\n}\r\n/** Stores index of component's host element so it will be queued for view refresh during CD. */\r\nfunction queueComponentIndexForCheck(dirIndex) {\r\n    if (firstTemplatePass) {\r\n        (currentView.tView.components || (currentView.tView.components = [])).push(dirIndex, data.length - 1);\r\n    }\r\n}\r\n/** Stores index of directive and host element so it will be queued for binding refresh during CD.\r\n */\r\nfunction queueHostBindingForCheck(dirIndex) {\r\n    ngDevMode &&\r\n        assertEqual(firstTemplatePass, true, 'Should only be called in first template pass.');\r\n    (currentView.tView.hostBindings || (currentView.tView.hostBindings = [])).push(dirIndex, data.length - 1);\r\n}\r\n/** Sets the context for a ChangeDetectorRef to the given instance. */\r\nfunction initChangeDetectorIfExisting(injector, instance, view) {\r\n    if (injector && injector.changeDetectorRef != null) {\r\n        injector.changeDetectorRef._setComponentContext(view, instance);\r\n    }\r\n}\r\nfunction isComponent(tNode) {\r\n    return (tNode.flags & 4096 /* isComponent */) === 4096 /* isComponent */;\r\n}\r\n/**\r\n * This function instantiates the given directives.\r\n */\r\nfunction instantiateDirectivesDirectly() {\r\n    var tNode = (previousOrParentNode.tNode);\r\n    var count = tNode.flags & 4095;\r\n    if (count > 0) {\r\n        var start = tNode.flags >> 13;\r\n        var end = start + count;\r\n        var tDirectives = (currentView.tView.directives);\r\n        for (var i = start; i < end; i++) {\r\n            var def = tDirectives[i];\r\n            directiveCreate(i, def.factory(), def);\r\n        }\r\n    }\r\n}\r\n/** Caches local names and their matching directive indices for query and template lookups. */\r\nfunction cacheMatchingLocalNames(tNode, localRefs, exportsMap) {\r\n    if (localRefs) {\r\n        var localNames = tNode.localNames = [];\r\n        // Local names must be stored in tNode in the same order that localRefs are defined\r\n        // in the template to ensure the data is loaded in the same slots as their refs\r\n        // in the template (for template queries).\r\n        for (var i = 0; i < localRefs.length; i += 2) {\r\n            var index = exportsMap[localRefs[i + 1]];\r\n            if (index == null)\r\n                throw new Error(\"Export of name '\" + localRefs[i + 1] + \"' not found!\");\r\n            localNames.push(localRefs[i], index);\r\n        }\r\n    }\r\n}\r\n/**\r\n * Builds up an export map as directives are created, so local refs can be quickly mapped\r\n * to their directive instances.\r\n */\r\nfunction saveNameToExportMap(index, def, exportsMap) {\r\n    if (exportsMap) {\r\n        if (def.exportAs)\r\n            exportsMap[def.exportAs] = index;\r\n        if (def.template)\r\n            exportsMap[''] = index;\r\n    }\r\n}\r\n/**\r\n * Takes a list of local names and indices and pushes the resolved local variable values\r\n * to data[] in the same order as they are loaded in the template with load().\r\n */\r\nfunction saveResolvedLocalsInData() {\r\n    var localNames = previousOrParentNode.tNode.localNames;\r\n    if (localNames) {\r\n        for (var i = 0; i < localNames.length; i += 2) {\r\n            var index = localNames[i + 1];\r\n            var value = index === -1 ? previousOrParentNode.native : directives[index];\r\n            data.push(value);\r\n        }\r\n    }\r\n}\r\n/**\r\n * Gets TView from a template function or creates a new TView\r\n * if it doesn't already exist.\r\n *\r\n * @param template The template from which to get static data\r\n * @param directives Directive defs that should be saved on TView\r\n * @param pipes Pipe defs that should be saved on TView\r\n * @returns TView\r\n */\r\nfunction getOrCreateTView(template, directives, pipes) {\r\n    // TODO(misko): reading `ngPrivateData` here is problematic for two reasons\r\n    // 1. It is a megamorphic call on each invocation.\r\n    // 2. For nested embedded views (ngFor inside ngFor) the template instance is per\r\n    //    outer template invocation, which means that no such property will exist\r\n    // Correct solution is to only put `ngPrivateData` on the Component template\r\n    // and not on embedded templates.\r\n    return template.ngPrivateData ||\r\n        (template.ngPrivateData = createTView(directives, pipes));\r\n}\r\n/** Creates a TView instance */\r\nfunction createTView(defs, pipes) {\r\n    ngDevMode && ngDevMode.tView++;\r\n    return {\r\n        data: [],\r\n        directives: null,\r\n        firstTemplatePass: true,\r\n        initHooks: null,\r\n        checkHooks: null,\r\n        contentHooks: null,\r\n        contentCheckHooks: null,\r\n        viewHooks: null,\r\n        viewCheckHooks: null,\r\n        destroyHooks: null,\r\n        pipeDestroyHooks: null,\r\n        hostBindings: null,\r\n        components: null,\r\n        directiveRegistry: typeof defs === 'function' ? defs() : defs,\r\n        pipeRegistry: typeof pipes === 'function' ? pipes() : pipes,\r\n        currentMatches: null\r\n    };\r\n}\r\nfunction setUpAttributes(native, attrs) {\r\n    ngDevMode && assertEqual(attrs.length % 2, 0, 'each attribute should have a key and a value');\r\n    var isProc = isProceduralRenderer(renderer);\r\n    for (var i = 0; i < attrs.length; i += 2) {\r\n        var attrName = attrs[i];\r\n        if (attrName !== NG_PROJECT_AS_ATTR_NAME) {\r\n            var attrVal = attrs[i + 1];\r\n            ngDevMode && ngDevMode.rendererSetAttribute++;\r\n            isProc ? renderer.setAttribute(native, attrName, attrVal) :\r\n                native.setAttribute(attrName, attrVal);\r\n        }\r\n    }\r\n}\r\nfunction createError(text, token) {\r\n    return new Error(\"Renderer: \" + text + \" [\" + stringify$1(token) + \"]\");\r\n}\r\n/**\r\n * Locates the host native element, used for bootstrapping existing nodes into rendering pipeline.\r\n *\r\n * @param elementOrSelector Render element or CSS selector to locate the element.\r\n */\r\nfunction locateHostElement(factory, elementOrSelector) {\r\n    ngDevMode && assertDataInRange(-1);\r\n    rendererFactory = factory;\r\n    var defaultRenderer = factory.createRenderer(null, null);\r\n    var rNode = typeof elementOrSelector === 'string' ?\r\n        (isProceduralRenderer(defaultRenderer) ?\r\n            defaultRenderer.selectRootElement(elementOrSelector) :\r\n            defaultRenderer.querySelector(elementOrSelector)) :\r\n        elementOrSelector;\r\n    if (ngDevMode && !rNode) {\r\n        if (typeof elementOrSelector === 'string') {\r\n            throw createError('Host node with selector not found:', elementOrSelector);\r\n        }\r\n        else {\r\n            throw createError('Host node is required:', elementOrSelector);\r\n        }\r\n    }\r\n    return rNode;\r\n}\r\n/**\r\n * Creates the host LNode.\r\n *\r\n * @param rNode Render host element.\r\n * @param def ComponentDef\r\n *\r\n * @returns LElementNode created\r\n */\r\nfunction hostElement(tag, rNode, def) {\r\n    resetApplicationState();\r\n    var node = createLNode(0, 3 /* Element */, rNode, createLView(-1, renderer, getOrCreateTView(def.template, def.directiveDefs, def.pipeDefs), null, null, def.onPush ? 4 /* Dirty */ : 2 /* CheckAlways */));\r\n    if (firstTemplatePass) {\r\n        node.tNode = createTNode(tag, null, null);\r\n        node.tNode.flags = 4096 /* isComponent */;\r\n        if (def.diPublic)\r\n            def.diPublic(def);\r\n        currentView.tView.directives = [def];\r\n    }\r\n    return node;\r\n}\r\n/**\r\n * Adds an event listener to the current node.\r\n *\r\n * If an output exists on one of the node's directives, it also subscribes to the output\r\n * and saves the subscription for later cleanup.\r\n *\r\n * @param eventName Name of the event\r\n * @param listenerFn The function to be called when event emits\r\n * @param useCapture Whether or not to use capture in event listener.\r\n */\r\nfunction listener(eventName, listenerFn, useCapture) {\r\n    if (useCapture === void 0) { useCapture = false; }\r\n    ngDevMode && assertPreviousIsParent();\r\n    var node = previousOrParentNode;\r\n    var native = node.native;\r\n    // In order to match current behavior, native DOM event listeners must be added for all\r\n    // events (including outputs).\r\n    var cleanupFns = cleanup || (cleanup = currentView.cleanup = []);\r\n    ngDevMode && ngDevMode.rendererAddEventListener++;\r\n    if (isProceduralRenderer(renderer)) {\r\n        var wrappedListener = wrapListenerWithDirtyLogic(currentView, listenerFn);\r\n        var cleanupFn = renderer.listen(native, eventName, wrappedListener);\r\n        cleanupFns.push(cleanupFn, null);\r\n    }\r\n    else {\r\n        var wrappedListener = wrapListenerWithDirtyAndDefault(currentView, listenerFn);\r\n        native.addEventListener(eventName, wrappedListener, useCapture);\r\n        cleanupFns.push(eventName, native, wrappedListener, useCapture);\r\n    }\r\n    var tNode = (node.tNode);\r\n    if (tNode.outputs === undefined) {\r\n        // if we create TNode here, inputs must be undefined so we know they still need to be\r\n        // checked\r\n        tNode.outputs = generatePropertyAliases(node.tNode.flags, 1 /* Output */);\r\n    }\r\n    var outputs = tNode.outputs;\r\n    var outputData;\r\n    if (outputs && (outputData = outputs[eventName])) {\r\n        createOutput(outputData, listenerFn);\r\n    }\r\n}\r\n/**\r\n * Iterates through the outputs associated with a particular event name and subscribes to\r\n * each output.\r\n */\r\nfunction createOutput(outputs, listener) {\r\n    for (var i = 0; i < outputs.length; i += 2) {\r\n        ngDevMode && assertDataInRange(outputs[i], (directives));\r\n        var subscription = directives[outputs[i]][outputs[i + 1]].subscribe(listener);\r\n        cleanup.push(subscription.unsubscribe, subscription);\r\n    }\r\n}\r\n/** Mark the end of the element. */\r\nfunction elementEnd() {\r\n    if (isParent) {\r\n        isParent = false;\r\n    }\r\n    else {\r\n        ngDevMode && assertHasParent();\r\n        previousOrParentNode = (previousOrParentNode.parent);\r\n    }\r\n    ngDevMode && assertNodeType(previousOrParentNode, 3 /* Element */);\r\n    var queries = previousOrParentNode.queries;\r\n    queries && queries.addNode(previousOrParentNode);\r\n    queueLifecycleHooks(previousOrParentNode.tNode.flags, currentView);\r\n}\r\n/**\r\n * Updates the value of removes an attribute on an Element.\r\n *\r\n * @param number index The index of the element in the data array\r\n * @param name name The name of the attribute.\r\n * @param value value The attribute is removed when value is `null` or `undefined`.\r\n *                  Otherwise the attribute value is set to the stringified value.\r\n * @param sanitizer An optional function used to sanitize the value.\r\n */\r\nfunction elementAttribute(index, name, value, sanitizer) {\r\n    if (value !== NO_CHANGE) {\r\n        var element = data[index];\r\n        if (value == null) {\r\n            ngDevMode && ngDevMode.rendererRemoveAttribute++;\r\n            isProceduralRenderer(renderer) ? renderer.removeAttribute(element.native, name) :\r\n                element.native.removeAttribute(name);\r\n        }\r\n        else {\r\n            ngDevMode && ngDevMode.rendererSetAttribute++;\r\n            var strValue = sanitizer == null ? stringify$1(value) : sanitizer(value);\r\n            isProceduralRenderer(renderer) ? renderer.setAttribute(element.native, name, strValue) :\r\n                element.native.setAttribute(name, strValue);\r\n        }\r\n    }\r\n}\r\n/**\r\n * Update a property on an Element.\r\n *\r\n * If the property name also exists as an input property on one of the element's directives,\r\n * the component property will be set instead of the element property. This check must\r\n * be conducted at runtime so child components that add new @Inputs don't have to be re-compiled.\r\n *\r\n * @param index The index of the element to update in the data array\r\n * @param propName Name of property. Because it is going to DOM, this is not subject to\r\n *        renaming as part of minification.\r\n * @param value New value to write.\r\n * @param sanitizer An optional function used to sanitize the value.\r\n */\r\nfunction elementProperty(index, propName, value, sanitizer) {\r\n    if (value === NO_CHANGE)\r\n        return;\r\n    var node = data[index];\r\n    var tNode = (node.tNode);\r\n    // if tNode.inputs is undefined, a listener has created outputs, but inputs haven't\r\n    // yet been checked\r\n    if (tNode && tNode.inputs === undefined) {\r\n        // mark inputs as checked\r\n        tNode.inputs = generatePropertyAliases(node.tNode.flags, 0 /* Input */);\r\n    }\r\n    var inputData = tNode && tNode.inputs;\r\n    var dataValue;\r\n    if (inputData && (dataValue = inputData[propName])) {\r\n        setInputsForProperty(dataValue, value);\r\n        markDirtyIfOnPush(node);\r\n    }\r\n    else {\r\n        // It is assumed that the sanitizer is only added when the compiler determines that the property\r\n        // is risky, so sanitization can be done without further checks.\r\n        value = sanitizer != null ? sanitizer(value) : value;\r\n        var native = node.native;\r\n        ngDevMode && ngDevMode.rendererSetProperty++;\r\n        isProceduralRenderer(renderer) ? renderer.setProperty(native, propName, value) :\r\n            (native.setProperty ? native.setProperty(propName, value) :\r\n                native[propName] = value);\r\n    }\r\n}\r\n/**\r\n * Constructs a TNode object from the arguments.\r\n *\r\n * @param tagName The tag name of the node\r\n * @param attrs The attributes defined on this ndoe\r\n * @param tViews Any TViews attached to this node\r\n * @param localNames A list of local names and their matching indices\r\n * @returns the TNode object\r\n */\r\nfunction createTNode(tagName, attrs, tViews) {\r\n    ngDevMode && ngDevMode.tNode++;\r\n    return {\r\n        flags: 0,\r\n        tagName: tagName,\r\n        attrs: attrs,\r\n        localNames: null,\r\n        initialInputs: undefined,\r\n        inputs: undefined,\r\n        outputs: undefined,\r\n        tViews: tViews\r\n    };\r\n}\r\n/**\r\n * Given a list of directive indices and minified input names, sets the\r\n * input properties on the corresponding directives.\r\n */\r\nfunction setInputsForProperty(inputs, value) {\r\n    for (var i = 0; i < inputs.length; i += 2) {\r\n        ngDevMode && assertDataInRange(inputs[i], (directives));\r\n        directives[inputs[i]][inputs[i + 1]] = value;\r\n    }\r\n}\r\n/**\r\n * Consolidates all inputs or outputs of all directives on this logical node.\r\n *\r\n * @param number lNodeFlags logical node flags\r\n * @param Direction direction whether to consider inputs or outputs\r\n * @returns PropertyAliases|null aggregate of all properties if any, `null` otherwise\r\n */\r\nfunction generatePropertyAliases(tNodeFlags, direction) {\r\n    var count = tNodeFlags & 4095;\r\n    var propStore = null;\r\n    if (count > 0) {\r\n        var start = tNodeFlags >> 13;\r\n        var end = start + count;\r\n        var isInput = direction === 0;\r\n        var defs = (currentView.tView.directives);\r\n        for (var i = start; i < end; i++) {\r\n            var directiveDef = defs[i];\r\n            var propertyAliasMap = isInput ? directiveDef.inputs : directiveDef.outputs;\r\n            for (var publicName in propertyAliasMap) {\r\n                if (propertyAliasMap.hasOwnProperty(publicName)) {\r\n                    propStore = propStore || {};\r\n                    var internalName = propertyAliasMap[publicName];\r\n                    var hasProperty = propStore.hasOwnProperty(publicName);\r\n                    hasProperty ? propStore[publicName].push(i, internalName) :\r\n                        (propStore[publicName] = [i, internalName]);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return propStore;\r\n}\r\n/**\r\n * Add or remove a class in a `classList` on a DOM element.\r\n *\r\n * This instruction is meant to handle the [class.foo]=\"exp\" case\r\n *\r\n * @param index The index of the element to update in the data array\r\n * @param className Name of class to toggle. Because it is going to DOM, this is not subject to\r\n *        renaming as part of minification.\r\n * @param value A value indicating if a given class should be added or removed.\r\n */\r\nfunction elementClassNamed(index, className, value) {\r\n    if (value !== NO_CHANGE) {\r\n        var lElement = data[index];\r\n        if (value) {\r\n            ngDevMode && ngDevMode.rendererAddClass++;\r\n            isProceduralRenderer(renderer) ? renderer.addClass(lElement.native, className) :\r\n                lElement.native.classList.add(className);\r\n        }\r\n        else {\r\n            ngDevMode && ngDevMode.rendererRemoveClass++;\r\n            isProceduralRenderer(renderer) ? renderer.removeClass(lElement.native, className) :\r\n                lElement.native.classList.remove(className);\r\n        }\r\n    }\r\n}\r\n/**\r\n * Set the `className` property on a DOM element.\r\n *\r\n * This instruction is meant to handle the `[class]=\"exp\"` usage.\r\n *\r\n * `elementClass` instruction writes the value to the \"element's\" `className` property.\r\n *\r\n * @param index The index of the element to update in the data array\r\n * @param value A value indicating a set of classes which should be applied. The method overrides\r\n *   any existing classes. The value is stringified (`toString`) before it is applied to the\r\n *   element.\r\n */\r\nfunction elementClass(index, value) {\r\n    if (value !== NO_CHANGE) {\r\n        // TODO: This is a naive implementation which simply writes value to the `className`. In the\r\n        // future\r\n        // we will add logic here which would work with the animation code.\r\n        var lElement = data[index];\r\n        ngDevMode && ngDevMode.rendererSetClassName++;\r\n        isProceduralRenderer(renderer) ? renderer.setProperty(lElement.native, 'className', value) :\r\n            lElement.native['className'] = stringify$1(value);\r\n    }\r\n}\r\nfunction elementStyleNamed(index, styleName, value, suffixOrSanitizer) {\r\n    if (value !== NO_CHANGE) {\r\n        var lElement = data[index];\r\n        if (value == null) {\r\n            ngDevMode && ngDevMode.rendererRemoveStyle++;\r\n            isProceduralRenderer(renderer) ?\r\n                renderer.removeStyle(lElement.native, styleName, RendererStyleFlags3.DashCase) :\r\n                lElement.native['style'].removeProperty(styleName);\r\n        }\r\n        else {\r\n            var strValue = typeof suffixOrSanitizer == 'function' ? suffixOrSanitizer(value) : stringify$1(value);\r\n            if (typeof suffixOrSanitizer == 'string')\r\n                strValue = strValue + suffixOrSanitizer;\r\n            ngDevMode && ngDevMode.rendererSetStyle++;\r\n            isProceduralRenderer(renderer) ?\r\n                renderer.setStyle(lElement.native, styleName, strValue, RendererStyleFlags3.DashCase) :\r\n                lElement.native['style'].setProperty(styleName, strValue);\r\n        }\r\n    }\r\n}\r\n/**\r\n * Set the `style` property on a DOM element.\r\n *\r\n * This instruction is meant to handle the `[style]=\"exp\"` usage.\r\n *\r\n *\r\n * @param index The index of the element to update in the data array\r\n * @param value A value indicating if a given style should be added or removed.\r\n *   The expected shape of `value` is an object where keys are style names and the values\r\n *   are their corresponding values to set. If value is falsy than the style is remove. An absence\r\n *   of style does not cause that style to be removed. `NO_CHANGE` implies that no update should be\r\n *   performed.\r\n */\r\nfunction elementStyle(index, value) {\r\n    if (value !== NO_CHANGE) {\r\n        // TODO: This is a naive implementation which simply writes value to the `style`. In the future\r\n        // we will add logic here which would work with the animation code.\r\n        var lElement = data[index];\r\n        if (isProceduralRenderer(renderer)) {\r\n            ngDevMode && ngDevMode.rendererSetStyle++;\r\n            renderer.setProperty(lElement.native, 'style', value);\r\n        }\r\n        else {\r\n            var style = lElement.native['style'];\r\n            for (var i = 0, keys = Object.keys(value); i < keys.length; i++) {\r\n                var styleName = keys[i];\r\n                var styleValue = value[styleName];\r\n                if (styleValue == null) {\r\n                    ngDevMode && ngDevMode.rendererRemoveStyle++;\r\n                    style.removeProperty(styleName);\r\n                }\r\n                else {\r\n                    ngDevMode && ngDevMode.rendererSetStyle++;\r\n                    style.setProperty(styleName, styleValue);\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n/**\r\n * Create static text node\r\n *\r\n * @param index Index of the node in the data array.\r\n * @param value Value to write. This value will be stringified.\r\n */\r\nfunction text(index, value) {\r\n    ngDevMode &&\r\n        assertEqual(currentView.bindingStartIndex, -1, 'text nodes should be created before bindings');\r\n    ngDevMode && ngDevMode.rendererCreateTextNode++;\r\n    var textNode = createTextNode(value, renderer);\r\n    var node = createLNode(index, 3 /* Element */, textNode);\r\n    // Text nodes are self closing.\r\n    isParent = false;\r\n    appendChild((node.parent), textNode, currentView);\r\n}\r\n/**\r\n * Create text node with binding\r\n * Bindings should be handled externally with the proper bind(1-8) method\r\n *\r\n * @param index Index of the node in the data array.\r\n * @param value Stringified value to write.\r\n */\r\nfunction textBinding(index, value) {\r\n    ngDevMode && assertDataInRange(index);\r\n    var existingNode = data[index];\r\n    ngDevMode && assertNotNull(existingNode, 'LNode should exist');\r\n    ngDevMode && assertNotNull(existingNode.native, 'native element should exist');\r\n    ngDevMode && ngDevMode.rendererSetText++;\r\n    value !== NO_CHANGE &&\r\n        (isProceduralRenderer(renderer) ? renderer.setValue(existingNode.native, stringify$1(value)) :\r\n            existingNode.native.textContent = stringify$1(value));\r\n}\r\n/**\r\n * Create a directive.\r\n *\r\n * NOTE: directives can be created in order other than the index order. They can also\r\n *       be retrieved before they are created in which case the value will be null.\r\n *\r\n * @param directive The directive instance.\r\n * @param directiveDef DirectiveDef object which contains information about the template.\r\n */\r\nfunction directiveCreate(index, directive, directiveDef) {\r\n    var instance = baseDirectiveCreate(index, directive, directiveDef);\r\n    ngDevMode && assertNotNull(previousOrParentNode.tNode, 'previousOrParentNode.tNode');\r\n    var tNode = previousOrParentNode.tNode;\r\n    var isComponent = directiveDef.template;\r\n    if (isComponent) {\r\n        addComponentLogic(index, directive, directiveDef);\r\n    }\r\n    if (firstTemplatePass) {\r\n        // Init hooks are queued now so ngOnInit is called in host components before\r\n        // any projected components.\r\n        queueInitHooks(index, directiveDef.onInit, directiveDef.doCheck, currentView.tView);\r\n        if (directiveDef.hostBindings)\r\n            queueHostBindingForCheck(index);\r\n    }\r\n    if (tNode && tNode.attrs) {\r\n        setInputsFromAttrs(index, instance, directiveDef.inputs, tNode);\r\n    }\r\n    return instance;\r\n}\r\nfunction addComponentLogic(index, instance, def) {\r\n    var tView = getOrCreateTView(def.template, def.directiveDefs, def.pipeDefs);\r\n    // Only component views should be added to the view tree directly. Embedded views are\r\n    // accessed through their containers because they may be removed / re-added later.\r\n    var hostView = addToViewTree(currentView, createLView(-1, rendererFactory.createRenderer(previousOrParentNode.native, def.rendererType), tView, null, null, def.onPush ? 4 /* Dirty */ : 2 /* CheckAlways */));\r\n    previousOrParentNode.data = hostView;\r\n    hostView.node = previousOrParentNode;\r\n    initChangeDetectorIfExisting(previousOrParentNode.nodeInjector, instance, hostView);\r\n    if (firstTemplatePass)\r\n        queueComponentIndexForCheck(index);\r\n}\r\n/**\r\n * A lighter version of directiveCreate() that is used for the root component\r\n *\r\n * This version does not contain features that we don't already support at root in\r\n * current Angular. Example: local refs and inputs on root component.\r\n */\r\nfunction baseDirectiveCreate(index, directive, directiveDef) {\r\n    ngDevMode &&\r\n        assertEqual(currentView.bindingStartIndex, -1, 'directives should be created before any bindings');\r\n    ngDevMode && assertPreviousIsParent();\r\n    Object.defineProperty(directive, NG_HOST_SYMBOL, { enumerable: false, value: previousOrParentNode });\r\n    if (directives == null)\r\n        currentView.directives = directives = [];\r\n    ngDevMode && assertDataNext(index, directives);\r\n    directives[index] = directive;\r\n    if (firstTemplatePass) {\r\n        var flags = previousOrParentNode.tNode.flags;\r\n        if ((flags & 4095 /* DirectiveCountMask */) === 0) {\r\n            // When the first directive is created:\r\n            // - save the index,\r\n            // - set the number of directives to 1\r\n            // When the first directive is created:\r\n            // - save the index,\r\n            // - set the number of directives to 1\r\n            previousOrParentNode.tNode.flags =\r\n                index << 13 /* DirectiveStartingIndexShift */ | flags & 4096 /* isComponent */ | 1;\r\n        }\r\n        else {\r\n            // Only need to bump the size when subsequent directives are created\r\n            ngDevMode && assertNotEqual(flags & 4095 /* DirectiveCountMask */, 4095 /* DirectiveCountMask */, 'Reached the max number of directives');\r\n            previousOrParentNode.tNode.flags++;\r\n        }\r\n    }\r\n    else {\r\n        var diPublic = directiveDef.diPublic;\r\n        if (diPublic)\r\n            diPublic((directiveDef));\r\n    }\r\n    if (directiveDef.attributes != null && previousOrParentNode.type == 3 /* Element */) {\r\n        setUpAttributes(previousOrParentNode.native, directiveDef.attributes);\r\n    }\r\n    return directive;\r\n}\r\n/**\r\n * Sets initial input properties on directive instances from attribute data\r\n *\r\n * @param directiveIndex Index of the directive in directives array\r\n * @param instance Instance of the directive on which to set the initial inputs\r\n * @param inputs The list of inputs from the directive def\r\n * @param tNode The static data for this node\r\n */\r\nfunction setInputsFromAttrs(directiveIndex, instance, inputs, tNode) {\r\n    var initialInputData = tNode.initialInputs;\r\n    if (initialInputData === undefined || directiveIndex >= initialInputData.length) {\r\n        initialInputData = generateInitialInputs(directiveIndex, inputs, tNode);\r\n    }\r\n    var initialInputs = initialInputData[directiveIndex];\r\n    if (initialInputs) {\r\n        for (var i = 0; i < initialInputs.length; i += 2) {\r\n            instance[initialInputs[i]] = initialInputs[i + 1];\r\n        }\r\n    }\r\n}\r\n/**\r\n * Generates initialInputData for a node and stores it in the template's static storage\r\n * so subsequent template invocations don't have to recalculate it.\r\n *\r\n * initialInputData is an array containing values that need to be set as input properties\r\n * for directives on this node, but only once on creation. We need this array to support\r\n * the case where you set an @Input property of a directive using attribute-like syntax.\r\n * e.g. if you have a `name` @Input, you can set it once like this:\r\n *\r\n * <my-component name=\"Bess\"></my-component>\r\n *\r\n * @param directiveIndex Index to store the initial input data\r\n * @param inputs The list of inputs from the directive def\r\n * @param tNode The static data on this node\r\n */\r\nfunction generateInitialInputs(directiveIndex, inputs, tNode) {\r\n    var initialInputData = tNode.initialInputs || (tNode.initialInputs = []);\r\n    initialInputData[directiveIndex] = null;\r\n    var attrs = (tNode.attrs);\r\n    for (var i = 0; i < attrs.length; i += 2) {\r\n        var attrName = attrs[i];\r\n        var minifiedInputName = inputs[attrName];\r\n        if (minifiedInputName !== undefined) {\r\n            var inputsToStore = initialInputData[directiveIndex] || (initialInputData[directiveIndex] = []);\r\n            inputsToStore.push(minifiedInputName, attrs[i + 1]);\r\n        }\r\n    }\r\n    return initialInputData;\r\n}\r\nfunction createLContainer(parentLNode, currentView, template) {\r\n    ngDevMode && assertNotNull(parentLNode, 'containers should have a parent');\r\n    return {\r\n        views: [],\r\n        nextIndex: 0,\r\n        // If the direct parent of the container is a view, its views will need to be added\r\n        // through insertView() when its parent view is being inserted:\r\n        renderParent: canInsertNativeNode(parentLNode, currentView) ? parentLNode : null,\r\n        template: template == null ? null : template,\r\n        next: null,\r\n        parent: currentView,\r\n        dynamicViewCount: 0,\r\n        queries: null\r\n    };\r\n}\r\n/**\r\n * Creates an LContainerNode.\r\n *\r\n * Only `LViewNodes` can go into `LContainerNodes`.\r\n *\r\n * @param index The index of the container in the data array\r\n * @param template Optional inline template\r\n * @param tagName The name of the container element, if applicable\r\n * @param attrs The attrs attached to the container, if applicable\r\n * @param localRefs A set of local reference bindings on the element.\r\n */\r\nfunction container(index, template, tagName, attrs, localRefs) {\r\n    ngDevMode && assertEqual(currentView.bindingStartIndex, -1, 'container nodes should be created before any bindings');\r\n    var currentParent = isParent ? previousOrParentNode : previousOrParentNode.parent;\r\n    var lContainer = createLContainer(currentParent, currentView, template);\r\n    var node = createLNode(index, 0 /* Container */, undefined, lContainer);\r\n    // Containers are added to the current view tree instead of their embedded views\r\n    // because views can be removed and re-inserted.\r\n    addToViewTree(currentView, node.data);\r\n    createDirectivesAndLocals(index, tagName || null, attrs, localRefs, template == null);\r\n    isParent = false;\r\n    ngDevMode && assertNodeType(previousOrParentNode, 0 /* Container */);\r\n    var queries = node.queries;\r\n    if (queries) {\r\n        // check if a given container node matches\r\n        queries.addNode(node);\r\n        // prepare place for matching nodes from views inserted into a given container\r\n        lContainer.queries = queries.container();\r\n    }\r\n}\r\n/**\r\n * Sets a container up to receive views.\r\n *\r\n * @param index The index of the container in the data array\r\n */\r\nfunction containerRefreshStart(index) {\r\n    ngDevMode && assertDataInRange(index);\r\n    previousOrParentNode = data[index];\r\n    ngDevMode && assertNodeType(previousOrParentNode, 0 /* Container */);\r\n    isParent = true;\r\n    previousOrParentNode.data.nextIndex = 0;\r\n    ngDevMode && assertSame(previousOrParentNode.native, undefined, \"the container's native element should not have been set yet.\");\r\n    if (!checkNoChangesMode) {\r\n        // We need to execute init hooks here so ngOnInit hooks are called in top level views\r\n        // before they are called in embedded views (for backwards compatibility).\r\n        executeInitHooks(currentView, currentView.tView, creationMode);\r\n    }\r\n}\r\n/**\r\n * Marks the end of the LContainerNode.\r\n *\r\n * Marking the end of LContainerNode is the time when to child Views get inserted or removed.\r\n */\r\nfunction containerRefreshEnd() {\r\n    if (isParent) {\r\n        isParent = false;\r\n    }\r\n    else {\r\n        ngDevMode && assertNodeType(previousOrParentNode, 2 /* View */);\r\n        ngDevMode && assertHasParent();\r\n        previousOrParentNode = (previousOrParentNode.parent);\r\n    }\r\n    ngDevMode && assertNodeType(previousOrParentNode, 0 /* Container */);\r\n    var container = previousOrParentNode;\r\n    container.native = undefined;\r\n    ngDevMode && assertNodeType(container, 0 /* Container */);\r\n    var nextIndex = container.data.nextIndex;\r\n    // remove extra views at the end of the container\r\n    while (nextIndex < container.data.views.length) {\r\n        removeView(container, nextIndex);\r\n    }\r\n}\r\nfunction refreshDynamicChildren() {\r\n    for (var current = currentView.child; current !== null; current = current.next) {\r\n        if (current.dynamicViewCount !== 0 && current.views) {\r\n            var container_1 = current;\r\n            for (var i = 0; i < container_1.views.length; i++) {\r\n                var lViewNode = container_1.views[i];\r\n                // The directives and pipes are not needed here as an existing view is only being refreshed.\r\n                var dynamicView = lViewNode.data;\r\n                ngDevMode && assertNotNull(dynamicView.tView, 'TView must be allocated');\r\n                renderEmbeddedTemplate(lViewNode, dynamicView.tView, (dynamicView.template), (dynamicView.context), renderer);\r\n            }\r\n        }\r\n    }\r\n}\r\n/**\r\n * Looks for a view with a given view block id inside a provided LContainer.\r\n * Removes views that need to be deleted in the process.\r\n *\r\n * @param containerNode where to search for views\r\n * @param startIdx starting index in the views array to search from\r\n * @param viewBlockId exact view block id to look for\r\n * @returns index of a found view or -1 if not found\r\n */\r\nfunction scanForView(containerNode, startIdx, viewBlockId) {\r\n    var views = containerNode.data.views;\r\n    for (var i = startIdx; i < views.length; i++) {\r\n        var viewAtPositionId = views[i].data.id;\r\n        if (viewAtPositionId === viewBlockId) {\r\n            return views[i];\r\n        }\r\n        else if (viewAtPositionId < viewBlockId) {\r\n            // found a view that should not be at this position - remove\r\n            removeView(containerNode, i);\r\n        }\r\n        else {\r\n            // found a view with id grater than the one we are searching for\r\n            // which means that required view doesn't exist and can't be found at\r\n            // later positions in the views array - stop the search here\r\n            break;\r\n        }\r\n    }\r\n    return null;\r\n}\r\n/**\r\n * Marks the start of an embedded view.\r\n *\r\n * @param viewBlockId The ID of this view\r\n * @return boolean Whether or not this view is in creation mode\r\n */\r\nfunction embeddedViewStart(viewBlockId) {\r\n    var container = (isParent ? previousOrParentNode : previousOrParentNode.parent);\r\n    ngDevMode && assertNodeType(container, 0 /* Container */);\r\n    var lContainer = container.data;\r\n    var viewNode = scanForView(container, lContainer.nextIndex, viewBlockId);\r\n    if (viewNode) {\r\n        previousOrParentNode = viewNode;\r\n        ngDevMode && assertNodeType(previousOrParentNode, 2 /* View */);\r\n        isParent = true;\r\n        enterView(viewNode.data, viewNode);\r\n    }\r\n    else {\r\n        // When we create a new LView, we always reset the state of the instructions.\r\n        var newView = createLView(viewBlockId, renderer, getOrCreateEmbeddedTView(viewBlockId, container), null, null, 2 /* CheckAlways */);\r\n        if (lContainer.queries) {\r\n            newView.queries = lContainer.queries.enterView(lContainer.nextIndex);\r\n        }\r\n        enterView(newView, viewNode = createLNode(null, 2 /* View */, null, newView));\r\n    }\r\n    return getRenderFlags(viewNode.data);\r\n}\r\n/**\r\n * Initialize the TView (e.g. static data) for the active embedded view.\r\n *\r\n * Each embedded view block must create or retrieve its own TView. Otherwise, the embedded view's\r\n * static data for a particular node would overwrite the static data for a node in the view above\r\n * it with the same index (since it's in the same template).\r\n *\r\n * @param viewIndex The index of the TView in TNode.tViews\r\n * @param parent The parent container in which to look for the view's static data\r\n * @returns TView\r\n */\r\nfunction getOrCreateEmbeddedTView(viewIndex, parent) {\r\n    ngDevMode && assertNodeType(parent, 0 /* Container */);\r\n    var containerTViews = parent.tNode.tViews;\r\n    ngDevMode && assertNotNull(containerTViews, 'TView expected');\r\n    ngDevMode && assertEqual(Array.isArray(containerTViews), true, 'TViews should be in an array');\r\n    if (viewIndex >= containerTViews.length || containerTViews[viewIndex] == null) {\r\n        var tView = currentView.tView;\r\n        containerTViews[viewIndex] = createTView(tView.directiveRegistry, tView.pipeRegistry);\r\n    }\r\n    return containerTViews[viewIndex];\r\n}\r\n/** Marks the end of an embedded view. */\r\nfunction embeddedViewEnd() {\r\n    refreshView();\r\n    isParent = false;\r\n    var viewNode = previousOrParentNode = currentView.node;\r\n    var containerNode = previousOrParentNode.parent;\r\n    if (containerNode) {\r\n        ngDevMode && assertNodeType(viewNode, 2 /* View */);\r\n        ngDevMode && assertNodeType(containerNode, 0 /* Container */);\r\n        var lContainer = containerNode.data;\r\n        if (creationMode) {\r\n            // When projected nodes are going to be inserted, the renderParent of the dynamic container\r\n            // used by the ViewContainerRef must be set.\r\n            setRenderParentInProjectedNodes(lContainer.renderParent, viewNode);\r\n            // it is a new view, insert it into collection of views for a given container\r\n            insertView(containerNode, viewNode, lContainer.nextIndex);\r\n        }\r\n        lContainer.nextIndex++;\r\n    }\r\n    leaveView((currentView.parent));\r\n    ngDevMode && assertEqual(isParent, false, 'isParent');\r\n    ngDevMode && assertNodeType(previousOrParentNode, 2 /* View */);\r\n}\r\n/**\r\n * For nodes which are projected inside an embedded view, this function sets the renderParent\r\n * of their dynamic LContainerNode.\r\n * @param renderParent the renderParent of the LContainer which contains the embedded view.\r\n * @param viewNode the embedded view.\r\n */\r\nfunction setRenderParentInProjectedNodes(renderParent, viewNode) {\r\n    if (renderParent != null) {\r\n        var node = viewNode.child;\r\n        while (node) {\r\n            if (node.type === 1 /* Projection */) {\r\n                var nodeToProject = node.data.head;\r\n                var lastNodeToProject = node.data.tail;\r\n                while (nodeToProject) {\r\n                    if (nodeToProject.dynamicLContainerNode) {\r\n                        nodeToProject.dynamicLContainerNode.data.renderParent = renderParent;\r\n                    }\r\n                    nodeToProject = nodeToProject === lastNodeToProject ? null : nodeToProject.pNextOrParent;\r\n                }\r\n            }\r\n            node = node.next;\r\n        }\r\n    }\r\n}\r\n/**\r\n * Refreshes components by entering the component view and processing its bindings, queries, etc.\r\n *\r\n * @param directiveIndex\r\n * @param elementIndex\r\n */\r\nfunction componentRefresh(directiveIndex, elementIndex) {\r\n    ngDevMode && assertDataInRange(elementIndex);\r\n    var element = data[elementIndex];\r\n    ngDevMode && assertNodeType(element, 3 /* Element */);\r\n    ngDevMode && assertNotNull(element.data, \"Component's host node should have an LView attached.\");\r\n    var hostView = (element.data);\r\n    // Only attached CheckAlways components or attached, dirty OnPush components should be checked\r\n    if (viewAttached(hostView) && hostView.flags & (2 /* CheckAlways */ | 4 /* Dirty */)) {\r\n        ngDevMode && assertDataInRange(directiveIndex, (directives));\r\n        var def = currentView.tView.directives[directiveIndex];\r\n        detectChangesInternal(hostView, element, def, getDirectiveInstance(directives[directiveIndex]));\r\n    }\r\n}\r\n/** Returns a boolean for whether the view is attached */\r\nfunction viewAttached(view) {\r\n    return (view.flags & 8 /* Attached */) === 8 /* Attached */;\r\n}\r\n/**\r\n * Instruction to distribute projectable nodes among <ng-content> occurrences in a given template.\r\n * It takes all the selectors from the entire component's template and decides where\r\n * each projected node belongs (it re-distributes nodes among \"buckets\" where each \"bucket\" is\r\n * backed by a selector).\r\n *\r\n * This function requires CSS selectors to be provided in 2 forms: parsed (by a compiler) and text,\r\n * un-parsed form.\r\n *\r\n * The parsed form is needed for efficient matching of a node against a given CSS selector.\r\n * The un-parsed, textual form is needed for support of the ngProjectAs attribute.\r\n *\r\n * Having a CSS selector in 2 different formats is not ideal, but alternatives have even more\r\n * drawbacks:\r\n * - having only a textual form would require runtime parsing of CSS selectors;\r\n * - we can't have only a parsed as we can't re-construct textual form from it (as entered by a\r\n * template author).\r\n *\r\n * @param selectors A collection of parsed CSS selectors\r\n * @param rawSelectors A collection of CSS selectors in the raw, un-parsed form\r\n */\r\nfunction projectionDef(index, selectors, textSelectors) {\r\n    var noOfNodeBuckets = selectors ? selectors.length + 1 : 1;\r\n    var distributedNodes = new Array(noOfNodeBuckets);\r\n    for (var i = 0; i < noOfNodeBuckets; i++) {\r\n        distributedNodes[i] = [];\r\n    }\r\n    var componentNode = findComponentHost(currentView);\r\n    var componentChild = componentNode.child;\r\n    while (componentChild !== null) {\r\n        // execute selector matching logic if and only if:\r\n        // - there are selectors defined\r\n        // - a node has a tag name / attributes that can be matched\r\n        if (selectors && componentChild.tNode) {\r\n            var matchedIdx = matchingSelectorIndex(componentChild.tNode, selectors, (textSelectors));\r\n            distributedNodes[matchedIdx].push(componentChild);\r\n        }\r\n        else {\r\n            distributedNodes[0].push(componentChild);\r\n        }\r\n        componentChild = componentChild.next;\r\n    }\r\n    ngDevMode && assertDataNext(index);\r\n    data[index] = distributedNodes;\r\n}\r\n/**\r\n * Updates the linked list of a projection node, by appending another linked list.\r\n *\r\n * @param projectionNode Projection node whose projected nodes linked list has to be updated\r\n * @param appendedFirst First node of the linked list to append.\r\n * @param appendedLast Last node of the linked list to append.\r\n */\r\nfunction appendToProjectionNode(projectionNode, appendedFirst, appendedLast) {\r\n    ngDevMode && assertEqual(!!appendedFirst, !!appendedLast, 'appendedFirst can be null if and only if appendedLast is also null');\r\n    if (!appendedLast) {\r\n        // nothing to append\r\n        return;\r\n    }\r\n    var projectionNodeData = projectionNode.data;\r\n    if (projectionNodeData.tail) {\r\n        projectionNodeData.tail.pNextOrParent = appendedFirst;\r\n    }\r\n    else {\r\n        projectionNodeData.head = appendedFirst;\r\n    }\r\n    projectionNodeData.tail = appendedLast;\r\n    appendedLast.pNextOrParent = projectionNode;\r\n}\r\n/**\r\n * Inserts previously re-distributed projected nodes. This instruction must be preceded by a call\r\n * to the projectionDef instruction.\r\n *\r\n * @param nodeIndex\r\n * @param localIndex - index under which distribution of projected nodes was memorized\r\n * @param selectorIndex:\r\n *        - 0 when the selector is `*` (or unspecified as this is the default value),\r\n *        - 1 based index of the selector from the {@link projectionDef}\r\n */\r\nfunction projection(nodeIndex, localIndex, selectorIndex, attrs) {\r\n    if (selectorIndex === void 0) { selectorIndex = 0; }\r\n    var node = createLNode(nodeIndex, 1 /* Projection */, null, { head: null, tail: null });\r\n    if (node.tNode == null) {\r\n        node.tNode = createTNode(null, attrs || null, null);\r\n    }\r\n    // `<ng-content>` has no content\r\n    isParent = false;\r\n    var currentParent = node.parent;\r\n    // re-distribution of projectable nodes is memorized on a component's view level\r\n    var componentNode = findComponentHost(currentView);\r\n    var componentLView = (componentNode.data);\r\n    var nodesForSelector = componentLView.data[localIndex][selectorIndex];\r\n    // build the linked list of projected nodes:\r\n    for (var i = 0; i < nodesForSelector.length; i++) {\r\n        var nodeToProject = nodesForSelector[i];\r\n        if (nodeToProject.type === 1 /* Projection */) {\r\n            // Reprojecting a projection -> append the list of previously projected nodes\r\n            var previouslyProjected = nodeToProject.data;\r\n            appendToProjectionNode(node, previouslyProjected.head, previouslyProjected.tail);\r\n        }\r\n        else {\r\n            // Projecting a single node\r\n            appendToProjectionNode(node, nodeToProject, nodeToProject);\r\n        }\r\n    }\r\n    if (canInsertNativeNode(currentParent, currentView)) {\r\n        ngDevMode && assertNodeType(currentParent, 3 /* Element */);\r\n        // process each node in the list of projected nodes:\r\n        var nodeToProject = node.data.head;\r\n        var lastNodeToProject = node.data.tail;\r\n        while (nodeToProject) {\r\n            appendProjectedNode(nodeToProject, currentParent, currentView);\r\n            nodeToProject = nodeToProject === lastNodeToProject ? null : nodeToProject.pNextOrParent;\r\n        }\r\n    }\r\n}\r\n/**\r\n * Given a current view, finds the nearest component's host (LElement).\r\n *\r\n * @param lView LView for which we want a host element node\r\n * @returns The host node\r\n */\r\nfunction findComponentHost(lView) {\r\n    var viewRootLNode = lView.node;\r\n    while (viewRootLNode.type === 2 /* View */) {\r\n        ngDevMode && assertNotNull(lView.parent, 'lView.parent');\r\n        lView = (lView.parent);\r\n        viewRootLNode = lView.node;\r\n    }\r\n    ngDevMode && assertNodeType(viewRootLNode, 3 /* Element */);\r\n    ngDevMode && assertNotNull(viewRootLNode.data, 'node.data');\r\n    return viewRootLNode;\r\n}\r\n/**\r\n * Adds a LView or a LContainer to the end of the current view tree.\r\n *\r\n * This structure will be used to traverse through nested views to remove listeners\r\n * and call onDestroy callbacks.\r\n *\r\n * @param currentView The view where LView or LContainer should be added\r\n * @param state The LView or LContainer to add to the view tree\r\n * @returns The state passed in\r\n */\r\nfunction addToViewTree(currentView, state) {\r\n    currentView.tail ? (currentView.tail.next = state) : (currentView.child = state);\r\n    currentView.tail = state;\r\n    return state;\r\n}\r\n/** If node is an OnPush component, marks its LView dirty. */\r\nfunction markDirtyIfOnPush(node) {\r\n    // Because data flows down the component tree, ancestors do not need to be marked dirty\r\n    if (node.data && !(node.data.flags & 2 /* CheckAlways */)) {\r\n        node.data.flags |= 4 /* Dirty */;\r\n    }\r\n}\r\n/**\r\n * Wraps an event listener so its host view and its ancestor views will be marked dirty\r\n * whenever the event fires. Necessary to support OnPush components.\r\n */\r\nfunction wrapListenerWithDirtyLogic(view, listenerFn) {\r\n    return function (e) {\r\n        markViewDirty(view);\r\n        return listenerFn(e);\r\n    };\r\n}\r\n/**\r\n * Wraps an event listener so its host view and its ancestor views will be marked dirty\r\n * whenever the event fires. Also wraps with preventDefault behavior.\r\n */\r\nfunction wrapListenerWithDirtyAndDefault(view, listenerFn) {\r\n    return function wrapListenerIn_markViewDirty(e) {\r\n        markViewDirty(view);\r\n        if (listenerFn(e) === false) {\r\n            e.preventDefault();\r\n            // Necessary for legacy browsers that don't support preventDefault (e.g. IE)\r\n            e.returnValue = false;\r\n        }\r\n    };\r\n}\r\n/** Marks current view and all ancestors dirty */\r\nfunction markViewDirty(view) {\r\n    var currentView = view;\r\n    while (currentView.parent != null) {\r\n        currentView.flags |= 4 /* Dirty */;\r\n        currentView = currentView.parent;\r\n    }\r\n    currentView.flags |= 4 /* Dirty */;\r\n    ngDevMode && assertNotNull(currentView.context, 'rootContext');\r\n    scheduleTick(currentView.context);\r\n}\r\n/**\r\n * Used to schedule change detection on the whole application.\r\n *\r\n * Unlike `tick`, `scheduleTick` coalesces multiple calls into one change detection run.\r\n * It is usually called indirectly by calling `markDirty` when the view needs to be\r\n * re-rendered.\r\n *\r\n * Typically `scheduleTick` uses `requestAnimationFrame` to coalesce multiple\r\n * `scheduleTick` requests. The scheduling function can be overridden in\r\n * `renderComponent`'s `scheduler` option.\r\n */\r\nfunction scheduleTick(rootContext) {\r\n    if (rootContext.clean == _CLEAN_PROMISE) {\r\n        var res_1;\r\n        rootContext.clean = new Promise(function (r) { return res_1 = r; });\r\n        rootContext.scheduler(function () {\r\n            tick(rootContext.component);\r\n            res_1(null);\r\n            rootContext.clean = _CLEAN_PROMISE;\r\n        });\r\n    }\r\n}\r\n/**\r\n * Used to perform change detection on the whole application.\r\n *\r\n * This is equivalent to `detectChanges`, but invoked on root component. Additionally, `tick`\r\n * executes lifecycle hooks and conditionally checks components based on their\r\n * `ChangeDetectionStrategy` and dirtiness.\r\n *\r\n * The preferred way to trigger change detection is to call `markDirty`. `markDirty` internally\r\n * schedules `tick` using a scheduler in order to coalesce multiple `markDirty` calls into a\r\n * single change detection run. By default, the scheduler is `requestAnimationFrame`, but can\r\n * be changed when calling `renderComponent` and providing the `scheduler` option.\r\n */\r\nfunction tick(component) {\r\n    var rootView = getRootView(component);\r\n    var rootComponent = rootView.context.component;\r\n    var hostNode = _getComponentHostLElementNode(rootComponent);\r\n    ngDevMode && assertNotNull(hostNode.data, 'Component host node should be attached to an LView');\r\n    renderComponentOrTemplate(hostNode, rootView, rootComponent);\r\n}\r\n/**\r\n * Retrieve the root view from any component by walking the parent `LView` until\r\n * reaching the root `LView`.\r\n *\r\n * @param component any component\r\n */\r\nfunction getRootView(component) {\r\n    ngDevMode && assertNotNull(component, 'component');\r\n    var lElementNode = _getComponentHostLElementNode(component);\r\n    var lView = lElementNode.view;\r\n    while (lView.parent) {\r\n        lView = lView.parent;\r\n    }\r\n    return lView;\r\n}\r\n/**\r\n * Synchronously perform change detection on a component (and possibly its sub-components).\r\n *\r\n * This function triggers change detection in a synchronous way on a component. There should\r\n * be very little reason to call this function directly since a preferred way to do change\r\n * detection is to {@link markDirty} the component and wait for the scheduler to call this method\r\n * at some future point in time. This is because a single user action often results in many\r\n * components being invalidated and calling change detection on each component synchronously\r\n * would be inefficient. It is better to wait until all components are marked as dirty and\r\n * then perform single change detection across all of the components\r\n *\r\n * @param component The component which the change detection should be performed on.\r\n */\r\nfunction detectChanges(component) {\r\n    var hostNode = _getComponentHostLElementNode(component);\r\n    ngDevMode && assertNotNull(hostNode.data, 'Component host node should be attached to an LView');\r\n    var componentIndex = hostNode.tNode.flags >> 13;\r\n    var def = hostNode.view.tView.directives[componentIndex];\r\n    detectChangesInternal(hostNode.data, hostNode, def, component);\r\n}\r\n/**\r\n * Checks the change detector and its children, and throws if any changes are detected.\r\n *\r\n * This is used in development mode to verify that running change detection doesn't\r\n * introduce other changes.\r\n */\r\nfunction checkNoChanges(component) {\r\n    checkNoChangesMode = true;\r\n    try {\r\n        detectChanges(component);\r\n    }\r\n    finally {\r\n        checkNoChangesMode = false;\r\n    }\r\n}\r\n/** Checks the view of the component provided. Does not gate on dirty checks or execute doCheck. */\r\nfunction detectChangesInternal(hostView, hostNode, def, component) {\r\n    var oldView = enterView(hostView, hostNode);\r\n    var template = def.template;\r\n    try {\r\n        template(getRenderFlags(hostView), component);\r\n        refreshView();\r\n    }\r\n    finally {\r\n        leaveView(oldView);\r\n    }\r\n}\r\n/**\r\n * Mark the component as dirty (needing change detection).\r\n *\r\n * Marking a component dirty will schedule a change detection on this\r\n * component at some point in the future. Marking an already dirty\r\n * component as dirty is a noop. Only one outstanding change detection\r\n * can be scheduled per component tree. (Two components bootstrapped with\r\n * separate `renderComponent` will have separate schedulers)\r\n *\r\n * When the root component is bootstrapped with `renderComponent`, a scheduler\r\n * can be provided.\r\n *\r\n * @param component Component to mark as dirty.\r\n */\r\nfunction markDirty(component) {\r\n    ngDevMode && assertNotNull(component, 'component');\r\n    var lElementNode = _getComponentHostLElementNode(component);\r\n    markViewDirty(lElementNode.view);\r\n}\r\n/** A special value which designates that a value has not changed. */\r\nvar NO_CHANGE = {};\r\n/**\r\n *  Initializes the binding start index. Will get inlined.\r\n *\r\n *  This function must be called before any binding related function is called\r\n *  (ie `bind()`, `interpolationX()`, `pureFunctionX()`)\r\n */\r\nfunction initBindings() {\r\n    ngDevMode && assertEqual(currentView.bindingStartIndex, -1, 'Binding start index should only be set once, when null');\r\n    ngDevMode && assertEqual(currentView.bindingIndex, -1, 'Binding index should not yet be set ' + currentView.bindingIndex);\r\n    currentView.bindingIndex = currentView.bindingStartIndex = data.length;\r\n}\r\n/**\r\n * Creates a single value binding.\r\n *\r\n * @param value Value to diff\r\n */\r\nfunction bind(value) {\r\n    if (currentView.bindingStartIndex < 0) {\r\n        initBindings();\r\n        return data[currentView.bindingIndex++] = value;\r\n    }\r\n    var changed = value !== NO_CHANGE && isDifferent(data[currentView.bindingIndex], value);\r\n    if (changed) {\r\n        throwErrorIfNoChangesMode(creationMode, checkNoChangesMode, data[currentView.bindingIndex], value);\r\n        data[currentView.bindingIndex] = value;\r\n    }\r\n    currentView.bindingIndex++;\r\n    return changed ? value : NO_CHANGE;\r\n}\r\n/**\r\n * Create interpolation bindings with a variable number of expressions.\r\n *\r\n * If there are 1 to 8 expressions `interpolation1()` to `interpolation8()` should be used instead.\r\n * Those are faster because there is no need to create an array of expressions and iterate over it.\r\n *\r\n * `values`:\r\n * - has static text at even indexes,\r\n * - has evaluated expressions at odd indexes.\r\n *\r\n * Returns the concatenated string when any of the arguments changes, `NO_CHANGE` otherwise.\r\n */\r\nfunction interpolationV(values) {\r\n    ngDevMode && assertLessThan(2, values.length, 'should have at least 3 values');\r\n    ngDevMode && assertEqual(values.length % 2, 1, 'should have an odd number of values');\r\n    var different = false;\r\n    for (var i = 1; i < values.length; i += 2) {\r\n        // Check if bindings (odd indexes) have changed\r\n        bindingUpdated(values[i]) && (different = true);\r\n    }\r\n    if (!different) {\r\n        return NO_CHANGE;\r\n    }\r\n    // Build the updated content\r\n    var content = values[0];\r\n    for (var i = 1; i < values.length; i += 2) {\r\n        content += stringify$1(values[i]) + values[i + 1];\r\n    }\r\n    return content;\r\n}\r\n/**\r\n * Creates an interpolation binding with 1 expression.\r\n *\r\n * @param prefix static value used for concatenation only.\r\n * @param v0 value checked for change.\r\n * @param suffix static value used for concatenation only.\r\n */\r\nfunction interpolation1(prefix, v0, suffix) {\r\n    var different = bindingUpdated(v0);\r\n    return different ? prefix + stringify$1(v0) + suffix : NO_CHANGE;\r\n}\r\n/** Creates an interpolation binding with 2 expressions. */\r\nfunction interpolation2(prefix, v0, i0, v1, suffix) {\r\n    var different = bindingUpdated2(v0, v1);\r\n    return different ? prefix + stringify$1(v0) + i0 + stringify$1(v1) + suffix : NO_CHANGE;\r\n}\r\n/** Creates an interpolation bindings with 3 expressions. */\r\nfunction interpolation3(prefix, v0, i0, v1, i1, v2, suffix) {\r\n    var different = bindingUpdated2(v0, v1);\r\n    different = bindingUpdated(v2) || different;\r\n    return different ? prefix + stringify$1(v0) + i0 + stringify$1(v1) + i1 + stringify$1(v2) + suffix :\r\n        NO_CHANGE;\r\n}\r\n/** Create an interpolation binding with 4 expressions. */\r\nfunction interpolation4(prefix, v0, i0, v1, i1, v2, i2, v3, suffix) {\r\n    var different = bindingUpdated4(v0, v1, v2, v3);\r\n    return different ?\r\n        prefix + stringify$1(v0) + i0 + stringify$1(v1) + i1 + stringify$1(v2) + i2 + stringify$1(v3) +\r\n            suffix :\r\n        NO_CHANGE;\r\n}\r\n/** Creates an interpolation binding with 5 expressions. */\r\nfunction interpolation5(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix) {\r\n    var different = bindingUpdated4(v0, v1, v2, v3);\r\n    different = bindingUpdated(v4) || different;\r\n    return different ?\r\n        prefix + stringify$1(v0) + i0 + stringify$1(v1) + i1 + stringify$1(v2) + i2 + stringify$1(v3) + i3 +\r\n            stringify$1(v4) + suffix :\r\n        NO_CHANGE;\r\n}\r\n/** Creates an interpolation binding with 6 expressions. */\r\nfunction interpolation6(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix) {\r\n    var different = bindingUpdated4(v0, v1, v2, v3);\r\n    different = bindingUpdated2(v4, v5) || different;\r\n    return different ?\r\n        prefix + stringify$1(v0) + i0 + stringify$1(v1) + i1 + stringify$1(v2) + i2 + stringify$1(v3) + i3 +\r\n            stringify$1(v4) + i4 + stringify$1(v5) + suffix :\r\n        NO_CHANGE;\r\n}\r\n/** Creates an interpolation binding with 7 expressions. */\r\nfunction interpolation7(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix) {\r\n    var different = bindingUpdated4(v0, v1, v2, v3);\r\n    different = bindingUpdated2(v4, v5) || different;\r\n    different = bindingUpdated(v6) || different;\r\n    return different ?\r\n        prefix + stringify$1(v0) + i0 + stringify$1(v1) + i1 + stringify$1(v2) + i2 + stringify$1(v3) + i3 +\r\n            stringify$1(v4) + i4 + stringify$1(v5) + i5 + stringify$1(v6) + suffix :\r\n        NO_CHANGE;\r\n}\r\n/** Creates an interpolation binding with 8 expressions. */\r\nfunction interpolation8(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix) {\r\n    var different = bindingUpdated4(v0, v1, v2, v3);\r\n    different = bindingUpdated4(v4, v5, v6, v7) || different;\r\n    return different ?\r\n        prefix + stringify$1(v0) + i0 + stringify$1(v1) + i1 + stringify$1(v2) + i2 + stringify$1(v3) + i3 +\r\n            stringify$1(v4) + i4 + stringify$1(v5) + i5 + stringify$1(v6) + i6 + stringify$1(v7) + suffix :\r\n        NO_CHANGE;\r\n}\r\n/** Store a value in the `data` at a given `index`. */\r\nfunction store(index, value) {\r\n    // We don't store any static data for local variables, so the first time\r\n    // we see the template, we should store as null to avoid a sparse array\r\n    if (index >= tData.length) {\r\n        tData[index] = null;\r\n    }\r\n    data[index] = value;\r\n}\r\n/** Retrieves a value from the `data`. */\r\nfunction load(index) {\r\n    ngDevMode && assertDataInRange(index);\r\n    return data[index];\r\n}\r\n/** Retrieves a value from the `directives` array. */\r\nfunction loadDirective(index) {\r\n    ngDevMode && assertNotNull(directives, 'Directives array should be defined if reading a dir.');\r\n    ngDevMode && assertDataInRange(index, (directives));\r\n    return directives[index];\r\n}\r\n/** Gets the current binding value and increments the binding index. */\r\nfunction consumeBinding() {\r\n    ngDevMode && assertDataInRange(currentView.bindingIndex);\r\n    ngDevMode &&\r\n        assertNotEqual(data[currentView.bindingIndex], NO_CHANGE, 'Stored value should never be NO_CHANGE.');\r\n    return data[currentView.bindingIndex++];\r\n}\r\n/** Updates binding if changed, then returns whether it was updated. */\r\nfunction bindingUpdated(value) {\r\n    ngDevMode && assertNotEqual(value, NO_CHANGE, 'Incoming value should never be NO_CHANGE.');\r\n    if (currentView.bindingStartIndex < 0) {\r\n        initBindings();\r\n    }\r\n    else if (isDifferent(data[currentView.bindingIndex], value)) {\r\n        throwErrorIfNoChangesMode(creationMode, checkNoChangesMode, data[currentView.bindingIndex], value);\r\n    }\r\n    else {\r\n        currentView.bindingIndex++;\r\n        return false;\r\n    }\r\n    data[currentView.bindingIndex++] = value;\r\n    return true;\r\n}\r\n/** Updates binding if changed, then returns the latest value. */\r\nfunction checkAndUpdateBinding$1(value) {\r\n    bindingUpdated(value);\r\n    return value;\r\n}\r\n/** Updates 2 bindings if changed, then returns whether either was updated. */\r\nfunction bindingUpdated2(exp1, exp2) {\r\n    var different = bindingUpdated(exp1);\r\n    return bindingUpdated(exp2) || different;\r\n}\r\n/** Updates 4 bindings if changed, then returns whether any was updated. */\r\nfunction bindingUpdated4(exp1, exp2, exp3, exp4) {\r\n    var different = bindingUpdated2(exp1, exp2);\r\n    return bindingUpdated2(exp3, exp4) || different;\r\n}\r\nfunction getTView() {\r\n    return currentView.tView;\r\n}\r\nfunction getDirectiveInstance(instanceOrArray) {\r\n    // Directives with content queries store an array in directives[directiveIndex]\r\n    // with the instance as the first index\r\n    return Array.isArray(instanceOrArray) ? instanceOrArray[0] : instanceOrArray;\r\n}\r\nfunction assertPreviousIsParent() {\r\n    assertEqual(isParent, true, 'previousOrParentNode should be a parent');\r\n}\r\nfunction assertHasParent() {\r\n    assertNotNull(previousOrParentNode.parent, 'previousOrParentNode should have a parent');\r\n}\r\nfunction assertDataInRange(index, arr) {\r\n    if (arr == null)\r\n        arr = data;\r\n    assertLessThan(index, arr ? arr.length : 0, 'index expected to be a valid data index');\r\n}\r\nfunction assertDataNext(index, arr) {\r\n    if (arr == null)\r\n        arr = data;\r\n    assertEqual(arr.length, index, \"index \" + index + \" expected to be at the end of arr (length \" + arr.length + \")\");\r\n}\r\nfunction _getComponentHostLElementNode(component) {\r\n    ngDevMode && assertNotNull(component, 'expecting component got null');\r\n    var lElementNode = component[NG_HOST_SYMBOL];\r\n    ngDevMode && assertNotNull(component, 'object is not a component');\r\n    return lElementNode;\r\n}\r\nvar CLEAN_PROMISE = _CLEAN_PROMISE;\r\nvar ROOT_DIRECTIVE_INDICES = _ROOT_DIRECTIVE_INDICES;\r\n\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nvar ViewRef$1 = /** @class */ (function () {\r\n    function ViewRef(_view, context) {\r\n        this._view = _view;\r\n        this.context = (context);\r\n    }\r\n    /** @internal */\r\n    /** @internal */\r\n    ViewRef.prototype._setComponentContext = /** @internal */\r\n    function (view, context) {\r\n        this._view = view;\r\n        this.context = context;\r\n    };\r\n    ViewRef.prototype.destroy = function () {  };\r\n    ViewRef.prototype.onDestroy = function (callback) {  };\r\n    /**\r\n     * Marks a view and all of its ancestors dirty.\r\n     *\r\n     * It also triggers change detection by calling `scheduleTick` internally, which coalesces\r\n     * multiple `markForCheck` calls to into one change detection run.\r\n     *\r\n     * This can be used to ensure an {@link ChangeDetectionStrategy#OnPush OnPush} component is\r\n     * checked when it needs to be re-rendered but the two normal triggers haven't marked it\r\n     * dirty (i.e. inputs haven't changed and events haven't fired in the view).\r\n     *\r\n     * <!-- TODO: Add a link to a chapter on OnPush components -->\r\n     *\r\n     * ### Example ([live demo](https://stackblitz.com/edit/angular-kx7rrw))\r\n     *\r\n     * ```typescript\r\n     * @Component({\r\n     *   selector: 'my-app',\r\n     *   template: `Number of ticks: {{numberOfTicks}}`\r\n     *   changeDetection: ChangeDetectionStrategy.OnPush,\r\n     * })\r\n     * class AppComponent {\r\n     *   numberOfTicks = 0;\r\n     *\r\n     *   constructor(private ref: ChangeDetectorRef) {\r\n     *     setInterval(() => {\r\n     *       this.numberOfTicks++;\r\n     *       // the following is required, otherwise the view will not be updated\r\n     *       this.ref.markForCheck();\r\n     *     }, 1000);\r\n     *   }\r\n     * }\r\n     * ```\r\n     */\r\n    /**\r\n       * Marks a view and all of its ancestors dirty.\r\n       *\r\n       * It also triggers change detection by calling `scheduleTick` internally, which coalesces\r\n       * multiple `markForCheck` calls to into one change detection run.\r\n       *\r\n       * This can be used to ensure an {@link ChangeDetectionStrategy#OnPush OnPush} component is\r\n       * checked when it needs to be re-rendered but the two normal triggers haven't marked it\r\n       * dirty (i.e. inputs haven't changed and events haven't fired in the view).\r\n       *\r\n       * <!-- TODO: Add a link to a chapter on OnPush components -->\r\n       *\r\n       * ### Example ([live demo](https://stackblitz.com/edit/angular-kx7rrw))\r\n       *\r\n       * ```typescript\r\n       * @Component({\r\n       *   selector: 'my-app',\r\n       *   template: `Number of ticks: {{numberOfTicks}}`\r\n       *   changeDetection: ChangeDetectionStrategy.OnPush,\r\n       * })\r\n       * class AppComponent {\r\n       *   numberOfTicks = 0;\r\n       *\r\n       *   constructor(private ref: ChangeDetectorRef) {\r\n       *     setInterval(() => {\r\n       *       this.numberOfTicks++;\r\n       *       // the following is required, otherwise the view will not be updated\r\n       *       this.ref.markForCheck();\r\n       *     }, 1000);\r\n       *   }\r\n       * }\r\n       * ```\r\n       */\r\n    ViewRef.prototype.markForCheck = /**\r\n       * Marks a view and all of its ancestors dirty.\r\n       *\r\n       * It also triggers change detection by calling `scheduleTick` internally, which coalesces\r\n       * multiple `markForCheck` calls to into one change detection run.\r\n       *\r\n       * This can be used to ensure an {@link ChangeDetectionStrategy#OnPush OnPush} component is\r\n       * checked when it needs to be re-rendered but the two normal triggers haven't marked it\r\n       * dirty (i.e. inputs haven't changed and events haven't fired in the view).\r\n       *\r\n       * <!-- TODO: Add a link to a chapter on OnPush components -->\r\n       *\r\n       * ### Example ([live demo](https://stackblitz.com/edit/angular-kx7rrw))\r\n       *\r\n       * ```typescript\r\n       * @Component({\r\n       *   selector: 'my-app',\r\n       *   template: `Number of ticks: {{numberOfTicks}}`\r\n       *   changeDetection: ChangeDetectionStrategy.OnPush,\r\n       * })\r\n       * class AppComponent {\r\n       *   numberOfTicks = 0;\r\n       *\r\n       *   constructor(private ref: ChangeDetectorRef) {\r\n       *     setInterval(() => {\r\n       *       this.numberOfTicks++;\r\n       *       // the following is required, otherwise the view will not be updated\r\n       *       this.ref.markForCheck();\r\n       *     }, 1000);\r\n       *   }\r\n       * }\r\n       * ```\r\n       */\r\n    function () { markViewDirty(this._view); };\r\n    /**\r\n     * Detaches the view from the change detection tree.\r\n     *\r\n     * Detached views will not be checked during change detection runs until they are\r\n     * re-attached, even if they are dirty. `detach` can be used in combination with\r\n     * {@link ChangeDetectorRef#detectChanges detectChanges} to implement local change\r\n     * detection checks.\r\n     *\r\n     * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->\r\n     * <!-- TODO: Add a live demo once ref.detectChanges is merged into master -->\r\n     *\r\n     * ### Example\r\n     *\r\n     * The following example defines a component with a large list of readonly data.\r\n     * Imagine the data changes constantly, many times per second. For performance reasons,\r\n     * we want to check and update the list every five seconds. We can do that by detaching\r\n     * the component's change detector and doing a local check every five seconds.\r\n     *\r\n     * ```typescript\r\n     * class DataProvider {\r\n     *   // in a real application the returned data will be different every time\r\n     *   get data() {\r\n     *     return [1,2,3,4,5];\r\n     *   }\r\n     * }\r\n     *\r\n     * @Component({\r\n     *   selector: 'giant-list',\r\n     *   template: `\r\n     *     <li *ngFor=\"let d of dataProvider.data\">Data {{d}}</li>\r\n     *   `,\r\n     * })\r\n     * class GiantList {\r\n     *   constructor(private ref: ChangeDetectorRef, private dataProvider: DataProvider) {\r\n     *     ref.detach();\r\n     *     setInterval(() => {\r\n     *       this.ref.detectChanges();\r\n     *     }, 5000);\r\n     *   }\r\n     * }\r\n     *\r\n     * @Component({\r\n     *   selector: 'app',\r\n     *   providers: [DataProvider],\r\n     *   template: `\r\n     *     <giant-list><giant-list>\r\n     *   `,\r\n     * })\r\n     * class App {\r\n     * }\r\n     * ```\r\n     */\r\n    /**\r\n       * Detaches the view from the change detection tree.\r\n       *\r\n       * Detached views will not be checked during change detection runs until they are\r\n       * re-attached, even if they are dirty. `detach` can be used in combination with\r\n       * {@link ChangeDetectorRef#detectChanges detectChanges} to implement local change\r\n       * detection checks.\r\n       *\r\n       * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->\r\n       * <!-- TODO: Add a live demo once ref.detectChanges is merged into master -->\r\n       *\r\n       * ### Example\r\n       *\r\n       * The following example defines a component with a large list of readonly data.\r\n       * Imagine the data changes constantly, many times per second. For performance reasons,\r\n       * we want to check and update the list every five seconds. We can do that by detaching\r\n       * the component's change detector and doing a local check every five seconds.\r\n       *\r\n       * ```typescript\r\n       * class DataProvider {\r\n       *   // in a real application the returned data will be different every time\r\n       *   get data() {\r\n       *     return [1,2,3,4,5];\r\n       *   }\r\n       * }\r\n       *\r\n       * @Component({\r\n       *   selector: 'giant-list',\r\n       *   template: `\r\n       *     <li *ngFor=\"let d of dataProvider.data\">Data {{d}}</li>\r\n       *   `,\r\n       * })\r\n       * class GiantList {\r\n       *   constructor(private ref: ChangeDetectorRef, private dataProvider: DataProvider) {\r\n       *     ref.detach();\r\n       *     setInterval(() => {\r\n       *       this.ref.detectChanges();\r\n       *     }, 5000);\r\n       *   }\r\n       * }\r\n       *\r\n       * @Component({\r\n       *   selector: 'app',\r\n       *   providers: [DataProvider],\r\n       *   template: `\r\n       *     <giant-list><giant-list>\r\n       *   `,\r\n       * })\r\n       * class App {\r\n       * }\r\n       * ```\r\n       */\r\n    ViewRef.prototype.detach = /**\r\n       * Detaches the view from the change detection tree.\r\n       *\r\n       * Detached views will not be checked during change detection runs until they are\r\n       * re-attached, even if they are dirty. `detach` can be used in combination with\r\n       * {@link ChangeDetectorRef#detectChanges detectChanges} to implement local change\r\n       * detection checks.\r\n       *\r\n       * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->\r\n       * <!-- TODO: Add a live demo once ref.detectChanges is merged into master -->\r\n       *\r\n       * ### Example\r\n       *\r\n       * The following example defines a component with a large list of readonly data.\r\n       * Imagine the data changes constantly, many times per second. For performance reasons,\r\n       * we want to check and update the list every five seconds. We can do that by detaching\r\n       * the component's change detector and doing a local check every five seconds.\r\n       *\r\n       * ```typescript\r\n       * class DataProvider {\r\n       *   // in a real application the returned data will be different every time\r\n       *   get data() {\r\n       *     return [1,2,3,4,5];\r\n       *   }\r\n       * }\r\n       *\r\n       * @Component({\r\n       *   selector: 'giant-list',\r\n       *   template: `\r\n       *     <li *ngFor=\"let d of dataProvider.data\">Data {{d}}</li>\r\n       *   `,\r\n       * })\r\n       * class GiantList {\r\n       *   constructor(private ref: ChangeDetectorRef, private dataProvider: DataProvider) {\r\n       *     ref.detach();\r\n       *     setInterval(() => {\r\n       *       this.ref.detectChanges();\r\n       *     }, 5000);\r\n       *   }\r\n       * }\r\n       *\r\n       * @Component({\r\n       *   selector: 'app',\r\n       *   providers: [DataProvider],\r\n       *   template: `\r\n       *     <giant-list><giant-list>\r\n       *   `,\r\n       * })\r\n       * class App {\r\n       * }\r\n       * ```\r\n       */\r\n    function () { this._view.flags &= ~8 /* Attached */; };\r\n    /**\r\n     * Re-attaches a view to the change detection tree.\r\n     *\r\n     * This can be used to re-attach views that were previously detached from the tree\r\n     * using {@link ChangeDetectorRef#detach detach}. Views are attached to the tree by default.\r\n     *\r\n     * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->\r\n     *\r\n     * ### Example ([live demo](https://stackblitz.com/edit/angular-ymgsxw))\r\n     *\r\n     * The following example creates a component displaying `live` data. The component will detach\r\n     * its change detector from the main change detector tree when the component's live property\r\n     * is set to false.\r\n     *\r\n     * ```typescript\r\n     * class DataProvider {\r\n     *   data = 1;\r\n     *\r\n     *   constructor() {\r\n     *     setInterval(() => {\r\n     *       this.data = this.data * 2;\r\n     *     }, 500);\r\n     *   }\r\n     * }\r\n     *\r\n     * @Component({\r\n     *   selector: 'live-data',\r\n     *   inputs: ['live'],\r\n     *   template: 'Data: {{dataProvider.data}}'\r\n     * })\r\n     * class LiveData {\r\n     *   constructor(private ref: ChangeDetectorRef, private dataProvider: DataProvider) {}\r\n     *\r\n     *   set live(value) {\r\n     *     if (value) {\r\n     *       this.ref.reattach();\r\n     *     } else {\r\n     *       this.ref.detach();\r\n     *     }\r\n     *   }\r\n     * }\r\n     *\r\n     * @Component({\r\n     *   selector: 'my-app',\r\n     *   providers: [DataProvider],\r\n     *   template: `\r\n     *     Live Update: <input type=\"checkbox\" [(ngModel)]=\"live\">\r\n     *     <live-data [live]=\"live\"><live-data>\r\n     *   `,\r\n     * })\r\n     * class AppComponent {\r\n     *   live = true;\r\n     * }\r\n     * ```\r\n     */\r\n    /**\r\n       * Re-attaches a view to the change detection tree.\r\n       *\r\n       * This can be used to re-attach views that were previously detached from the tree\r\n       * using {@link ChangeDetectorRef#detach detach}. Views are attached to the tree by default.\r\n       *\r\n       * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->\r\n       *\r\n       * ### Example ([live demo](https://stackblitz.com/edit/angular-ymgsxw))\r\n       *\r\n       * The following example creates a component displaying `live` data. The component will detach\r\n       * its change detector from the main change detector tree when the component's live property\r\n       * is set to false.\r\n       *\r\n       * ```typescript\r\n       * class DataProvider {\r\n       *   data = 1;\r\n       *\r\n       *   constructor() {\r\n       *     setInterval(() => {\r\n       *       this.data = this.data * 2;\r\n       *     }, 500);\r\n       *   }\r\n       * }\r\n       *\r\n       * @Component({\r\n       *   selector: 'live-data',\r\n       *   inputs: ['live'],\r\n       *   template: 'Data: {{dataProvider.data}}'\r\n       * })\r\n       * class LiveData {\r\n       *   constructor(private ref: ChangeDetectorRef, private dataProvider: DataProvider) {}\r\n       *\r\n       *   set live(value) {\r\n       *     if (value) {\r\n       *       this.ref.reattach();\r\n       *     } else {\r\n       *       this.ref.detach();\r\n       *     }\r\n       *   }\r\n       * }\r\n       *\r\n       * @Component({\r\n       *   selector: 'my-app',\r\n       *   providers: [DataProvider],\r\n       *   template: `\r\n       *     Live Update: <input type=\"checkbox\" [(ngModel)]=\"live\">\r\n       *     <live-data [live]=\"live\"><live-data>\r\n       *   `,\r\n       * })\r\n       * class AppComponent {\r\n       *   live = true;\r\n       * }\r\n       * ```\r\n       */\r\n    ViewRef.prototype.reattach = /**\r\n       * Re-attaches a view to the change detection tree.\r\n       *\r\n       * This can be used to re-attach views that were previously detached from the tree\r\n       * using {@link ChangeDetectorRef#detach detach}. Views are attached to the tree by default.\r\n       *\r\n       * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->\r\n       *\r\n       * ### Example ([live demo](https://stackblitz.com/edit/angular-ymgsxw))\r\n       *\r\n       * The following example creates a component displaying `live` data. The component will detach\r\n       * its change detector from the main change detector tree when the component's live property\r\n       * is set to false.\r\n       *\r\n       * ```typescript\r\n       * class DataProvider {\r\n       *   data = 1;\r\n       *\r\n       *   constructor() {\r\n       *     setInterval(() => {\r\n       *       this.data = this.data * 2;\r\n       *     }, 500);\r\n       *   }\r\n       * }\r\n       *\r\n       * @Component({\r\n       *   selector: 'live-data',\r\n       *   inputs: ['live'],\r\n       *   template: 'Data: {{dataProvider.data}}'\r\n       * })\r\n       * class LiveData {\r\n       *   constructor(private ref: ChangeDetectorRef, private dataProvider: DataProvider) {}\r\n       *\r\n       *   set live(value) {\r\n       *     if (value) {\r\n       *       this.ref.reattach();\r\n       *     } else {\r\n       *       this.ref.detach();\r\n       *     }\r\n       *   }\r\n       * }\r\n       *\r\n       * @Component({\r\n       *   selector: 'my-app',\r\n       *   providers: [DataProvider],\r\n       *   template: `\r\n       *     Live Update: <input type=\"checkbox\" [(ngModel)]=\"live\">\r\n       *     <live-data [live]=\"live\"><live-data>\r\n       *   `,\r\n       * })\r\n       * class AppComponent {\r\n       *   live = true;\r\n       * }\r\n       * ```\r\n       */\r\n    function () { this._view.flags |= 8 /* Attached */; };\r\n    /**\r\n     * Checks the view and its children.\r\n     *\r\n     * This can also be used in combination with {@link ChangeDetectorRef#detach detach} to implement\r\n     * local change detection checks.\r\n     *\r\n     * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->\r\n     * <!-- TODO: Add a live demo once ref.detectChanges is merged into master -->\r\n     *\r\n     * ### Example\r\n     *\r\n     * The following example defines a component with a large list of readonly data.\r\n     * Imagine, the data changes constantly, many times per second. For performance reasons,\r\n     * we want to check and update the list every five seconds.\r\n     *\r\n     * We can do that by detaching the component's change detector and doing a local change detection\r\n     * check every five seconds.\r\n     *\r\n     * See {@link ChangeDetectorRef#detach detach} for more information.\r\n     */\r\n    /**\r\n       * Checks the view and its children.\r\n       *\r\n       * This can also be used in combination with {@link ChangeDetectorRef#detach detach} to implement\r\n       * local change detection checks.\r\n       *\r\n       * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->\r\n       * <!-- TODO: Add a live demo once ref.detectChanges is merged into master -->\r\n       *\r\n       * ### Example\r\n       *\r\n       * The following example defines a component with a large list of readonly data.\r\n       * Imagine, the data changes constantly, many times per second. For performance reasons,\r\n       * we want to check and update the list every five seconds.\r\n       *\r\n       * We can do that by detaching the component's change detector and doing a local change detection\r\n       * check every five seconds.\r\n       *\r\n       * See {@link ChangeDetectorRef#detach detach} for more information.\r\n       */\r\n    ViewRef.prototype.detectChanges = /**\r\n       * Checks the view and its children.\r\n       *\r\n       * This can also be used in combination with {@link ChangeDetectorRef#detach detach} to implement\r\n       * local change detection checks.\r\n       *\r\n       * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->\r\n       * <!-- TODO: Add a live demo once ref.detectChanges is merged into master -->\r\n       *\r\n       * ### Example\r\n       *\r\n       * The following example defines a component with a large list of readonly data.\r\n       * Imagine, the data changes constantly, many times per second. For performance reasons,\r\n       * we want to check and update the list every five seconds.\r\n       *\r\n       * We can do that by detaching the component's change detector and doing a local change detection\r\n       * check every five seconds.\r\n       *\r\n       * See {@link ChangeDetectorRef#detach detach} for more information.\r\n       */\r\n    function () { detectChanges(this.context); };\r\n    /**\r\n     * Checks the change detector and its children, and throws if any changes are detected.\r\n     *\r\n     * This is used in development mode to verify that running change detection doesn't\r\n     * introduce other changes.\r\n     */\r\n    /**\r\n       * Checks the change detector and its children, and throws if any changes are detected.\r\n       *\r\n       * This is used in development mode to verify that running change detection doesn't\r\n       * introduce other changes.\r\n       */\r\n    ViewRef.prototype.checkNoChanges = /**\r\n       * Checks the change detector and its children, and throws if any changes are detected.\r\n       *\r\n       * This is used in development mode to verify that running change detection doesn't\r\n       * introduce other changes.\r\n       */\r\n    function () { checkNoChanges(this.context); };\r\n    return ViewRef;\r\n}());\r\nvar EmbeddedViewRef$1 = /** @class */ (function (_super) {\r\n    __extends(EmbeddedViewRef, _super);\r\n    function EmbeddedViewRef(viewNode, template, context) {\r\n        var _this = _super.call(this, viewNode.data, context) || this;\r\n        _this._lViewNode = viewNode;\r\n        return _this;\r\n    }\r\n    return EmbeddedViewRef;\r\n}(ViewRef$1));\r\n/**\r\n * Creates a ViewRef bundled with destroy functionality.\r\n *\r\n * @param context The context for this view\r\n * @returns The ViewRef\r\n */\r\nfunction createViewRef(view, context) {\r\n    // TODO: add detectChanges back in when implementing ChangeDetectorRef.detectChanges\r\n    return addDestroyable(new ViewRef$1((view), context));\r\n}\r\n/**\r\n * Decorates an object with destroy logic (implementing the DestroyRef interface)\r\n * and returns the enhanced object.\r\n *\r\n * @param obj The object to decorate\r\n * @returns The object with destroy logic\r\n */\r\nfunction addDestroyable(obj) {\r\n    var destroyFn = null;\r\n    obj.destroyed = false;\r\n    obj.destroy = function () {\r\n        destroyFn && destroyFn.forEach(function (fn) { return fn(); });\r\n        this.destroyed = true;\r\n    };\r\n    obj.onDestroy = function (fn) { return (destroyFn || (destroyFn = [])).push(fn); };\r\n    return obj;\r\n}\r\n\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * Bootstraps a component, then creates and returns a `ComponentRef` for that component.\r\n *\r\n * @param componentType Component to bootstrap\r\n * @param options Optional parameters which control bootstrapping\r\n */\r\n\r\n// TODO: A hack to not pull in the NullInjector from @angular/core.\r\n\r\n/**\r\n * Bootstraps a Component into an existing host element and returns an instance\r\n * of the component.\r\n *\r\n * Use this function to bootstrap a component into the DOM tree. Each invocation\r\n * of this function will create a separate tree of components, injectors and\r\n * change detection cycles and lifetimes. To dynamically insert a new component\r\n * into an existing tree such that it shares the same injection, change detection\r\n * and object lifetime, use {@link ViewContainer#createComponent}.\r\n *\r\n * @param componentType Component to bootstrap\r\n * @param options Optional parameters which control bootstrapping\r\n */\r\nfunction renderComponent(componentType /* Type as workaround for: Microsoft/TypeScript/issues/4881 */, opts) {\r\n    if (opts === void 0) { opts = {}; }\r\n    ngDevMode && assertComponentType(componentType);\r\n    var rendererFactory = opts.rendererFactory || domRendererFactory3;\r\n    var componentDef = componentType.ngComponentDef;\r\n    if (componentDef.type != componentType)\r\n        componentDef.type = componentType;\r\n    var component;\r\n    // The first index of the first selector is the tag name.\r\n    var componentTag = componentDef.selectors[0][0];\r\n    var hostNode = locateHostElement(rendererFactory, opts.host || componentTag);\r\n    var rootContext = {\r\n        // Incomplete initialization due to circular reference.\r\n        component: (null),\r\n        scheduler: opts.scheduler || requestAnimationFrame.bind(window),\r\n        clean: CLEAN_PROMISE,\r\n    };\r\n    var rootView = createLView(-1, rendererFactory.createRenderer(hostNode, componentDef.rendererType), createTView(null, null), null, rootContext, componentDef.onPush ? 4 /* Dirty */ : 2 /* CheckAlways */);\r\n    rootView.injector = opts.injector || null;\r\n    var oldView = enterView(rootView, (null));\r\n    var elementNode;\r\n    try {\r\n        if (rendererFactory.begin)\r\n            rendererFactory.begin();\r\n        // Create element node at index 0 in data array\r\n        elementNode = hostElement(componentTag, hostNode, componentDef);\r\n        // Create directive instance with factory() and store at index 0 in directives array\r\n        component = rootContext.component = baseDirectiveCreate(0, componentDef.factory(), componentDef);\r\n        initChangeDetectorIfExisting(elementNode.nodeInjector, component, (elementNode.data));\r\n        opts.hostFeatures && opts.hostFeatures.forEach(function (feature) { return feature(component, componentDef); });\r\n        executeInitAndContentHooks();\r\n        setHostBindings(ROOT_DIRECTIVE_INDICES);\r\n        detectChangesInternal(elementNode.data, elementNode, componentDef, component);\r\n    }\r\n    finally {\r\n        leaveView(oldView);\r\n        if (rendererFactory.end)\r\n            rendererFactory.end();\r\n    }\r\n    return component;\r\n}\r\n/**\r\n * Used to enable lifecycle hooks on the root component.\r\n *\r\n * Include this feature when calling `renderComponent` if the root component\r\n * you are rendering has lifecycle hooks defined. Otherwise, the hooks won't\r\n * be called properly.\r\n *\r\n * Example:\r\n *\r\n * ```\r\n * renderComponent(AppComponent, {features: [RootLifecycleHooks]});\r\n * ```\r\n */\r\n\r\n/**\r\n * Retrieve the root context for any component by walking the parent `LView` until\r\n * reaching the root `LView`.\r\n *\r\n * @param component any component\r\n */\r\nfunction getRootContext(component) {\r\n    var rootContext = getRootView(component).context;\r\n    ngDevMode && assertNotNull(rootContext, 'rootContext');\r\n    return rootContext;\r\n}\r\n/**\r\n * Retrieve the host element of the component.\r\n *\r\n * Use this function to retrieve the host element of the component. The host\r\n * element is the element which the component is associated with.\r\n *\r\n * @param component Component for which the host element should be retrieved.\r\n */\r\n\r\n/**\r\n * Retrieves the rendered text for a given component.\r\n *\r\n * This function retrieves the host element of a component and\r\n * and then returns the `textContent` for that element. This implies\r\n * that the text returned will include re-projected content of\r\n * the component as well.\r\n *\r\n * @param component The component to return the content text for.\r\n */\r\n\r\n/**\r\n * Wait on component until it is rendered.\r\n *\r\n * This function returns a `Promise` which is resolved when the component's\r\n * change detection is executed. This is determined by finding the scheduler\r\n * associated with the `component`'s render tree and waiting until the scheduler\r\n * flushes. If nothing is scheduled, the function returns a resolved promise.\r\n *\r\n * Example:\r\n * ```\r\n * await whenRendered(myComponent);\r\n * ```\r\n *\r\n * @param component Component to wait upon\r\n * @returns Promise which resolves when the component is rendered.\r\n */\r\nfunction whenRendered(component) {\r\n    return getRootContext(component).clean;\r\n}\r\n\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * If a directive is diPublic, bloomAdd sets a property on the instance with this constant as\r\n * the key and the directive's unique ID as the value. This allows us to map directives to their\r\n * bloom filter bit for DI.\r\n */\r\nvar NG_ELEMENT_ID = '__NG_ELEMENT_ID__';\r\n/**\r\n * The number of slots in each bloom filter (used by DI). The larger this number, the fewer\r\n * directives that will share slots, and thus, the fewer false positives when checking for\r\n * the existence of a directive.\r\n */\r\nvar BLOOM_SIZE = 256;\r\n/** Counter used to generate unique IDs for directives. */\r\nvar nextNgElementId = 0;\r\n/**\r\n * Registers this directive as present in its node's injector by flipping the directive's\r\n * corresponding bit in the injector's bloom filter.\r\n *\r\n * @param injector The node injector in which the directive should be registered\r\n * @param type The directive to register\r\n */\r\nfunction bloomAdd(injector, type) {\r\n    var id = type[NG_ELEMENT_ID];\r\n    // Set a unique ID on the directive type, so if something tries to inject the directive,\r\n    // we can easily retrieve the ID and hash it into the bloom bit that should be checked.\r\n    if (id == null) {\r\n        id = type[NG_ELEMENT_ID] = nextNgElementId++;\r\n    }\r\n    // We only have BLOOM_SIZE (256) slots in our bloom filter (8 buckets * 32 bits each),\r\n    // so all unique IDs must be modulo-ed into a number from 0 - 255 to fit into the filter.\r\n    // This means that after 255, some directives will share slots, leading to some false positives\r\n    // when checking for a directive's presence.\r\n    var bloomBit = id % BLOOM_SIZE;\r\n    // Create a mask that targets the specific bit associated with the directive.\r\n    // JS bit operations are 32 bits, so this will be a number between 2^0 and 2^31, corresponding\r\n    // to bit positions 0 - 31 in a 32 bit integer.\r\n    var mask = 1 << bloomBit;\r\n    // Use the raw bloomBit number to determine which bloom filter bucket we should check\r\n    // e.g: bf0 = [0 - 31], bf1 = [32 - 63], bf2 = [64 - 95], bf3 = [96 - 127], etc\r\n    if (bloomBit < 128) {\r\n        // Then use the mask to flip on the bit (0-31) associated with the directive in that bucket\r\n        bloomBit < 64 ? (bloomBit < 32 ? (injector.bf0 |= mask) : (injector.bf1 |= mask)) :\r\n            (bloomBit < 96 ? (injector.bf2 |= mask) : (injector.bf3 |= mask));\r\n    }\r\n    else {\r\n        bloomBit < 192 ? (bloomBit < 160 ? (injector.bf4 |= mask) : (injector.bf5 |= mask)) :\r\n            (bloomBit < 224 ? (injector.bf6 |= mask) : (injector.bf7 |= mask));\r\n    }\r\n}\r\nfunction getOrCreateNodeInjector() {\r\n    ngDevMode && assertPreviousIsParent();\r\n    return getOrCreateNodeInjectorForNode(getPreviousOrParentNode());\r\n}\r\n/**\r\n * Creates (or gets an existing) injector for a given element or container.\r\n *\r\n * @param node for which an injector should be retrieved / created.\r\n * @returns Node injector\r\n */\r\nfunction getOrCreateNodeInjectorForNode(node) {\r\n    var nodeInjector = node.nodeInjector;\r\n    var parentInjector = node.parent && node.parent.nodeInjector;\r\n    if (nodeInjector != parentInjector) {\r\n        return nodeInjector;\r\n    }\r\n    return node.nodeInjector = {\r\n        parent: parentInjector,\r\n        node: node,\r\n        bf0: 0,\r\n        bf1: 0,\r\n        bf2: 0,\r\n        bf3: 0,\r\n        bf4: 0,\r\n        bf5: 0,\r\n        bf6: 0,\r\n        bf7: 0,\r\n        cbf0: parentInjector == null ? 0 : parentInjector.cbf0 | parentInjector.bf0,\r\n        cbf1: parentInjector == null ? 0 : parentInjector.cbf1 | parentInjector.bf1,\r\n        cbf2: parentInjector == null ? 0 : parentInjector.cbf2 | parentInjector.bf2,\r\n        cbf3: parentInjector == null ? 0 : parentInjector.cbf3 | parentInjector.bf3,\r\n        cbf4: parentInjector == null ? 0 : parentInjector.cbf4 | parentInjector.bf4,\r\n        cbf5: parentInjector == null ? 0 : parentInjector.cbf5 | parentInjector.bf5,\r\n        cbf6: parentInjector == null ? 0 : parentInjector.cbf6 | parentInjector.bf6,\r\n        cbf7: parentInjector == null ? 0 : parentInjector.cbf7 | parentInjector.bf7,\r\n        templateRef: null,\r\n        viewContainerRef: null,\r\n        elementRef: null,\r\n        changeDetectorRef: null\r\n    };\r\n}\r\n/**\r\n * Makes a directive public to the DI system by adding it to an injector's bloom filter.\r\n *\r\n * @param di The node injector in which a directive will be added\r\n * @param def The definition of the directive to be made public\r\n */\r\nfunction diPublicInInjector(di, def) {\r\n    bloomAdd(di, def.type);\r\n}\r\n/**\r\n * Makes a directive public to the DI system by adding it to an injector's bloom filter.\r\n *\r\n * @param def The definition of the directive to be made public\r\n */\r\nfunction diPublic(def) {\r\n    diPublicInInjector(getOrCreateNodeInjector(), def);\r\n}\r\nfunction directiveInject(token, flags) {\r\n    if (flags === void 0) { flags = 0 /* Default */; }\r\n    return getOrCreateInjectable(getOrCreateNodeInjector(), token, flags);\r\n}\r\n/**\r\n * Creates an ElementRef and stores it on the injector.\r\n * Or, if the ElementRef already exists, retrieves the existing ElementRef.\r\n *\r\n * @returns The ElementRef instance to use\r\n */\r\n\r\n/**\r\n * Creates a TemplateRef and stores it on the injector. Or, if the TemplateRef already\r\n * exists, retrieves the existing TemplateRef.\r\n *\r\n * @returns The TemplateRef instance to use\r\n */\r\nfunction injectTemplateRef() {\r\n    return getOrCreateTemplateRef(getOrCreateNodeInjector());\r\n}\r\n/**\r\n * Creates a ViewContainerRef and stores it on the injector. Or, if the ViewContainerRef\r\n * already exists, retrieves the existing ViewContainerRef.\r\n *\r\n * @returns The ViewContainerRef instance to use\r\n */\r\nfunction injectViewContainerRef() {\r\n    return getOrCreateContainerRef(getOrCreateNodeInjector());\r\n}\r\n/** Returns a ChangeDetectorRef (a.k.a. a ViewRef) */\r\nfunction injectChangeDetectorRef() {\r\n    return getOrCreateChangeDetectorRef(getOrCreateNodeInjector(), null);\r\n}\r\n/**\r\n * Inject static attribute value into directive constructor.\r\n *\r\n * This method is used with `factory` functions which are generated as part of\r\n * `defineDirective` or `defineComponent`. The method retrieves the static value\r\n * of an attribute. (Dynamic attributes are not supported since they are not resolved\r\n *  at the time of injection and can change over time.)\r\n *\r\n * # Example\r\n * Given:\r\n * ```\r\n * @Component(...)\r\n * class MyComponent {\r\n *   constructor(@Attribute('title') title: string) { ... }\r\n * }\r\n * ```\r\n * When instantiated with\r\n * ```\r\n * <my-component title=\"Hello\"></my-component>\r\n * ```\r\n *\r\n * Then factory method generated is:\r\n * ```\r\n * MyComponent.ngComponentDef = defineComponent({\r\n *   factory: () => new MyComponent(injectAttribute('title'))\r\n *   ...\r\n * })\r\n * ```\r\n *\r\n * @experimental\r\n */\r\nfunction injectAttribute(attrName) {\r\n    ngDevMode && assertPreviousIsParent();\r\n    var lElement = getPreviousOrParentNode();\r\n    ngDevMode && assertNodeType(lElement, 3 /* Element */);\r\n    var tElement = (lElement.tNode);\r\n    ngDevMode && assertNotNull(tElement, 'expecting tNode');\r\n    var attrs = tElement.attrs;\r\n    if (attrs) {\r\n        for (var i = 0; i < attrs.length; i = i + 2) {\r\n            if (attrs[i] == attrName) {\r\n                return attrs[i + 1];\r\n            }\r\n        }\r\n    }\r\n    return undefined;\r\n}\r\n/**\r\n * Creates a ViewRef and stores it on the injector as ChangeDetectorRef (public alias).\r\n * Or, if it already exists, retrieves the existing instance.\r\n *\r\n * @returns The ChangeDetectorRef to use\r\n */\r\nfunction getOrCreateChangeDetectorRef(di, context) {\r\n    if (di.changeDetectorRef)\r\n        return di.changeDetectorRef;\r\n    var currentNode = di.node;\r\n    if (isComponent((currentNode.tNode))) {\r\n        return di.changeDetectorRef = createViewRef(currentNode.data, context);\r\n    }\r\n    else if (currentNode.type === 3 /* Element */) {\r\n        return di.changeDetectorRef = getOrCreateHostChangeDetector(currentNode.view.node);\r\n    }\r\n    return null;\r\n}\r\n/** Gets or creates ChangeDetectorRef for the closest host component */\r\nfunction getOrCreateHostChangeDetector(currentNode) {\r\n    var hostNode = getClosestComponentAncestor(currentNode);\r\n    var hostInjector = hostNode.nodeInjector;\r\n    var existingRef = hostInjector && hostInjector.changeDetectorRef;\r\n    return existingRef ?\r\n        existingRef :\r\n        createViewRef(hostNode.data, hostNode.view\r\n            .directives[hostNode.tNode.flags >> 13 /* DirectiveStartingIndexShift */]);\r\n}\r\n/**\r\n * If the node is an embedded view, traverses up the view tree to return the closest\r\n * ancestor view that is attached to a component. If it's already a component node,\r\n * returns itself.\r\n */\r\nfunction getClosestComponentAncestor(node) {\r\n    while (node.type === 2 /* View */) {\r\n        node = node.view.node;\r\n    }\r\n    return node;\r\n}\r\n/**\r\n * Searches for an instance of the given directive type up the injector tree and returns\r\n * that instance if found.\r\n *\r\n * Specifically, it gets the bloom filter bit associated with the directive (see bloomHashBit),\r\n * checks that bit against the bloom filter structure to identify an injector that might have\r\n * the directive (see bloomFindPossibleInjector), then searches the directives on that injector\r\n * for a match.\r\n *\r\n * If not found, it will propagate up to the next parent injector until the token\r\n * is found or the top is reached.\r\n *\r\n * @param di Node injector where the search should start\r\n * @param token The directive type to search for\r\n * @param flags Injection flags (e.g. CheckParent)\r\n * @returns The instance found\r\n */\r\nfunction getOrCreateInjectable(di, token, flags) {\r\n    if (flags === void 0) { flags = 0 /* Default */; }\r\n    var bloomHash = bloomHashBit(token);\r\n    // If the token has a bloom hash, then it is a directive that is public to the injection system\r\n    // (diPublic). If there is no hash, fall back to the module injector.\r\n    if (bloomHash === null) {\r\n        var moduleInjector = getPreviousOrParentNode().view.injector;\r\n        var formerInjector = setCurrentInjector(moduleInjector);\r\n        try {\r\n            return inject(token, flags);\r\n        }\r\n        finally {\r\n            setCurrentInjector(formerInjector);\r\n        }\r\n    }\r\n    else {\r\n        var injector = di;\r\n        while (injector) {\r\n            // Get the closest potential matching injector (upwards in the injector tree) that\r\n            // *potentially* has the token.\r\n            injector = bloomFindPossibleInjector(injector, bloomHash, flags);\r\n            // If no injector is found, we *know* that there is no ancestor injector that contains the\r\n            // token, so we abort.\r\n            if (!injector) {\r\n                break;\r\n            }\r\n            // At this point, we have an injector which *may* contain the token, so we step through the\r\n            // directives associated with the injector's corresponding node to get the directive instance.\r\n            var node = injector.node;\r\n            var nodeFlags = node.tNode.flags;\r\n            var count = nodeFlags & 4095;\r\n            if (count !== 0) {\r\n                var start = nodeFlags >> 13;\r\n                var end = start + count;\r\n                var defs = (node.view.tView.directives);\r\n                for (var i = start; i < end; i++) {\r\n                    // Get the definition for the directive at this index and, if it is injectable (diPublic),\r\n                    // and matches the given token, return the directive instance.\r\n                    var directiveDef = defs[i];\r\n                    if (directiveDef.type === token && directiveDef.diPublic) {\r\n                        return getDirectiveInstance(node.view.directives[i]);\r\n                    }\r\n                }\r\n            }\r\n            // If we *didn't* find the directive for the token and we are searching the current node's\r\n            // injector, it's possible the directive is on this node and hasn't been created yet.\r\n            var instance = void 0;\r\n            if (injector === di && (instance = searchMatchesQueuedForCreation(node, token))) {\r\n                return instance;\r\n            }\r\n            // The def wasn't found anywhere on this node, so it was a false positive.\r\n            // If flags permit, traverse up the tree and continue searching.\r\n            if (flags & 2 /* Self */ || flags & 1 /* Host */ && !sameHostView(injector)) {\r\n                injector = null;\r\n            }\r\n            else {\r\n                injector = injector.parent;\r\n            }\r\n        }\r\n    }\r\n    // No directive was found for the given token.\r\n    if (flags & 8 /* Optional */)\r\n        return null;\r\n    throw new Error(\"Injector: NOT_FOUND [\" + stringify$1(token) + \"]\");\r\n}\r\nfunction searchMatchesQueuedForCreation(node, token) {\r\n    var matches = node.view.tView.currentMatches;\r\n    if (matches) {\r\n        for (var i = 0; i < matches.length; i += 2) {\r\n            var def = matches[i];\r\n            if (def.type === token) {\r\n                return resolveDirective(def, i + 1, matches, node.view.tView);\r\n            }\r\n        }\r\n    }\r\n    return null;\r\n}\r\n/**\r\n * Given a directive type, this function returns the bit in an injector's bloom filter\r\n * that should be used to determine whether or not the directive is present.\r\n *\r\n * When the directive was added to the bloom filter, it was given a unique ID that can be\r\n * retrieved on the class. Since there are only BLOOM_SIZE slots per bloom filter, the directive's\r\n * ID must be modulo-ed by BLOOM_SIZE to get the correct bloom bit (directives share slots after\r\n * BLOOM_SIZE is reached).\r\n *\r\n * @param type The directive type\r\n * @returns The bloom bit to check for the directive\r\n */\r\nfunction bloomHashBit(type) {\r\n    var id = type[NG_ELEMENT_ID];\r\n    return typeof id === 'number' ? id % BLOOM_SIZE : null;\r\n}\r\n/**\r\n * Finds the closest injector that might have a certain directive.\r\n *\r\n * Each directive corresponds to a bit in an injector's bloom filter. Given the bloom bit to\r\n * check and a starting injector, this function traverses up injectors until it finds an\r\n * injector that contains a 1 for that bit in its bloom filter. A 1 indicates that the\r\n * injector may have that directive. It only *may* have the directive because directives begin\r\n * to share bloom filter bits after the BLOOM_SIZE is reached, and it could correspond to a\r\n * different directive sharing the bit.\r\n *\r\n * Note: We can skip checking further injectors up the tree if an injector's cbf structure\r\n * has a 0 for that bloom bit. Since cbf contains the merged value of all the parent\r\n * injectors, a 0 in the bloom bit indicates that the parents definitely do not contain\r\n * the directive and do not need to be checked.\r\n *\r\n * @param injector The starting node injector to check\r\n * @param  bloomBit The bit to check in each injector's bloom filter\r\n * @param  flags The injection flags for this injection site (e.g. Optional or SkipSelf)\r\n * @returns An injector that might have the directive\r\n */\r\nfunction bloomFindPossibleInjector(startInjector, bloomBit, flags) {\r\n    // Create a mask that targets the specific bit associated with the directive we're looking for.\r\n    // JS bit operations are 32 bits, so this will be a number between 2^0 and 2^31, corresponding\r\n    // to bit positions 0 - 31 in a 32 bit integer.\r\n    var mask = 1 << bloomBit;\r\n    // Traverse up the injector tree until we find a potential match or until we know there *isn't* a\r\n    // match.\r\n    var injector = flags & 4 /* SkipSelf */ ? startInjector.parent : startInjector;\r\n    while (injector) {\r\n        // Our bloom filter size is 256 bits, which is eight 32-bit bloom filter buckets:\r\n        // bf0 = [0 - 31], bf1 = [32 - 63], bf2 = [64 - 95], bf3 = [96 - 127], etc.\r\n        // Get the bloom filter value from the appropriate bucket based on the directive's bloomBit.\r\n        var value = void 0;\r\n        if (bloomBit < 128) {\r\n            value = bloomBit < 64 ? (bloomBit < 32 ? injector.bf0 : injector.bf1) :\r\n                (bloomBit < 96 ? injector.bf2 : injector.bf3);\r\n        }\r\n        else {\r\n            value = bloomBit < 192 ? (bloomBit < 160 ? injector.bf4 : injector.bf5) :\r\n                (bloomBit < 224 ? injector.bf6 : injector.bf7);\r\n        }\r\n        // If the bloom filter value has the bit corresponding to the directive's bloomBit flipped on,\r\n        // this injector is a potential match.\r\n        if ((value & mask) === mask) {\r\n            return injector;\r\n        }\r\n        else if (flags & 2 /* Self */ || flags & 1 /* Host */ && !sameHostView(injector)) {\r\n            return null;\r\n        }\r\n        // If the current injector does not have the directive, check the bloom filters for the ancestor\r\n        // injectors (cbf0 - cbf7). These filters capture *all* ancestor injectors.\r\n        if (bloomBit < 128) {\r\n            value = bloomBit < 64 ? (bloomBit < 32 ? injector.cbf0 : injector.cbf1) :\r\n                (bloomBit < 96 ? injector.cbf2 : injector.cbf3);\r\n        }\r\n        else {\r\n            value = bloomBit < 192 ? (bloomBit < 160 ? injector.cbf4 : injector.cbf5) :\r\n                (bloomBit < 224 ? injector.cbf6 : injector.cbf7);\r\n        }\r\n        // If the ancestor bloom filter value has the bit corresponding to the directive, traverse up to\r\n        // find the specific injector. If the ancestor bloom filter does not have the bit, we can abort.\r\n        injector = (value & mask) ? injector.parent : null;\r\n    }\r\n    return null;\r\n}\r\n/**\r\n * Checks whether the current injector and its parent are in the same host view.\r\n *\r\n * This is necessary to support @Host() decorators. If @Host() is set, we should stop searching once\r\n * the injector and its parent view don't match because it means we'd cross the view boundary.\r\n */\r\nfunction sameHostView(injector) {\r\n    return !!injector.parent && injector.parent.node.view === injector.node.view;\r\n}\r\nvar ReadFromInjectorFn = /** @class */ (function () {\r\n    function ReadFromInjectorFn(read) {\r\n        this.read = read;\r\n    }\r\n    return ReadFromInjectorFn;\r\n}());\r\n/**\r\n * Creates an ElementRef for a given node injector and stores it on the injector.\r\n * Or, if the ElementRef already exists, retrieves the existing ElementRef.\r\n *\r\n * @param di The node injector where we should store a created ElementRef\r\n * @returns The ElementRef instance to use\r\n */\r\nfunction getOrCreateElementRef(di) {\r\n    return di.elementRef || (di.elementRef = new ElementRef$1(di.node.type === 0 /* Container */ ? null : di.node.native));\r\n}\r\n\r\n\r\n\r\n\r\n/** A ref to a node's native element. */\r\nvar ElementRef$1 = /** @class */ (function () {\r\n    function ElementRef(nativeElement) {\r\n        this.nativeElement = nativeElement;\r\n    }\r\n    return ElementRef;\r\n}());\r\n/**\r\n * Creates a ViewContainerRef and stores it on the injector. Or, if the ViewContainerRef\r\n * already exists, retrieves the existing ViewContainerRef.\r\n *\r\n * @returns The ViewContainerRef instance to use\r\n */\r\nfunction getOrCreateContainerRef(di) {\r\n    if (!di.viewContainerRef) {\r\n        var vcRefHost = di.node;\r\n        ngDevMode && assertNodeOfPossibleTypes(vcRefHost, 0 /* Container */, 3 /* Element */);\r\n        var lContainer = createLContainer((vcRefHost.parent), vcRefHost.view);\r\n        var lContainerNode = createLNodeObject(0 /* Container */, vcRefHost.view, (vcRefHost.parent), undefined, lContainer, null);\r\n        vcRefHost.dynamicLContainerNode = lContainerNode;\r\n        addToViewTree(vcRefHost.view, lContainer);\r\n        di.viewContainerRef = new ViewContainerRef$1(lContainerNode);\r\n    }\r\n    return di.viewContainerRef;\r\n}\r\n/**\r\n * A ref to a container that enables adding and removing views from that container\r\n * imperatively.\r\n */\r\nvar ViewContainerRef$1 = /** @class */ (function () {\r\n    function ViewContainerRef(_lContainerNode) {\r\n        this._lContainerNode = _lContainerNode;\r\n        this._viewRefs = [];\r\n    }\r\n    ViewContainerRef.prototype.clear = function () {\r\n        var lContainer = this._lContainerNode.data;\r\n        while (lContainer.views.length) {\r\n            this.remove(0);\r\n        }\r\n    };\r\n    ViewContainerRef.prototype.get = function (index) { return this._viewRefs[index] || null; };\r\n    Object.defineProperty(ViewContainerRef.prototype, \"length\", {\r\n        get: function () {\r\n            var lContainer = this._lContainerNode.data;\r\n            return lContainer.views.length;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    ViewContainerRef.prototype.createEmbeddedView = function (templateRef, context, index) {\r\n        var viewRef = templateRef.createEmbeddedView(context || {});\r\n        this.insert(viewRef, index);\r\n        return viewRef;\r\n    };\r\n    ViewContainerRef.prototype.createComponent = function (componentFactory, index, injector, projectableNodes, ngModule) {\r\n        throw notImplemented();\r\n    };\r\n    ViewContainerRef.prototype.insert = function (viewRef, index) {\r\n        var lViewNode = viewRef._lViewNode;\r\n        var adjustedIdx = this._adjustIndex(index);\r\n        insertView(this._lContainerNode, lViewNode, adjustedIdx);\r\n        // invalidate cache of next sibling RNode (we do similar operation in the containerRefreshEnd\r\n        // instruction)\r\n        this._lContainerNode.native = undefined;\r\n        this._viewRefs.splice(adjustedIdx, 0, viewRef);\r\n        lViewNode.parent = this._lContainerNode;\r\n        // If the view is dynamic (has a template), it needs to be counted both at the container\r\n        // level and at the node above the container.\r\n        if (lViewNode.data.template !== null) {\r\n            // Increment the container view count.\r\n            this._lContainerNode.data.dynamicViewCount++;\r\n            // Look for the parent node and increment its dynamic view count.\r\n            if (this._lContainerNode.parent !== null && this._lContainerNode.parent.data !== null) {\r\n                ngDevMode && assertNodeOfPossibleTypes(this._lContainerNode.parent, 2 /* View */, 3 /* Element */);\r\n                this._lContainerNode.parent.data.dynamicViewCount++;\r\n            }\r\n        }\r\n        return viewRef;\r\n    };\r\n    ViewContainerRef.prototype.move = function (viewRef, newIndex) {\r\n        var index = this.indexOf(viewRef);\r\n        this.detach(index);\r\n        this.insert(viewRef, this._adjustIndex(newIndex));\r\n        return viewRef;\r\n    };\r\n    ViewContainerRef.prototype.indexOf = function (viewRef) { return this._viewRefs.indexOf(viewRef); };\r\n    ViewContainerRef.prototype.remove = function (index) {\r\n        this.detach(index);\r\n        // TODO(ml): proper destroy of the ViewRef, i.e. recursively destroy the LviewNode and its\r\n        // children, delete DOM nodes and QueryList, trigger hooks (onDestroy), destroy the renderer,\r\n        // detach projected nodes\r\n    };\r\n    ViewContainerRef.prototype.detach = function (index) {\r\n        var adjustedIdx = this._adjustIndex(index, -1);\r\n        removeView(this._lContainerNode, adjustedIdx);\r\n        return this._viewRefs.splice(adjustedIdx, 1)[0] || null;\r\n    };\r\n    ViewContainerRef.prototype._adjustIndex = function (index, shift) {\r\n        if (shift === void 0) { shift = 0; }\r\n        if (index == null) {\r\n            return this._lContainerNode.data.views.length + shift;\r\n        }\r\n        if (ngDevMode) {\r\n            assertGreaterThan(index, -1, 'index must be positive');\r\n            // +1 because it's legal to insert at the end.\r\n            assertLessThan(index, this._lContainerNode.data.views.length + 1 + shift, 'index');\r\n        }\r\n        return index;\r\n    };\r\n    return ViewContainerRef;\r\n}());\r\n/**\r\n * Creates a TemplateRef and stores it on the injector. Or, if the TemplateRef already\r\n * exists, retrieves the existing TemplateRef.\r\n *\r\n * @param di The node injector where we should store a created TemplateRef\r\n * @returns The TemplateRef instance to use\r\n */\r\nfunction getOrCreateTemplateRef(di) {\r\n    if (!di.templateRef) {\r\n        ngDevMode && assertNodeType(di.node, 0 /* Container */);\r\n        var hostNode = di.node;\r\n        var hostTNode = (hostNode.tNode);\r\n        var hostTView = hostNode.view.tView;\r\n        if (!hostTNode.tViews) {\r\n            hostTNode.tViews = createTView(hostTView.directiveRegistry, hostTView.pipeRegistry);\r\n        }\r\n        ngDevMode && assertNotNull(hostTNode.tViews, 'TView must be allocated');\r\n        di.templateRef = new TemplateRef$1(getOrCreateElementRef(di), hostTNode.tViews, (hostNode.data.template), getRenderer(), hostTView.directiveRegistry, hostTView.pipeRegistry);\r\n    }\r\n    return di.templateRef;\r\n}\r\nvar TemplateRef$1 = /** @class */ (function () {\r\n    function TemplateRef(elementRef, _tView, _template, _renderer, _directives, _pipes) {\r\n        this._tView = _tView;\r\n        this._template = _template;\r\n        this._renderer = _renderer;\r\n        this._directives = _directives;\r\n        this._pipes = _pipes;\r\n        this.elementRef = elementRef;\r\n    }\r\n    TemplateRef.prototype.createEmbeddedView = function (context) {\r\n        var viewNode = renderEmbeddedTemplate(null, this._tView, this._template, context, this._renderer, this._directives, this._pipes);\r\n        return addDestroyable(new EmbeddedViewRef$1(viewNode, this._template, context));\r\n    };\r\n    return TemplateRef;\r\n}());\r\n\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * Create a component definition object.\r\n *\r\n *\r\n * # Example\r\n * ```\r\n * class MyDirective {\r\n *   // Generated by Angular Template Compiler\r\n *   // [Symbol] syntax will not be supported by TypeScript until v2.7\r\n *   static ngComponentDef = defineComponent({\r\n *     ...\r\n *   });\r\n * }\r\n * ```\r\n */\r\nfunction defineComponent(componentDefinition) {\r\n    var type = componentDefinition.type;\r\n    var pipeTypes = (componentDefinition.pipes);\r\n    var directiveTypes = (componentDefinition.directives);\r\n    var def = {\r\n        type: type,\r\n        diPublic: null,\r\n        factory: componentDefinition.factory,\r\n        template: componentDefinition.template || (null),\r\n        hostBindings: componentDefinition.hostBindings || null,\r\n        attributes: componentDefinition.attributes || null,\r\n        inputs: invertObject(componentDefinition.inputs),\r\n        outputs: invertObject(componentDefinition.outputs),\r\n        rendererType: resolveRendererType2(componentDefinition.rendererType) || null,\r\n        exportAs: componentDefinition.exportAs,\r\n        onInit: type.prototype.ngOnInit || null,\r\n        doCheck: type.prototype.ngDoCheck || null,\r\n        afterContentInit: type.prototype.ngAfterContentInit || null,\r\n        afterContentChecked: type.prototype.ngAfterContentChecked || null,\r\n        afterViewInit: type.prototype.ngAfterViewInit || null,\r\n        afterViewChecked: type.prototype.ngAfterViewChecked || null,\r\n        onDestroy: type.prototype.ngOnDestroy || null,\r\n        onPush: componentDefinition.changeDetection === ChangeDetectionStrategy.OnPush,\r\n        directiveDefs: directiveTypes ?\r\n            function () {\r\n                return (typeof directiveTypes === 'function' ? directiveTypes() : directiveTypes)\r\n                    .map(extractDirectiveDef);\r\n            } :\r\n            null,\r\n        pipeDefs: pipeTypes ?\r\n            function () { return (typeof pipeTypes === 'function' ? pipeTypes() : pipeTypes).map(extractPipeDef); } :\r\n            null,\r\n        selectors: componentDefinition.selectors\r\n    };\r\n    var feature = componentDefinition.features;\r\n    feature && feature.forEach(function (fn) { return fn(def); });\r\n    return def;\r\n}\r\nfunction extractDirectiveDef(type) {\r\n    var def = type.ngComponentDef || type.ngDirectiveDef;\r\n    if (ngDevMode && !def) {\r\n        throw new Error(\"'\" + type.name + \"' is neither 'ComponentType' or 'DirectiveType'.\");\r\n    }\r\n    return def;\r\n}\r\nfunction extractPipeDef(type) {\r\n    var def = type.ngPipeDef;\r\n    if (ngDevMode && !def) {\r\n        throw new Error(\"'\" + type.name + \"' is not a 'PipeType'.\");\r\n    }\r\n    return def;\r\n}\r\nvar PRIVATE_PREFIX = '__ngOnChanges_';\r\n/**\r\n * Creates an NgOnChangesFeature function for a component's features list.\r\n *\r\n * It accepts an optional map of minified input property names to original property names,\r\n * if any input properties have a public alias.\r\n *\r\n * The NgOnChangesFeature function that is returned decorates a component with support for\r\n * the ngOnChanges lifecycle hook, so it should be included in any component that implements\r\n * that hook.\r\n *\r\n * Example usage:\r\n *\r\n * ```\r\n * static ngComponentDef = defineComponent({\r\n *   ...\r\n *   inputs: {name: 'publicName'},\r\n *   features: [NgOnChangesFeature({name: 'name'})]\r\n * });\r\n * ```\r\n *\r\n * @param inputPropertyNames Map of input property names, if they are aliased\r\n * @returns DirectiveDefFeature\r\n */\r\nfunction NgOnChangesFeature(inputPropertyNames) {\r\n    return function (definition) {\r\n        var inputs = definition.inputs;\r\n        var proto = definition.type.prototype;\r\n        // Place where we will store SimpleChanges if there is a change\r\n        Object.defineProperty(proto, PRIVATE_PREFIX, { value: undefined, writable: true });\r\n        var _loop_1 = function (pubKey) {\r\n            var minKey = inputs[pubKey];\r\n            var propertyName = inputPropertyNames && inputPropertyNames[minKey] || pubKey;\r\n            var privateMinKey = PRIVATE_PREFIX + minKey;\r\n            // Create a place where the actual value will be stored and make it non-enumerable\r\n            Object.defineProperty(proto, privateMinKey, { value: undefined, writable: true });\r\n            var existingDesc = Object.getOwnPropertyDescriptor(proto, minKey);\r\n            // create a getter and setter for property\r\n            Object.defineProperty(proto, minKey, {\r\n                get: function () {\r\n                    return (existingDesc && existingDesc.get) ? existingDesc.get.call(this) :\r\n                        this[privateMinKey];\r\n                },\r\n                set: function (value) {\r\n                    var simpleChanges = this[PRIVATE_PREFIX];\r\n                    var isFirstChange = simpleChanges === undefined;\r\n                    if (simpleChanges == null) {\r\n                        simpleChanges = this[PRIVATE_PREFIX] = {};\r\n                    }\r\n                    simpleChanges[propertyName] = new SimpleChange(this[privateMinKey], value, isFirstChange);\r\n                    (existingDesc && existingDesc.set) ? existingDesc.set.call(this, value) :\r\n                        this[privateMinKey] = value;\r\n                }\r\n            });\r\n        };\r\n        for (var pubKey in inputs) {\r\n            _loop_1(pubKey);\r\n        }\r\n        // If an onInit hook is defined, it will need to wrap the ngOnChanges call\r\n        // so the call order is changes-init-check in creation mode. In subsequent\r\n        // change detection runs, only the check wrapper will be called.\r\n        if (definition.onInit != null) {\r\n            definition.onInit = onChangesWrapper(definition.onInit);\r\n        }\r\n        definition.doCheck = onChangesWrapper(definition.doCheck);\r\n    };\r\n    function onChangesWrapper(delegateHook) {\r\n        return function () {\r\n            var simpleChanges = this[PRIVATE_PREFIX];\r\n            if (simpleChanges != null) {\r\n                this.ngOnChanges(simpleChanges);\r\n                this[PRIVATE_PREFIX] = null;\r\n            }\r\n            delegateHook && delegateHook.apply(this);\r\n        };\r\n    }\r\n}\r\nfunction PublicFeature(definition) {\r\n    definition.diPublic = diPublic;\r\n}\r\nvar EMPTY$1 = {};\r\n/** Swaps the keys and values of an object. */\r\nfunction invertObject(obj) {\r\n    if (obj == null)\r\n        return EMPTY$1;\r\n    var newObj = {};\r\n    for (var minifiedKey in obj) {\r\n        newObj[obj[minifiedKey]] = minifiedKey;\r\n    }\r\n    return newObj;\r\n}\r\n/**\r\n * Create a directive definition object.\r\n *\r\n * # Example\r\n * ```\r\n * class MyDirective {\r\n *   // Generated by Angular Template Compiler\r\n *   // [Symbol] syntax will not be supported by TypeScript until v2.7\r\n *   static ngDirectiveDef = defineDirective({\r\n *     ...\r\n *   });\r\n * }\r\n * ```\r\n */\r\nvar defineDirective = defineComponent;\r\n/**\r\n * Create a pipe definition object.\r\n *\r\n * # Example\r\n * ```\r\n * class MyPipe implements PipeTransform {\r\n *   // Generated by Angular Template Compiler\r\n *   static ngPipeDef = definePipe({\r\n *     ...\r\n *   });\r\n * }\r\n * ```\r\n * @param pipeDef Pipe definition generated by the compiler\r\n */\r\nfunction definePipe(pipeDef) {\r\n    return {\r\n        name: pipeDef.name,\r\n        n: pipeDef.factory,\r\n        pure: pipeDef.pure !== false,\r\n        onDestroy: pipeDef.type.prototype.ngOnDestroy || null\r\n    };\r\n}\r\n\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * If the value hasn't been saved, calls the pure function to store and return the\r\n * value. If it has been saved, returns the saved value.\r\n *\r\n * @param pureFn Function that returns a value\r\n * @returns value\r\n */\r\nfunction pureFunction0(pureFn, thisArg) {\r\n    return getCreationMode() ? checkAndUpdateBinding$1(thisArg ? pureFn.call(thisArg) : pureFn()) :\r\n        consumeBinding();\r\n}\r\n/**\r\n * If the value of the provided exp has changed, calls the pure function to return\r\n * an updated value. Or if the value has not changed, returns cached value.\r\n *\r\n * @param pureFn Function that returns an updated value\r\n * @param exp Updated expression value\r\n * @returns Updated value\r\n */\r\nfunction pureFunction1(pureFn, exp, thisArg) {\r\n    return bindingUpdated(exp) ?\r\n        checkAndUpdateBinding$1(thisArg ? pureFn.call(thisArg, exp) : pureFn(exp)) :\r\n        consumeBinding();\r\n}\r\n/**\r\n * If the value of any provided exp has changed, calls the pure function to return\r\n * an updated value. Or if no values have changed, returns cached value.\r\n *\r\n * @param pureFn\r\n * @param exp1\r\n * @param exp2\r\n * @returns Updated value\r\n */\r\nfunction pureFunction2(pureFn, exp1, exp2, thisArg) {\r\n    return bindingUpdated2(exp1, exp2) ?\r\n        checkAndUpdateBinding$1(thisArg ? pureFn.call(thisArg, exp1, exp2) : pureFn(exp1, exp2)) :\r\n        consumeBinding();\r\n}\r\n/**\r\n * If the value of any provided exp has changed, calls the pure function to return\r\n * an updated value. Or if no values have changed, returns cached value.\r\n *\r\n * @param pureFn\r\n * @param exp1\r\n * @param exp2\r\n * @param exp3\r\n * @returns Updated value\r\n */\r\nfunction pureFunction3(pureFn, exp1, exp2, exp3, thisArg) {\r\n    var different = bindingUpdated2(exp1, exp2);\r\n    return bindingUpdated(exp3) || different ?\r\n        checkAndUpdateBinding$1(thisArg ? pureFn.call(thisArg, exp1, exp2, exp3) : pureFn(exp1, exp2, exp3)) :\r\n        consumeBinding();\r\n}\r\n/**\r\n * If the value of any provided exp has changed, calls the pure function to return\r\n * an updated value. Or if no values have changed, returns cached value.\r\n *\r\n * @param pureFn\r\n * @param exp1\r\n * @param exp2\r\n * @param exp3\r\n * @param exp4\r\n * @returns Updated value\r\n */\r\nfunction pureFunction4(pureFn, exp1, exp2, exp3, exp4, thisArg) {\r\n    return bindingUpdated4(exp1, exp2, exp3, exp4) ?\r\n        checkAndUpdateBinding$1(thisArg ? pureFn.call(thisArg, exp1, exp2, exp3, exp4) : pureFn(exp1, exp2, exp3, exp4)) :\r\n        consumeBinding();\r\n}\r\n/**\r\n * If the value of any provided exp has changed, calls the pure function to return\r\n * an updated value. Or if no values have changed, returns cached value.\r\n *\r\n * @param pureFn\r\n * @param exp1\r\n * @param exp2\r\n * @param exp3\r\n * @param exp4\r\n * @param exp5\r\n * @returns Updated value\r\n */\r\nfunction pureFunction5(pureFn, exp1, exp2, exp3, exp4, exp5, thisArg) {\r\n    var different = bindingUpdated4(exp1, exp2, exp3, exp4);\r\n    return bindingUpdated(exp5) || different ?\r\n        checkAndUpdateBinding$1(thisArg ? pureFn.call(thisArg, exp1, exp2, exp3, exp4, exp5) :\r\n            pureFn(exp1, exp2, exp3, exp4, exp5)) :\r\n        consumeBinding();\r\n}\r\n/**\r\n * If the value of any provided exp has changed, calls the pure function to return\r\n * an updated value. Or if no values have changed, returns cached value.\r\n *\r\n * @param pureFn\r\n * @param exp1\r\n * @param exp2\r\n * @param exp3\r\n * @param exp4\r\n * @param exp5\r\n * @param exp6\r\n * @returns Updated value\r\n */\r\nfunction pureFunction6(pureFn, exp1, exp2, exp3, exp4, exp5, exp6, thisArg) {\r\n    var different = bindingUpdated4(exp1, exp2, exp3, exp4);\r\n    return bindingUpdated2(exp5, exp6) || different ?\r\n        checkAndUpdateBinding$1(thisArg ? pureFn.call(thisArg, exp1, exp2, exp3, exp4, exp5, exp6) :\r\n            pureFn(exp1, exp2, exp3, exp4, exp5, exp6)) :\r\n        consumeBinding();\r\n}\r\n/**\r\n * If the value of any provided exp has changed, calls the pure function to return\r\n * an updated value. Or if no values have changed, returns cached value.\r\n *\r\n * @param pureFn\r\n * @param exp1\r\n * @param exp2\r\n * @param exp3\r\n * @param exp4\r\n * @param exp5\r\n * @param exp6\r\n * @param exp7\r\n * @returns Updated value\r\n */\r\nfunction pureFunction7(pureFn, exp1, exp2, exp3, exp4, exp5, exp6, exp7, thisArg) {\r\n    var different = bindingUpdated4(exp1, exp2, exp3, exp4);\r\n    different = bindingUpdated2(exp5, exp6) || different;\r\n    return bindingUpdated(exp7) || different ?\r\n        checkAndUpdateBinding$1(thisArg ? pureFn.call(thisArg, exp1, exp2, exp3, exp4, exp5, exp6, exp7) :\r\n            pureFn(exp1, exp2, exp3, exp4, exp5, exp6, exp7)) :\r\n        consumeBinding();\r\n}\r\n/**\r\n * If the value of any provided exp has changed, calls the pure function to return\r\n * an updated value. Or if no values have changed, returns cached value.\r\n *\r\n * @param pureFn\r\n * @param exp1\r\n * @param exp2\r\n * @param exp3\r\n * @param exp4\r\n * @param exp5\r\n * @param exp6\r\n * @param exp7\r\n * @param exp8\r\n * @returns Updated value\r\n */\r\nfunction pureFunction8(pureFn, exp1, exp2, exp3, exp4, exp5, exp6, exp7, exp8, thisArg) {\r\n    var different = bindingUpdated4(exp1, exp2, exp3, exp4);\r\n    return bindingUpdated4(exp5, exp6, exp7, exp8) || different ?\r\n        checkAndUpdateBinding$1(thisArg ? pureFn.call(thisArg, exp1, exp2, exp3, exp4, exp5, exp6, exp7, exp8) :\r\n            pureFn(exp1, exp2, exp3, exp4, exp5, exp6, exp7, exp8)) :\r\n        consumeBinding();\r\n}\r\n/**\r\n * pureFunction instruction that can support any number of bindings.\r\n *\r\n * If the value of any provided exp has changed, calls the pure function to return\r\n * an updated value. Or if no values have changed, returns cached value.\r\n *\r\n * @param pureFn A pure function that takes binding values and builds an object or array\r\n * containing those values.\r\n * @param exp An array of binding values\r\n * @returns Updated value\r\n */\r\nfunction pureFunctionV(pureFn, exps, thisArg) {\r\n    var different = false;\r\n    for (var i = 0; i < exps.length; i++) {\r\n        bindingUpdated(exps[i]) && (different = true);\r\n    }\r\n    return different ? checkAndUpdateBinding$1(pureFn.apply(thisArg, exps)) : consumeBinding();\r\n}\r\n\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * Create a pipe.\r\n *\r\n * @param index Pipe index where the pipe will be stored.\r\n * @param pipeName The name of the pipe\r\n * @returns T the instance of the pipe.\r\n */\r\nfunction pipe(index, pipeName) {\r\n    var tView = getTView();\r\n    var pipeDef;\r\n    if (tView.firstTemplatePass) {\r\n        pipeDef = getPipeDef(pipeName, tView.pipeRegistry);\r\n        tView.data[index] = pipeDef;\r\n        if (pipeDef.onDestroy) {\r\n            (tView.pipeDestroyHooks || (tView.pipeDestroyHooks = [])).push(index, pipeDef.onDestroy);\r\n        }\r\n    }\r\n    else {\r\n        pipeDef = tView.data[index];\r\n    }\r\n    var pipeInstance = pipeDef.n();\r\n    store(index, pipeInstance);\r\n    return pipeInstance;\r\n}\r\n/**\r\n * Searches the pipe registry for a pipe with the given name. If one is found,\r\n * returns the pipe. Otherwise, an error is thrown because the pipe cannot be resolved.\r\n *\r\n * @param name Name of pipe to resolve\r\n * @param registry Full list of available pipes\r\n * @returns Matching PipeDef\r\n */\r\nfunction getPipeDef(name, registry) {\r\n    if (registry) {\r\n        for (var i = 0; i < registry.length; i++) {\r\n            var pipeDef = registry[i];\r\n            if (name === pipeDef.name) {\r\n                return pipeDef;\r\n            }\r\n        }\r\n    }\r\n    throw new Error(\"Pipe with name '\" + name + \"' not found!\");\r\n}\r\n/**\r\n * Invokes a pipe with 1 arguments.\r\n *\r\n * This instruction acts as a guard to {@link PipeTransform#transform} invoking\r\n * the pipe only when an input to the pipe changes.\r\n *\r\n * @param index Pipe index where the pipe was stored on creation.\r\n * @param v1 1st argument to {@link PipeTransform#transform}.\r\n */\r\nfunction pipeBind1(index, v1) {\r\n    var pipeInstance = load(index);\r\n    return isPure(index) ? pureFunction1(pipeInstance.transform, v1, pipeInstance) :\r\n        pipeInstance.transform(v1);\r\n}\r\n/**\r\n * Invokes a pipe with 2 arguments.\r\n *\r\n * This instruction acts as a guard to {@link PipeTransform#transform} invoking\r\n * the pipe only when an input to the pipe changes.\r\n *\r\n * @param index Pipe index where the pipe was stored on creation.\r\n * @param v1 1st argument to {@link PipeTransform#transform}.\r\n * @param v2 2nd argument to {@link PipeTransform#transform}.\r\n */\r\nfunction pipeBind2(index, v1, v2) {\r\n    var pipeInstance = load(index);\r\n    return isPure(index) ? pureFunction2(pipeInstance.transform, v1, v2, pipeInstance) :\r\n        pipeInstance.transform(v1, v2);\r\n}\r\n/**\r\n * Invokes a pipe with 3 arguments.\r\n *\r\n * This instruction acts as a guard to {@link PipeTransform#transform} invoking\r\n * the pipe only when an input to the pipe changes.\r\n *\r\n * @param index Pipe index where the pipe was stored on creation.\r\n * @param v1 1st argument to {@link PipeTransform#transform}.\r\n * @param v2 2nd argument to {@link PipeTransform#transform}.\r\n * @param v3 4rd argument to {@link PipeTransform#transform}.\r\n */\r\nfunction pipeBind3(index, v1, v2, v3) {\r\n    var pipeInstance = load(index);\r\n    return isPure(index) ? pureFunction3(pipeInstance.transform.bind(pipeInstance), v1, v2, v3) :\r\n        pipeInstance.transform(v1, v2, v3);\r\n}\r\n/**\r\n * Invokes a pipe with 4 arguments.\r\n *\r\n * This instruction acts as a guard to {@link PipeTransform#transform} invoking\r\n * the pipe only when an input to the pipe changes.\r\n *\r\n * @param index Pipe index where the pipe was stored on creation.\r\n * @param v1 1st argument to {@link PipeTransform#transform}.\r\n * @param v2 2nd argument to {@link PipeTransform#transform}.\r\n * @param v3 3rd argument to {@link PipeTransform#transform}.\r\n * @param v4 4th argument to {@link PipeTransform#transform}.\r\n */\r\nfunction pipeBind4(index, v1, v2, v3, v4) {\r\n    var pipeInstance = load(index);\r\n    return isPure(index) ? pureFunction4(pipeInstance.transform, v1, v2, v3, v4, pipeInstance) :\r\n        pipeInstance.transform(v1, v2, v3, v4);\r\n}\r\n/**\r\n * Invokes a pipe with variable number of arguments.\r\n *\r\n * This instruction acts as a guard to {@link PipeTransform#transform} invoking\r\n * the pipe only when an input to the pipe changes.\r\n *\r\n * @param index Pipe index where the pipe was stored on creation.\r\n * @param values Array of arguments to pass to {@link PipeTransform#transform} method.\r\n */\r\nfunction pipeBindV(index, values) {\r\n    var pipeInstance = load(index);\r\n    return isPure(index) ? pureFunctionV(pipeInstance.transform, values, pipeInstance) :\r\n        pipeInstance.transform.apply(pipeInstance, values);\r\n}\r\nfunction isPure(index) {\r\n    return getTView().data[index].pure;\r\n}\r\n\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n// Note: This hack is necessary so we don't erroneously get a circular dependency\r\n// failure based on types.\r\n\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n// Note: This hack is necessary so we don't erroneously get a circular dependency\r\n// failure based on types.\r\n\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n// Note: This hack is necessary so we don't erroneously get a circular dependency\r\n// failure based on types.\r\n\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nvar LQueries_ = /** @class */ (function () {\r\n    function LQueries_(deep) {\r\n        this.shallow = null;\r\n        this.deep = null;\r\n        this.deep = deep == null ? null : deep;\r\n    }\r\n    LQueries_.prototype.track = function (queryList, predicate, descend, read) {\r\n        // TODO(misko): This is not right. In case of inherited state, a calling track will incorrectly\r\n        // mutate parent.\r\n        if (descend) {\r\n            this.deep = createQuery$1(this.deep, queryList, predicate, read != null ? read : null);\r\n        }\r\n        else {\r\n            this.shallow = createQuery$1(this.shallow, queryList, predicate, read != null ? read : null);\r\n        }\r\n    };\r\n    LQueries_.prototype.child = function () {\r\n        if (this.deep === null) {\r\n            // if we don't have any deep queries then no need to track anything more.\r\n            return null;\r\n        }\r\n        if (this.shallow === null) {\r\n            // DeepQuery: We can reuse the current state if the child state would be same as current\r\n            // state.\r\n            return this;\r\n        }\r\n        else {\r\n            // We need to create new state\r\n            return new LQueries_(this.deep);\r\n        }\r\n    };\r\n    LQueries_.prototype.container = function () {\r\n        var result = null;\r\n        var query = this.deep;\r\n        while (query) {\r\n            var containerValues = []; // prepare room for views\r\n            query.values.push(containerValues);\r\n            var clonedQuery = { next: null, list: query.list, predicate: query.predicate, values: containerValues };\r\n            clonedQuery.next = result;\r\n            result = clonedQuery;\r\n            query = query.next;\r\n        }\r\n        return result ? new LQueries_(result) : null;\r\n    };\r\n    LQueries_.prototype.enterView = function (index) {\r\n        var result = null;\r\n        var query = this.deep;\r\n        while (query) {\r\n            var viewValues = []; // prepare room for view nodes\r\n            query.values.splice(index, 0, viewValues);\r\n            var clonedQuery = { next: null, list: query.list, predicate: query.predicate, values: viewValues };\r\n            clonedQuery.next = result;\r\n            result = clonedQuery;\r\n            query = query.next;\r\n        }\r\n        return result ? new LQueries_(result) : null;\r\n    };\r\n    LQueries_.prototype.addNode = function (node) {\r\n        add(this.shallow, node);\r\n        add(this.deep, node);\r\n    };\r\n    LQueries_.prototype.removeView = function (index) {\r\n        var query = this.deep;\r\n        while (query) {\r\n            var removed = query.values.splice(index, 1);\r\n            // mark a query as dirty only when removed view had matching modes\r\n            ngDevMode && assertEqual(removed.length, 1, 'removed.length');\r\n            if (removed[0].length) {\r\n                query.list.setDirty();\r\n            }\r\n            query = query.next;\r\n        }\r\n    };\r\n    return LQueries_;\r\n}());\r\n/**\r\n * Iterates over local names for a given node and returns directive index\r\n * (or -1 if a local name points to an element).\r\n *\r\n * @param tNode static data of a node to check\r\n * @param selector selector to match\r\n * @returns directive index, -1 or null if a selector didn't match any of the local names\r\n */\r\nfunction getIdxOfMatchingSelector(tNode, selector) {\r\n    var localNames = tNode.localNames;\r\n    if (localNames) {\r\n        for (var i = 0; i < localNames.length; i += 2) {\r\n            if (localNames[i] === selector) {\r\n                return localNames[i + 1];\r\n            }\r\n        }\r\n    }\r\n    return null;\r\n}\r\n/**\r\n * Iterates over all the directives for a node and returns index of a directive for a given type.\r\n *\r\n * @param node Node on which directives are present.\r\n * @param type Type of a directive to look for.\r\n * @returns Index of a found directive or null when none found.\r\n */\r\nfunction getIdxOfMatchingDirective(node, type) {\r\n    var defs = (node.view.tView.directives);\r\n    var flags = node.tNode.flags;\r\n    var count = flags & 4095;\r\n    var start = flags >> 13;\r\n    var end = start + count;\r\n    for (var i = start; i < end; i++) {\r\n        var def = defs[i];\r\n        if (def.type === type && def.diPublic) {\r\n            return i;\r\n        }\r\n    }\r\n    return null;\r\n}\r\nfunction readFromNodeInjector(nodeInjector, node, read, directiveIdx) {\r\n    if (read instanceof ReadFromInjectorFn) {\r\n        return read.read(nodeInjector, node, directiveIdx);\r\n    }\r\n    else {\r\n        var matchingIdx = getIdxOfMatchingDirective(node, read);\r\n        if (matchingIdx !== null) {\r\n            return node.view.directives[matchingIdx];\r\n        }\r\n    }\r\n    return null;\r\n}\r\nfunction add(query, node) {\r\n    var nodeInjector = getOrCreateNodeInjectorForNode(node);\r\n    while (query) {\r\n        var predicate = query.predicate;\r\n        var type = predicate.type;\r\n        if (type) {\r\n            var directiveIdx = getIdxOfMatchingDirective(node, type);\r\n            if (directiveIdx !== null) {\r\n                // a node is matching a predicate - determine what to read\r\n                // if read token and / or strategy is not specified, use type as read token\r\n                var result = readFromNodeInjector(nodeInjector, node, predicate.read || type, directiveIdx);\r\n                if (result !== null) {\r\n                    addMatch(query, result);\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            var selector = (predicate.selector);\r\n            for (var i = 0; i < selector.length; i++) {\r\n                ngDevMode && assertNotNull(node.tNode, 'node.tNode');\r\n                var directiveIdx = getIdxOfMatchingSelector((node.tNode), selector[i]);\r\n                if (directiveIdx !== null) {\r\n                    // a node is matching a predicate - determine what to read\r\n                    // note that queries using name selector must specify read strategy\r\n                    ngDevMode && assertNotNull(predicate.read, 'the node should have a predicate');\r\n                    var result = readFromNodeInjector(nodeInjector, node, (predicate.read), directiveIdx);\r\n                    if (result !== null) {\r\n                        addMatch(query, result);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        query = query.next;\r\n    }\r\n}\r\nfunction addMatch(query, matchingValue) {\r\n    query.values.push(matchingValue);\r\n    query.list.setDirty();\r\n}\r\nfunction createPredicate(predicate, read) {\r\n    var isArray = Array.isArray(predicate);\r\n    return {\r\n        type: isArray ? null : predicate,\r\n        selector: isArray ? predicate : null,\r\n        read: read\r\n    };\r\n}\r\nfunction createQuery$1(previous, queryList, predicate, read) {\r\n    return {\r\n        next: previous,\r\n        list: queryList,\r\n        predicate: createPredicate(predicate, read),\r\n        values: queryList._valuesTree\r\n    };\r\n}\r\nvar QueryList_ = /** @class */ (function () {\r\n    function QueryList_() {\r\n        this.dirty = true;\r\n        this.changes = new EventEmitter();\r\n        this._values = [];\r\n        /** @internal */\r\n        this._valuesTree = [];\r\n    }\r\n    Object.defineProperty(QueryList_.prototype, \"length\", {\r\n        get: function () { return this._values.length; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(QueryList_.prototype, \"first\", {\r\n        get: function () {\r\n            var values = this._values;\r\n            return values.length ? values[0] : null;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(QueryList_.prototype, \"last\", {\r\n        get: function () {\r\n            var values = this._values;\r\n            return values.length ? values[values.length - 1] : null;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * See\r\n     * [Array.map](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map)\r\n     */\r\n    /**\r\n       * See\r\n       * [Array.map](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map)\r\n       */\r\n    QueryList_.prototype.map = /**\r\n       * See\r\n       * [Array.map](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map)\r\n       */\r\n    function (fn) { return this._values.map(fn); };\r\n    /**\r\n     * See\r\n     * [Array.filter](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter)\r\n     */\r\n    /**\r\n       * See\r\n       * [Array.filter](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter)\r\n       */\r\n    QueryList_.prototype.filter = /**\r\n       * See\r\n       * [Array.filter](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter)\r\n       */\r\n    function (fn) {\r\n        return this._values.filter(fn);\r\n    };\r\n    /**\r\n     * See\r\n     * [Array.find](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find)\r\n     */\r\n    /**\r\n       * See\r\n       * [Array.find](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find)\r\n       */\r\n    QueryList_.prototype.find = /**\r\n       * See\r\n       * [Array.find](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find)\r\n       */\r\n    function (fn) {\r\n        return this._values.find(fn);\r\n    };\r\n    /**\r\n     * See\r\n     * [Array.reduce](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce)\r\n     */\r\n    /**\r\n       * See\r\n       * [Array.reduce](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce)\r\n       */\r\n    QueryList_.prototype.reduce = /**\r\n       * See\r\n       * [Array.reduce](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce)\r\n       */\r\n    function (fn, init) {\r\n        return this._values.reduce(fn, init);\r\n    };\r\n    /**\r\n     * See\r\n     * [Array.forEach](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach)\r\n     */\r\n    /**\r\n       * See\r\n       * [Array.forEach](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach)\r\n       */\r\n    QueryList_.prototype.forEach = /**\r\n       * See\r\n       * [Array.forEach](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach)\r\n       */\r\n    function (fn) { this._values.forEach(fn); };\r\n    /**\r\n     * See\r\n     * [Array.some](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some)\r\n     */\r\n    /**\r\n       * See\r\n       * [Array.some](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some)\r\n       */\r\n    QueryList_.prototype.some = /**\r\n       * See\r\n       * [Array.some](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some)\r\n       */\r\n    function (fn) {\r\n        return this._values.some(fn);\r\n    };\r\n    QueryList_.prototype.toArray = function () { return this._values.slice(0); };\r\n    QueryList_.prototype[getSymbolIterator()] = function () { return this._values[getSymbolIterator()](); };\r\n    QueryList_.prototype.toString = function () { return this._values.toString(); };\r\n    QueryList_.prototype.reset = function (res) {\r\n        this._values = flatten$1(res);\r\n        this.dirty = false;\r\n    };\r\n    QueryList_.prototype.notifyOnChanges = function () { this.changes.emit(this); };\r\n    QueryList_.prototype.setDirty = function () { this.dirty = true; };\r\n    QueryList_.prototype.destroy = function () {\r\n        this.changes.complete();\r\n        this.changes.unsubscribe();\r\n    };\r\n    return QueryList_;\r\n}());\r\nvar QueryList$1 = QueryList_;\r\n/**\r\n * Creates and returns a QueryList.\r\n *\r\n * @param memoryIndex The index in memory where the QueryList should be saved. If null,\r\n * this is is a content query and the QueryList will be saved later through directiveCreate.\r\n * @param predicate The type for which the query will search\r\n * @param descend Whether or not to descend into children\r\n * @param read What to save in the query\r\n * @returns QueryList<T>\r\n */\r\nfunction query(memoryIndex, predicate, descend, read) {\r\n    ngDevMode && assertPreviousIsParent();\r\n    var queryList = new QueryList$1();\r\n    var queries = getCurrentQueries(LQueries_);\r\n    queries.track(queryList, predicate, descend, read);\r\n    if (memoryIndex != null) {\r\n        store(memoryIndex, queryList);\r\n    }\r\n    return queryList;\r\n}\r\n/**\r\n * Refreshes a query by combining matches from all active views and removing matches from deleted\r\n * views.\r\n * Returns true if a query got dirty during change detection, false otherwise.\r\n */\r\nfunction queryRefresh(queryList) {\r\n    var queryListImpl = queryList;\r\n    if (queryList.dirty) {\r\n        queryList.reset(queryListImpl._valuesTree);\r\n        queryList.notifyOnChanges();\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\n\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nvar BRAND = '__SANITIZER_TRUSTED_BRAND__';\r\n/**\r\n * An `html` sanitizer which converts untrusted `html` **string** into trusted string by removing\r\n * dangerous content.\r\n *\r\n * This method parses the `html` and locates potentially dangerous content (such as urls and\r\n * javascript) and removes it.\r\n *\r\n * It is possible to mark a string as trusted by calling {@link bypassSanitizationTrustHtml}.\r\n *\r\n * @param unsafeHtml untrusted `html`, typically from the user.\r\n * @returns `html` string which is safe to display to user, because all of the dangerous javascript\r\n * and urls have been removed.\r\n */\r\nfunction sanitizeHtml(unsafeHtml) {\r\n    if (unsafeHtml instanceof String && unsafeHtml[BRAND] === 'Html') {\r\n        return unsafeHtml.toString();\r\n    }\r\n    return _sanitizeHtml(document, stringify$1(unsafeHtml));\r\n}\r\n/**\r\n * A `style` sanitizer which converts untrusted `style` **string** into trusted string by removing\r\n * dangerous content.\r\n *\r\n * This method parses the `style` and locates potentially dangerous content (such as urls and\r\n * javascript) and removes it.\r\n *\r\n * It is possible to mark a string as trusted by calling {@link bypassSanitizationTrustStyle}.\r\n *\r\n * @param unsafeStyle untrusted `style`, typically from the user.\r\n * @returns `style` string which is safe to bind to the `style` properties, because all of the\r\n * dangerous javascript and urls have been removed.\r\n */\r\nfunction sanitizeStyle(unsafeStyle) {\r\n    if (unsafeStyle instanceof String && unsafeStyle[BRAND] === 'Style') {\r\n        return unsafeStyle.toString();\r\n    }\r\n    return _sanitizeStyle(stringify$1(unsafeStyle));\r\n}\r\n/**\r\n * A `url` sanitizer which converts untrusted `url` **string** into trusted string by removing\r\n * dangerous\r\n * content.\r\n *\r\n * This method parses the `url` and locates potentially dangerous content (such as javascript) and\r\n * removes it.\r\n *\r\n * It is possible to mark a string as trusted by calling {@link bypassSanitizationTrustUrl}.\r\n *\r\n * @param unsafeUrl untrusted `url`, typically from the user.\r\n * @returns `url` string which is safe to bind to the `src` properties such as `<img src>`, because\r\n * all of the dangerous javascript has been removed.\r\n */\r\nfunction sanitizeUrl(unsafeUrl) {\r\n    if (unsafeUrl instanceof String && unsafeUrl[BRAND] === 'Url') {\r\n        return unsafeUrl.toString();\r\n    }\r\n    return _sanitizeUrl(stringify$1(unsafeUrl));\r\n}\r\n/**\r\n * A `url` sanitizer which only lets trusted `url`s through.\r\n *\r\n * This passes only `url`s marked trusted by calling {@link bypassSanitizationTrustResourceUrl}.\r\n *\r\n * @param unsafeResourceUrl untrusted `url`, typically from the user.\r\n * @returns `url` string which is safe to bind to the `src` properties such as `<img src>`, because\r\n * only trusted `url`s have been allowed to pass.\r\n */\r\nfunction sanitizeResourceUrl(unsafeResourceUrl) {\r\n    if (unsafeResourceUrl instanceof String &&\r\n        unsafeResourceUrl[BRAND] === 'ResourceUrl') {\r\n        return unsafeResourceUrl.toString();\r\n    }\r\n    throw new Error('unsafe value used in a resource URL context (see http://g.co/ng/security#xss)');\r\n}\r\n/**\r\n * A `script` sanitizer which only lets trusted javascript through.\r\n *\r\n * This passes only `script`s marked trusted by calling {@link bypassSanitizationTrustScript}.\r\n *\r\n * @param unsafeScript untrusted `script`, typically from the user.\r\n * @returns `url` string which is safe to bind to the `<script>` element such as `<img src>`,\r\n * because only trusted `scripts`s have been allowed to pass.\r\n */\r\n\r\n/**\r\n * Mark `html` string as trusted.\r\n *\r\n * This function wraps the trusted string in `String` and brands it in a way which makes it\r\n * recognizable to {@link htmlSanitizer} to be trusted implicitly.\r\n *\r\n * @param trustedHtml `html` string which needs to be implicitly trusted.\r\n * @returns a `html` `String` which has been branded to be implicitly trusted.\r\n */\r\nfunction bypassSanitizationTrustHtml(trustedHtml) {\r\n    return bypassSanitizationTrustString(trustedHtml, 'Html');\r\n}\r\n/**\r\n * Mark `style` string as trusted.\r\n *\r\n * This function wraps the trusted string in `String` and brands it in a way which makes it\r\n * recognizable to {@link styleSanitizer} to be trusted implicitly.\r\n *\r\n * @param trustedStyle `style` string which needs to be implicitly trusted.\r\n * @returns a `style` `String` which has been branded to be implicitly trusted.\r\n */\r\nfunction bypassSanitizationTrustStyle(trustedStyle) {\r\n    return bypassSanitizationTrustString(trustedStyle, 'Style');\r\n}\r\n/**\r\n * Mark `script` string as trusted.\r\n *\r\n * This function wraps the trusted string in `String` and brands it in a way which makes it\r\n * recognizable to {@link scriptSanitizer} to be trusted implicitly.\r\n *\r\n * @param trustedScript `script` string which needs to be implicitly trusted.\r\n * @returns a `script` `String` which has been branded to be implicitly trusted.\r\n */\r\nfunction bypassSanitizationTrustScript(trustedScript) {\r\n    return bypassSanitizationTrustString(trustedScript, 'Script');\r\n}\r\n/**\r\n * Mark `url` string as trusted.\r\n *\r\n * This function wraps the trusted string in `String` and brands it in a way which makes it\r\n * recognizable to {@link urlSanitizer} to be trusted implicitly.\r\n *\r\n * @param trustedUrl `url` string which needs to be implicitly trusted.\r\n * @returns a `url` `String` which has been branded to be implicitly trusted.\r\n */\r\nfunction bypassSanitizationTrustUrl(trustedUrl) {\r\n    return bypassSanitizationTrustString(trustedUrl, 'Url');\r\n}\r\n/**\r\n * Mark `url` string as trusted.\r\n *\r\n * This function wraps the trusted string in `String` and brands it in a way which makes it\r\n * recognizable to {@link resourceUrlSanitizer} to be trusted implicitly.\r\n *\r\n * @param trustedResourceUrl `url` string which needs to be implicitly trusted.\r\n * @returns a `url` `String` which has been branded to be implicitly trusted.\r\n */\r\nfunction bypassSanitizationTrustResourceUrl(trustedResourceUrl) {\r\n    return bypassSanitizationTrustString(trustedResourceUrl, 'ResourceUrl');\r\n}\r\nfunction bypassSanitizationTrustString(trustedString, mode) {\r\n    var trusted = new String(trustedString);\r\n    trusted[BRAND] = mode;\r\n    return trusted;\r\n}\r\n\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n// clang-format on\r\n\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n// This file only reexports content of the `src` folder. Keep it that way.\r\n\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n/**\r\n * Generated bundle index. Do not edit.\r\n */\r\n\r\nexport { _iterableDiffersFactory as ɵangular_packages_core_core_j, _keyValueDiffersFactory as ɵangular_packages_core_core_k, _localeFactory as ɵangular_packages_core_core_l, _appIdRandomProviderFactory as ɵangular_packages_core_core_f, defaultKeyValueDiffers as ɵangular_packages_core_core_g, DefaultIterableDifferFactory as ɵangular_packages_core_core_h, DefaultKeyValueDifferFactory as ɵangular_packages_core_core_i, ReflectiveInjector_ as ɵangular_packages_core_core_c, ReflectiveDependency as ɵangular_packages_core_core_d, resolveReflectiveProviders as ɵangular_packages_core_core_e, wtfEnabled as ɵangular_packages_core_core_m, createScope as ɵangular_packages_core_core_o, detectWTF as ɵangular_packages_core_core_n, endTimeRange as ɵangular_packages_core_core_r, leave as ɵangular_packages_core_core_p, startTimeRange as ɵangular_packages_core_core_q, getOrCreateChangeDetectorRef as ɵangular_packages_core_core_v, getOrCreateContainerRef as ɵangular_packages_core_core_x, getOrCreateInjectable as ɵangular_packages_core_core_w, getOrCreateNodeInjector as ɵangular_packages_core_core_u, getOrCreateTemplateRef as ɵangular_packages_core_core_y, bindingUpdated as ɵangular_packages_core_core_bb, bindingUpdated2 as ɵangular_packages_core_core_bd, bindingUpdated4 as ɵangular_packages_core_core_be, checkAndUpdateBinding$1 as ɵangular_packages_core_core_bc, consumeBinding as ɵangular_packages_core_core_ba, getCreationMode as ɵangular_packages_core_core_z, makeParamDecorator as ɵangular_packages_core_core_a, makePropDecorator as ɵangular_packages_core_core_b, _def as ɵangular_packages_core_core_s, DebugContext as ɵangular_packages_core_core_t, createPlatform, assertPlatform, destroyPlatform, getPlatform, PlatformRef, ApplicationRef, enableProdMode, isDevMode, createPlatformFactory, NgProbeToken, APP_ID, PACKAGE_ROOT_URL, PLATFORM_INITIALIZER, PLATFORM_ID, APP_BOOTSTRAP_LISTENER, APP_INITIALIZER, ApplicationInitStatus, DebugElement, DebugNode, asNativeElements, getDebugNode, Testability, TestabilityRegistry, setTestabilityGetter, TRANSLATIONS, TRANSLATIONS_FORMAT, LOCALE_ID, MissingTranslationStrategy, ApplicationModule, wtfCreateScope, wtfLeave, wtfStartTimeRange, wtfEndTimeRange, Type, EventEmitter, ErrorHandler, Sanitizer, SecurityContext, ANALYZE_FOR_ENTRY_COMPONENTS, Attribute, ContentChild, ContentChildren, Query, ViewChild, ViewChildren, Component, Directive, HostBinding, HostListener, Input, Output, Pipe, CUSTOM_ELEMENTS_SCHEMA, NO_ERRORS_SCHEMA, NgModule, ViewEncapsulation, Version, VERSION, defineInjectable, defineInjector, forwardRef, resolveForwardRef, Injectable, inject, INJECTOR, Injector, ReflectiveInjector, createInjector, ResolvedReflectiveFactory, ReflectiveKey, InjectionToken, Inject, Optional, Self, SkipSelf, Host, NgZone, RenderComponentType, Renderer, Renderer2, RendererFactory2, RendererStyleFlags2, RootRenderer, COMPILER_OPTIONS, Compiler, CompilerFactory, ModuleWithComponentFactories, ComponentFactory, ComponentRef, ComponentFactoryResolver, ElementRef, NgModuleFactory, NgModuleRef, NgModuleFactoryLoader, getModuleFactory, QueryList, SystemJsNgModuleLoader, SystemJsNgModuleLoaderConfig, TemplateRef, ViewContainerRef, EmbeddedViewRef, ViewRef, ChangeDetectionStrategy, ChangeDetectorRef, DefaultIterableDiffer, IterableDiffers, KeyValueDiffers, SimpleChange, WrappedValue, platformCore, ALLOW_MULTIPLE_PLATFORMS as ɵALLOW_MULTIPLE_PLATFORMS, APP_ID_RANDOM_PROVIDER as ɵAPP_ID_RANDOM_PROVIDER, defaultIterableDiffers as ɵdefaultIterableDiffers, devModeEqual as ɵdevModeEqual, isListLikeIterable as ɵisListLikeIterable, ChangeDetectorStatus as ɵChangeDetectorStatus, isDefaultChangeDetectionStrategy as ɵisDefaultChangeDetectionStrategy, Console as ɵConsole, inject as ɵinject, setCurrentInjector as ɵsetCurrentInjector, APP_ROOT as ɵAPP_ROOT, ComponentFactory as ɵComponentFactory, CodegenComponentFactoryResolver as ɵCodegenComponentFactoryResolver, ReflectionCapabilities as ɵReflectionCapabilities, RenderDebugInfo as ɵRenderDebugInfo, _sanitizeHtml as ɵ_sanitizeHtml, _sanitizeStyle as ɵ_sanitizeStyle, _sanitizeUrl as ɵ_sanitizeUrl, _global as ɵglobal, looseIdentical as ɵlooseIdentical, stringify as ɵstringify, makeDecorator as ɵmakeDecorator, isObservable as ɵisObservable, isPromise as ɵisPromise, clearOverrides as ɵclearOverrides, overrideComponentView as ɵoverrideComponentView, overrideProvider as ɵoverrideProvider, NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR as ɵNOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR, defineComponent as ɵdefineComponent, defineDirective as ɵdefineDirective, definePipe as ɵdefinePipe, detectChanges as ɵdetectChanges, renderComponent as ɵrenderComponent, directiveInject as ɵdirectiveInject, injectTemplateRef as ɵinjectTemplateRef, injectViewContainerRef as ɵinjectViewContainerRef, injectChangeDetectorRef as ɵinjectChangeDetectorRef, injectAttribute as ɵinjectAttribute, PublicFeature as ɵPublicFeature, NgOnChangesFeature as ɵNgOnChangesFeature, markDirty as ɵmarkDirty, NO_CHANGE as ɵNC, container as ɵC, elementStart as ɵE, listener as ɵL, text as ɵT, embeddedViewStart as ɵV, query as ɵQ, loadDirective as ɵd, projection as ɵP, bind as ɵb, interpolation1 as ɵi1, interpolation2 as ɵi2, interpolation3 as ɵi3, interpolation4 as ɵi4, interpolation5 as ɵi5, interpolation6 as ɵi6, interpolation7 as ɵi7, interpolation8 as ɵi8, interpolationV as ɵiV, pipeBind1 as ɵpb1, pipeBind2 as ɵpb2, pipeBind3 as ɵpb3, pipeBind4 as ɵpb4, pipeBindV as ɵpbV, pureFunction0 as ɵf0, pureFunction1 as ɵf1, pureFunction2 as ɵf2, pureFunction3 as ɵf3, pureFunction4 as ɵf4, pureFunction5 as ɵf5, pureFunction6 as ɵf6, pureFunction7 as ɵf7, pureFunction8 as ɵf8, pureFunctionV as ɵfV, containerRefreshStart as ɵcR, containerRefreshEnd as ɵcr, queryRefresh as ɵqR, elementEnd as ɵe, elementProperty as ɵp, projectionDef as ɵpD, elementAttribute as ɵa, elementStyle as ɵs, elementStyleNamed as ɵsn, elementClass as ɵk, elementClassNamed as ɵkn, textBinding as ɵt, embeddedViewEnd as ɵv, store as ɵst, load as ɵld, pipe as ɵPp, whenRendered as ɵwhenRendered, bypassSanitizationTrustHtml as ɵbypassSanitizationTrustHtml, bypassSanitizationTrustStyle as ɵbypassSanitizationTrustStyle, bypassSanitizationTrustScript as ɵbypassSanitizationTrustScript, bypassSanitizationTrustUrl as ɵbypassSanitizationTrustUrl, bypassSanitizationTrustResourceUrl as ɵbypassSanitizationTrustResourceUrl, sanitizeHtml as ɵsanitizeHtml, sanitizeStyle as ɵsanitizeStyle, sanitizeUrl as ɵsanitizeUrl, sanitizeResourceUrl as ɵsanitizeResourceUrl, registerModuleFactory as ɵregisterModuleFactory, EMPTY_ARRAY$2 as ɵEMPTY_ARRAY, EMPTY_MAP as ɵEMPTY_MAP, anchorDef as ɵand, createComponentFactory as ɵccf, createNgModuleFactory as ɵcmf, createRendererType2 as ɵcrt, directiveDef as ɵdid, elementDef as ɵeld, elementEventFullName as ɵelementEventFullName, getComponentViewDefinitionFactory as ɵgetComponentViewDefinitionFactory, inlineInterpolate as ɵinlineInterpolate, interpolate as ɵinterpolate, moduleDef as ɵmod, moduleProvideDef as ɵmpd, ngContentDef as ɵncd, nodeValue as ɵnov, pipeDef as ɵpid, providerDef as ɵprd, pureArrayDef as ɵpad, pureObjectDef as ɵpod, purePipeDef as ɵppd, queryDef as ɵqud, textDef as ɵted, unwrapValue as ɵunv, viewDef as ɵvid };\r\n//# sourceMappingURL=core.js.map\r\n","/** PURE_IMPORTS_START tslib,_Subject,_Subscription,_util_tryCatch,_util_errorObject,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subject } from '../Subject';\nimport { Subscription } from '../Subscription';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n/**\n * Branch out the source Observable values as a nested Observable starting from\n * an emission from `openings` and ending when the output of `closingSelector`\n * emits.\n *\n * <span class=\"informal\">It's like {@link bufferToggle}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowToggle.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits windows that contain those items\n * emitted by the source Observable between the time when the `openings`\n * Observable emits an item and when the Observable returned by\n * `closingSelector` emits an item.\n *\n * @example <caption>Every other second, emit the click events from the next 500ms</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var openings = Rx.Observable.interval(1000);\n * var result = clicks.windowToggle(openings, i =>\n *   i % 2 ? Rx.Observable.interval(500) : Rx.Observable.empty()\n * ).mergeAll();\n * result.subscribe(x => console.log(x));\n *\n * @see {@link window}\n * @see {@link windowCount}\n * @see {@link windowTime}\n * @see {@link windowWhen}\n * @see {@link bufferToggle}\n *\n * @param {Observable<O>} openings An observable of notifications to start new\n * windows.\n * @param {function(value: O): Observable} closingSelector A function that takes\n * the value emitted by the `openings` observable and returns an Observable,\n * which, when it emits (either `next` or `complete`), signals that the\n * associated window should complete.\n * @return {Observable<Observable<T>>} An observable of windows, which in turn\n * are Observables.\n * @method windowToggle\n * @owner Observable\n */\nexport function windowToggle(openings, closingSelector) {\n    return function (source) { return source.lift(new WindowToggleOperator(openings, closingSelector)); };\n}\nvar WindowToggleOperator = /*@__PURE__*/ (function () {\n    function WindowToggleOperator(openings, closingSelector) {\n        this.openings = openings;\n        this.closingSelector = closingSelector;\n    }\n    WindowToggleOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new WindowToggleSubscriber(subscriber, this.openings, this.closingSelector));\n    };\n    return WindowToggleOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar WindowToggleSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(WindowToggleSubscriber, _super);\n    function WindowToggleSubscriber(destination, openings, closingSelector) {\n        var _this = _super.call(this, destination) || this;\n        _this.openings = openings;\n        _this.closingSelector = closingSelector;\n        _this.contexts = [];\n        _this.add(_this.openSubscription = subscribeToResult(_this, openings, openings));\n        return _this;\n    }\n    WindowToggleSubscriber.prototype._next = function (value) {\n        var contexts = this.contexts;\n        if (contexts) {\n            var len = contexts.length;\n            for (var i = 0; i < len; i++) {\n                contexts[i].window.next(value);\n            }\n        }\n    };\n    WindowToggleSubscriber.prototype._error = function (err) {\n        var contexts = this.contexts;\n        this.contexts = null;\n        if (contexts) {\n            var len = contexts.length;\n            var index = -1;\n            while (++index < len) {\n                var context_1 = contexts[index];\n                context_1.window.error(err);\n                context_1.subscription.unsubscribe();\n            }\n        }\n        _super.prototype._error.call(this, err);\n    };\n    WindowToggleSubscriber.prototype._complete = function () {\n        var contexts = this.contexts;\n        this.contexts = null;\n        if (contexts) {\n            var len = contexts.length;\n            var index = -1;\n            while (++index < len) {\n                var context_2 = contexts[index];\n                context_2.window.complete();\n                context_2.subscription.unsubscribe();\n            }\n        }\n        _super.prototype._complete.call(this);\n    };\n    /** @deprecated This is an internal implementation detail, do not use. */\n    WindowToggleSubscriber.prototype._unsubscribe = function () {\n        var contexts = this.contexts;\n        this.contexts = null;\n        if (contexts) {\n            var len = contexts.length;\n            var index = -1;\n            while (++index < len) {\n                var context_3 = contexts[index];\n                context_3.window.unsubscribe();\n                context_3.subscription.unsubscribe();\n            }\n        }\n    };\n    WindowToggleSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        if (outerValue === this.openings) {\n            var closingSelector = this.closingSelector;\n            var closingNotifier = tryCatch(closingSelector)(innerValue);\n            if (closingNotifier === errorObject) {\n                return this.error(errorObject.e);\n            }\n            else {\n                var window_1 = new Subject();\n                var subscription = new Subscription();\n                var context_4 = { window: window_1, subscription: subscription };\n                this.contexts.push(context_4);\n                var innerSubscription = subscribeToResult(this, closingNotifier, context_4);\n                if (innerSubscription.closed) {\n                    this.closeWindow(this.contexts.length - 1);\n                }\n                else {\n                    innerSubscription.context = context_4;\n                    subscription.add(innerSubscription);\n                }\n                this.destination.next(window_1);\n            }\n        }\n        else {\n            this.closeWindow(this.contexts.indexOf(outerValue));\n        }\n    };\n    WindowToggleSubscriber.prototype.notifyError = function (err) {\n        this.error(err);\n    };\n    WindowToggleSubscriber.prototype.notifyComplete = function (inner) {\n        if (inner !== this.openSubscription) {\n            this.closeWindow(this.contexts.indexOf(inner.context));\n        }\n    };\n    WindowToggleSubscriber.prototype.closeWindow = function (index) {\n        if (index === -1) {\n            return;\n        }\n        var contexts = this.contexts;\n        var context = contexts[index];\n        var window = context.window, subscription = context.subscription;\n        contexts.splice(index, 1);\n        window.complete();\n        subscription.unsubscribe();\n    };\n    return WindowToggleSubscriber;\n}(OuterSubscriber));\n//# sourceMappingURL=windowToggle.js.map\n","/** PURE_IMPORTS_START tslib,_Subject,_util_tryCatch,_util_errorObject,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subject } from '../Subject';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n/**\n * Branch out the source Observable values as a nested Observable using a\n * factory function of closing Observables to determine when to start a new\n * window.\n *\n * <span class=\"informal\">It's like {@link bufferWhen}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowWhen.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits connected, non-overlapping windows.\n * It emits the current window and opens a new one whenever the Observable\n * produced by the specified `closingSelector` function emits an item. The first\n * window is opened immediately when subscribing to the output Observable.\n *\n * @example <caption>Emit only the first two clicks events in every window of [1-5] random seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks\n *   .windowWhen(() => Rx.Observable.interval(1000 + Math.random() * 4000))\n *   .map(win => win.take(2)) // each window has at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @see {@link window}\n * @see {@link windowCount}\n * @see {@link windowTime}\n * @see {@link windowToggle}\n * @see {@link bufferWhen}\n *\n * @param {function(): Observable} closingSelector A function that takes no\n * arguments and returns an Observable that signals (on either `next` or\n * `complete`) when to close the previous window and start a new one.\n * @return {Observable<Observable<T>>} An observable of windows, which in turn\n * are Observables.\n * @method windowWhen\n * @owner Observable\n */\nexport function windowWhen(closingSelector) {\n    return function windowWhenOperatorFunction(source) {\n        return source.lift(new WindowOperator(closingSelector));\n    };\n}\nvar WindowOperator = /*@__PURE__*/ (function () {\n    function WindowOperator(closingSelector) {\n        this.closingSelector = closingSelector;\n    }\n    WindowOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new WindowSubscriber(subscriber, this.closingSelector));\n    };\n    return WindowOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar WindowSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(WindowSubscriber, _super);\n    function WindowSubscriber(destination, closingSelector) {\n        var _this = _super.call(this, destination) || this;\n        _this.destination = destination;\n        _this.closingSelector = closingSelector;\n        _this.openWindow();\n        return _this;\n    }\n    WindowSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.openWindow(innerSub);\n    };\n    WindowSubscriber.prototype.notifyError = function (error, innerSub) {\n        this._error(error);\n    };\n    WindowSubscriber.prototype.notifyComplete = function (innerSub) {\n        this.openWindow(innerSub);\n    };\n    WindowSubscriber.prototype._next = function (value) {\n        this.window.next(value);\n    };\n    WindowSubscriber.prototype._error = function (err) {\n        this.window.error(err);\n        this.destination.error(err);\n        this.unsubscribeClosingNotification();\n    };\n    WindowSubscriber.prototype._complete = function () {\n        this.window.complete();\n        this.destination.complete();\n        this.unsubscribeClosingNotification();\n    };\n    WindowSubscriber.prototype.unsubscribeClosingNotification = function () {\n        if (this.closingNotification) {\n            this.closingNotification.unsubscribe();\n        }\n    };\n    WindowSubscriber.prototype.openWindow = function (innerSub) {\n        if (innerSub === void 0) {\n            innerSub = null;\n        }\n        if (innerSub) {\n            this.remove(innerSub);\n            innerSub.unsubscribe();\n        }\n        var prevWindow = this.window;\n        if (prevWindow) {\n            prevWindow.complete();\n        }\n        var window = this.window = new Subject();\n        this.destination.next(window);\n        var closingNotifier = tryCatch(this.closingSelector)();\n        if (closingNotifier === errorObject) {\n            var err = errorObject.e;\n            this.destination.error(err);\n            this.window.error(err);\n        }\n        else {\n            this.add(this.closingNotification = subscribeToResult(this, closingNotifier));\n        }\n    };\n    return WindowSubscriber;\n}(OuterSubscriber));\n//# sourceMappingURL=windowWhen.js.map\n","/** PURE_IMPORTS_START tslib,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n/* tslint:enable:max-line-length */\n/**\n * Combines the source Observable with other Observables to create an Observable\n * whose values are calculated from the latest values of each, only when the\n * source emits.\n *\n * <span class=\"informal\">Whenever the source Observable emits a value, it\n * computes a formula using that value plus the latest values from other input\n * Observables, then emits the output of that formula.</span>\n *\n * <img src=\"./img/withLatestFrom.png\" width=\"100%\">\n *\n * `withLatestFrom` combines each value from the source Observable (the\n * instance) with the latest values from the other input Observables only when\n * the source emits a value, optionally using a `project` function to determine\n * the value to be emitted on the output Observable. All input Observables must\n * emit at least one value before the output Observable will emit a value.\n *\n * @example <caption>On every click event, emit an array with the latest timer event plus the click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var timer = Rx.Observable.interval(1000);\n * var result = clicks.withLatestFrom(timer);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link combineLatest}\n *\n * @param {ObservableInput} other An input Observable to combine with the source\n * Observable. More than one input Observables may be given as argument.\n * @param {Function} [project] Projection function for combining values\n * together. Receives all values in order of the Observables passed, where the\n * first parameter is a value from the source Observable. (e.g.\n * `a.withLatestFrom(b, c, (a1, b1, c1) => a1 + b1 + c1)`). If this is not\n * passed, arrays will be emitted on the output Observable.\n * @return {Observable} An Observable of projected values from the most recent\n * values from each input Observable, or an array of the most recent values from\n * each input Observable.\n * @method withLatestFrom\n * @owner Observable\n */\nexport function withLatestFrom() {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n    }\n    return function (source) {\n        var project;\n        if (typeof args[args.length - 1] === 'function') {\n            project = args.pop();\n        }\n        var observables = args;\n        return source.lift(new WithLatestFromOperator(observables, project));\n    };\n}\nvar WithLatestFromOperator = /*@__PURE__*/ (function () {\n    function WithLatestFromOperator(observables, project) {\n        this.observables = observables;\n        this.project = project;\n    }\n    WithLatestFromOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new WithLatestFromSubscriber(subscriber, this.observables, this.project));\n    };\n    return WithLatestFromOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar WithLatestFromSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(WithLatestFromSubscriber, _super);\n    function WithLatestFromSubscriber(destination, observables, project) {\n        var _this = _super.call(this, destination) || this;\n        _this.observables = observables;\n        _this.project = project;\n        _this.toRespond = [];\n        var len = observables.length;\n        _this.values = new Array(len);\n        for (var i = 0; i < len; i++) {\n            _this.toRespond.push(i);\n        }\n        for (var i = 0; i < len; i++) {\n            var observable = observables[i];\n            _this.add(subscribeToResult(_this, observable, observable, i));\n        }\n        return _this;\n    }\n    WithLatestFromSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.values[outerIndex] = innerValue;\n        var toRespond = this.toRespond;\n        if (toRespond.length > 0) {\n            var found = toRespond.indexOf(outerIndex);\n            if (found !== -1) {\n                toRespond.splice(found, 1);\n            }\n        }\n    };\n    WithLatestFromSubscriber.prototype.notifyComplete = function () {\n        // noop\n    };\n    WithLatestFromSubscriber.prototype._next = function (value) {\n        if (this.toRespond.length === 0) {\n            var args = [value].concat(this.values);\n            if (this.project) {\n                this._tryProject(args);\n            }\n            else {\n                this.destination.next(args);\n            }\n        }\n    };\n    WithLatestFromSubscriber.prototype._tryProject = function (args) {\n        var result;\n        try {\n            result = this.project.apply(this, args);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        this.destination.next(result);\n    };\n    return WithLatestFromSubscriber;\n}(OuterSubscriber));\n//# sourceMappingURL=withLatestFrom.js.map\n","/** PURE_IMPORTS_START _Observable,_util_isScheduler,_operators_mergeAll,_fromArray PURE_IMPORTS_END */\nimport { Observable } from '../Observable';\nimport { isScheduler } from '../util/isScheduler';\nimport { mergeAll } from '../operators/mergeAll';\nimport { fromArray } from './fromArray';\n/* tslint:enable:max-line-length */\n/**\n * Creates an output Observable which concurrently emits all values from every\n * given input Observable.\n *\n * <span class=\"informal\">Flattens multiple Observables together by blending\n * their values into one Observable.</span>\n *\n * <img src=\"./img/merge.png\" width=\"100%\">\n *\n * `merge` subscribes to each given input Observable (as arguments), and simply\n * forwards (without doing any transformation) all the values from all the input\n * Observables to the output Observable. The output Observable only completes\n * once all input Observables have completed. Any error delivered by an input\n * Observable will be immediately emitted on the output Observable.\n *\n * @example <caption>Merge together two Observables: 1s interval and clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var timer = Rx.Observable.interval(1000);\n * var clicksOrTimer = Rx.Observable.merge(clicks, timer);\n * clicksOrTimer.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // timer will emit ascending values, one every second(1000ms) to console\n * // clicks logs MouseEvents to console everytime the \"document\" is clicked\n * // Since the two streams are merged you see these happening\n * // as they occur.\n *\n * @example <caption>Merge together 3 Observables, but only 2 run concurrently</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var concurrent = 2; // the argument\n * var merged = Rx.Observable.merge(timer1, timer2, timer3, concurrent);\n * merged.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // - First timer1 and timer2 will run concurrently\n * // - timer1 will emit a value every 1000ms for 10 iterations\n * // - timer2 will emit a value every 2000ms for 6 iterations\n * // - after timer1 hits it's max iteration, timer2 will\n * //   continue, and timer3 will start to run concurrently with timer2\n * // - when timer2 hits it's max iteration it terminates, and\n * //   timer3 will continue to emit a value every 500ms until it is complete\n *\n * @see {@link mergeAll}\n * @see {@link mergeMap}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n *\n * @param {...ObservableInput} observables Input Observables to merge together.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @param {Scheduler} [scheduler=null] The IScheduler to use for managing\n * concurrency of input Observables.\n * @return {Observable} an Observable that emits items that are the result of\n * every input Observable.\n * @static true\n * @name merge\n * @owner Observable\n */\nexport function merge() {\n    var observables = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        observables[_i] = arguments[_i];\n    }\n    var concurrent = Number.POSITIVE_INFINITY;\n    var scheduler = null;\n    var last = observables[observables.length - 1];\n    if (isScheduler(last)) {\n        scheduler = observables.pop();\n        if (observables.length > 1 && typeof observables[observables.length - 1] === 'number') {\n            concurrent = observables.pop();\n        }\n    }\n    else if (typeof last === 'number') {\n        concurrent = observables.pop();\n    }\n    if (scheduler === null && observables.length === 1 && observables[0] instanceof Observable) {\n        return observables[0];\n    }\n    return mergeAll(concurrent)(fromArray(observables, scheduler));\n}\n//# sourceMappingURL=merge.js.map\n","/** PURE_IMPORTS_START _mergeMap,_util_identity PURE_IMPORTS_END */\nimport { mergeMap } from './mergeMap';\nimport { identity } from '../util/identity';\n/**\n * Converts a higher-order Observable into a first-order Observable which\n * concurrently delivers all values that are emitted on the inner Observables.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables.</span>\n *\n * <img src=\"./img/mergeAll.png\" width=\"100%\">\n *\n * `mergeAll` subscribes to an Observable that emits Observables, also known as\n * a higher-order Observable. Each time it observes one of these emitted inner\n * Observables, it subscribes to that and delivers all the values from the\n * inner Observable on the output Observable. The output Observable only\n * completes once all inner Observables have completed. Any error delivered by\n * a inner Observable will be immediately emitted on the output Observable.\n *\n * @example <caption>Spawn a new interval Observable for each click event, and blend their outputs as one Observable</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000));\n * var firstOrder = higherOrder.mergeAll();\n * firstOrder.subscribe(x => console.log(x));\n *\n * @example <caption>Count from 0 to 9 every second for each click, but only allow 2 concurrent timers</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000).take(10));\n * var firstOrder = higherOrder.mergeAll(2);\n * firstOrder.subscribe(x => console.log(x));\n *\n * @see {@link combineAll}\n * @see {@link concatAll}\n * @see {@link exhaust}\n * @see {@link merge}\n * @see {@link mergeMap}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n * @see {@link switch}\n * @see {@link zipAll}\n *\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of inner\n * Observables being subscribed to concurrently.\n * @return {Observable} An Observable that emits values coming from all the\n * inner Observables emitted by the source Observable.\n * @method mergeAll\n * @owner Observable\n */\nexport function mergeAll(concurrent) {\n    if (concurrent === void 0) {\n        concurrent = Number.POSITIVE_INFINITY;\n    }\n    return mergeMap(identity, concurrent);\n}\n//# sourceMappingURL=mergeAll.js.map\n","/** PURE_IMPORTS_START _Observable,_util_isPromise,_util_isArrayLike,_util_isInteropObservable,_util_isIterable,_fromArray,_fromPromise,_fromIterable,_fromObservable,_util_subscribeTo PURE_IMPORTS_END */\nimport { Observable } from '../Observable';\nimport { isPromise } from '../util/isPromise';\nimport { isArrayLike } from '../util/isArrayLike';\nimport { isInteropObservable } from '../util/isInteropObservable';\nimport { isIterable } from '../util/isIterable';\nimport { fromArray } from './fromArray';\nimport { fromPromise } from './fromPromise';\nimport { fromIterable } from './fromIterable';\nimport { fromObservable } from './fromObservable';\nimport { subscribeTo } from '../util/subscribeTo';\nexport function from(input, scheduler) {\n    if (!scheduler) {\n        if (input instanceof Observable) {\n            return input;\n        }\n        return new Observable(subscribeTo(input));\n    }\n    if (input != null) {\n        if (isInteropObservable(input)) {\n            return fromObservable(input, scheduler);\n        }\n        else if (isPromise(input)) {\n            return fromPromise(input, scheduler);\n        }\n        else if (isArrayLike(input)) {\n            return fromArray(input, scheduler);\n        }\n        else if (isIterable(input) || typeof input === 'string') {\n            return fromIterable(input, scheduler);\n        }\n    }\n    throw new TypeError((input !== null && typeof input || input) + ' is not observable');\n}\n//# sourceMappingURL=from.js.map\n","/** PURE_IMPORTS_START _observable_ConnectableObservable PURE_IMPORTS_END */\nimport { connectableObservableDescriptor } from '../observable/ConnectableObservable';\n/* tslint:enable:max-line-length */\n/**\n * Returns an Observable that emits the results of invoking a specified selector on items\n * emitted by a ConnectableObservable that shares a single subscription to the underlying stream.\n *\n * <img src=\"./img/multicast.png\" width=\"100%\">\n *\n * @param {Function|Subject} subjectOrSubjectFactory - Factory function to create an intermediate subject through\n * which the source sequence's elements will be multicast to the selector function\n * or Subject to push source elements into.\n * @param {Function} [selector] - Optional selector function that can use the multicasted source stream\n * as many times as needed, without causing multiple subscriptions to the source stream.\n * Subscribers to the given source will receive all notifications of the source from the\n * time of the subscription forward.\n * @return {Observable} An Observable that emits the results of invoking the selector\n * on the items emitted by a `ConnectableObservable` that shares a single subscription to\n * the underlying stream.\n * @method multicast\n * @owner Observable\n */\nexport function multicast(subjectOrSubjectFactory, selector) {\n    return function multicastOperatorFunction(source) {\n        var subjectFactory;\n        if (typeof subjectOrSubjectFactory === 'function') {\n            subjectFactory = subjectOrSubjectFactory;\n        }\n        else {\n            subjectFactory = function subjectFactory() {\n                return subjectOrSubjectFactory;\n            };\n        }\n        if (typeof selector === 'function') {\n            return source.lift(new MulticastOperator(subjectFactory, selector));\n        }\n        var connectable = Object.create(source, connectableObservableDescriptor);\n        connectable.source = source;\n        connectable.subjectFactory = subjectFactory;\n        return connectable;\n    };\n}\nvar MulticastOperator = /*@__PURE__*/ (function () {\n    function MulticastOperator(subjectFactory, selector) {\n        this.subjectFactory = subjectFactory;\n        this.selector = selector;\n    }\n    MulticastOperator.prototype.call = function (subscriber, source) {\n        var selector = this.selector;\n        var subject = this.subjectFactory();\n        var subscription = selector(subject).subscribe(subscriber);\n        subscription.add(source.subscribe(subject));\n        return subscription;\n    };\n    return MulticastOperator;\n}());\nexport { MulticastOperator };\n//# sourceMappingURL=multicast.js.map\n","import { Component, ɵrenderComponent as renderComponent } from '@angular/core';\r\nimport * as i0 from \"@angular/core\";\r\nexport class HelloWorld {\r\n    constructor() {\r\n        this.world = 'world';\r\n    }\r\n}\r\nHelloWorld.ngComponentDef = i0.ɵdefineComponent({ type: HelloWorld, selectors: [[\"hello-world\"]], factory: function HelloWorld_Factory() { return new HelloWorld(); }, template: function HelloWorld_Template(rf, ctx) { if (rf & 1) {\r\n        i0.ɵE(0, \"p\");\r\n        i0.ɵT(1);\r\n        i0.ɵe();\r\n    } if (rf & 2) {\r\n        i0.ɵt(1, i0.ɵi1(\"Hello \", ctx.world, \"\"));\r\n    } } });\r\nrenderComponent(HelloWorld);\r\n"],"names":["extendStatics","Object","setPrototypeOf","__proto__","Array","d","b","p","hasOwnProperty","this","constructor","prototype","create","__","__assign","assign","t","s","i","n","arguments","length","call","o","m","Symbol","iterator","next","value","done","r","e","ar","push","error","concat","__read","isFunction","x","_enable_super_gross_mode_that_will_cause_bad_things","config","Promise","undefined","useDeprecatedSynchronousErrorHandling","hostReportError","err","setTimeout","empty","closed","complete","isArray","isObject","tryCatchTarget","errorObject","tryCatcher","apply","tryCatch","fn","UnsubscriptionError","_super","errors","_this","map","join","name","tslib_1.__extends","Error","Subscription","unsubscribe","_parent","_parents","_subscriptions","_unsubscribe","hasErrors","index","len","remove","flattenUnsubscriptionErrors","sub","add","teardown","EMPTY","subscription","_addParent","tmp","subscriptions","subscriptionIndex","indexOf","splice","parent","reduce","errs","rxSubscriber","for","Subscriber","destinationOrNext","syncErrorValue","syncErrorThrown","syncErrorThrowable","isStopped","destination","emptyObserver","isTrustedSubscriber","trustedSubscriber","rxSubscriberSymbol","SafeSubscriber","subscriber","_next","_error","_complete","_unsubscribeAndRecycle","_parentSubscriber","observerOrNext","context","bind","_context","__tryOrSetError","__tryOrUnsub","wrappedComplete","obj","observable","noop","Observable","subscribe","_isScalar","_subscribe","lift","operator","source","sink","nextOrObserver","toSubscriber","_trySubscribe","forEach","promiseCtor","getPromiseCtor","resolve","reject","Symbol_observable","pipe","fns","operations","_i","input","prev","toPromise","ObjectUnsubscribedError","SubjectSubscription","subject","observers","subscriberIndex","SubjectSubscriber","Subject","hasError","thrownError","AnonymousSubject","copy","slice","asObservable","RefCountOperator","connectable","_refCount","refCounter","RefCountSubscriber","connection","connect","refCount","sharedConnection","_connection","connectableProto","subjectFactory","_isComplete","ConnectableObservable","getSubject","_subject","ConnectableSubscriber","higherOrderRefCount","connectableObservableDescriptor","writable","GroupDurationSubscriber","keySelector","elementSelector","durationSelector","subjectSelector","groups","attemptedToUnsubscribe","count","GroupBySubscriber","key","_group","Map","element","group","get","set","groupedObservable","GroupedObservable","duration","clear","removeGroup","delete","groupSubject","refCountSubscription","InnerRefCountSubscription","QueueAction","scheduler","work","schedule","state","delay","flush","execute","_execute","requestAsyncId","id","AsyncAction","pending","recycleAsyncId","setInterval","clearInterval","errored","errorValue","actions","Action","Scheduler","SchedulerAction","now","Date","queue","QueueScheduler","AsyncScheduler","delegate","active","scheduled","action","shift","emptyScheduled","isScheduler","subscribeToArray","array","fromArray","Notification","kind","hasValue","observe","observer","do","accept","toObservable","args","result","pop","of","createNext","undefinedValueNotification","createError","createComplete","completeNotification","ObserveOnSubscriber","dispatch","arg","notification","scheduleMessage","ObserveOnMessage","ReplayEvent","bufferSize","windowTime","Number","_events","_infiniteTimeWindow","_bufferSize","_windowTime","nextInfiniteTimeWindow","nextTimeWindow","ReplaySubject","_getNow","_trimBufferThenGetEvents","eventsCount","spliceCount","time","Math","max","identity","EmptyError","MapOperator","project","thisArg","MapSubscriber","OuterSubscriber","notifyNext","outerValue","innerValue","notifyError","notifyComplete","InnerSubscriber","outerIndex","subscribeToPromise","promise","then","getSymbolIterator","subscribeToIterable","iterable","Symbol_iterator","item","return","subscribeToObservable","obs","TypeError","isArrayLike","isPromise","subscribeTo","subscribeToResult","outerSubscriber","NONE","resultSelector","values","observables","CombineLatestSubscriber","toRespond","_tryResultSelector","MergeMapOperator","concurrent","MergeMapSubscriber","hasCompleted","buffer","_tryNext","_innerSub","ish","innerSub","hasFirst","RaceSubscriber","iterators","ZipSubscriber","StaticArrayIterator","StaticIterator","ZipBufferIterator","stillUnsubscribed","notifyInactive","checkIterators","shouldComplete","_tryresultSelector","nextResult","isComplete","Context","AuditSubscriber","throttled","innerSubscription","clearThrottle","closingNotifier","BufferSubscriber","BufferCountSubscriber","startBufferEvery","buffers","BufferSkipCountSubscriber","prevContext","closeContext","openContext","closeAction","bufferTimeSpan","bufferCreationInterval","dispatchBufferClose","debouncedNext","maxBufferSize","contexts","timespanOnly","dispatchBufferTimeSpanOnly","creationState","dispatchBufferCreation","BufferTimeSubscriber","filledBufferContext","context_1","onBufferFull","context_2","openings","closingSelector","BufferToggleSubscriber","closeBuffer","openBuffer","trySubscribe","subscribing","BufferWhenSubscriber","closingSubscription","selector","caught","CatchSubscriber","err2","predicate","CountSubscriber","_tryPredicate","durationSubscription","DebounceSubscriber","emitValue","dueTime","debouncedSubscription","lastValue","DebounceTimeSubscriber","clearDebounce","dispatchNext","defaultValue","isEmpty","DefaultIfEmptySubscriber","DelaySubscriber","delay_1","_schedule","scheduleNotification","message","DelayMessage","SubscriptionDelaySubscriber","delayDurationSelector","completed","delayNotifierSubscriptions","DelayWhenSubscriber","innerIndex","removeSubscription","tryComplete","delayNotifier","tryDelay","subscriptionIdx","notifierSubscription","subscriptionDelay","SubscriptionDelayObservable","sourceSubscribed","subscribeToSource","period","DeMaterializeSubscriber","flushes","Set","DistinctSubscriber","_useKeySelector","_finalizeNext","has","compare","hasKey","DistinctUntilChangedSubscriber","y","FilterSubscriber","_tapNext","_tapError","_tapComplete","TapSubscriber","total","TakeSubscriber","EverySubscriber","everyValueMatch","hasSubscription","SwitchFirstSubscriber","ExhaustMapSubscriber","tryNext","ExpandSubscriber","subscribeToProjection","callback","yieldIndex","FindValueSubscriber","IgnoreElementsSubscriber","IsEmptySubscriber","ring","TakeLastSubscriber","idx","MapToSubscriber","MaterializeSubscriber","accumulator","_seed","hasSeed","ScanSubscriber","defineProperty","enumerable","configurable","seed","acc","MergeScanSubscriber","nextSources","OnErrorResumeNextSubscriber","subscribeToNextSource","hasPrev","PairwiseSubscriber","RepeatSubscriber","notifier","sourceIsBeingSubscribedTo","RepeatWhenSubscriber","retries","subscribeToRetries","retriesSubscription","notifications","RetrySubscriber","RetryWhenSubscriber","SampleSubscriber","dispatchNotification","SampleTimeSubscriber","compareTo","comparor","_a","_b","_oneComplete","SequenceEqualCompareToSubscriber","SequenceEqualSubscriber","emit","checkValues","a","areEqual","nextB","shareSubjectFactory","seenValue","SingleSubscriber","applySingleValue","singleValue","SkipSubscriber","_skipCount","_count","_ring","SkipLastSubscriber","skipCount","currentIndex","oldValue","SkipUntilSubscriber","skipping","SkipWhileSubscriber","tryCallPredicate","SwitchMapSubscriber","TakeUntilSubscriber","TakeWhileSubscriber","nextOrComplete","predicateResult","_leading","_trailing","_hasValue","ThrottleSubscriber","_sendValue","_throttled","send","throttle","tryDurationSelector","throttlingDone","leading","trailing","_hasTrailingValue","_trailingValue","ThrottleTimeSubscriber","absoluteTimeout","waitFor","withObservable","scheduleTimeout","TimeoutWithSubscriber","dispatchTimeout","window","WindowSubscriber","openWindow","prevWindow","newWindow","windowSize","startWindowEvery","windows","WindowCountSubscriber","c","window_1","CountedSubject","_numberOfNextedValues","windowTimeSpan","closeWindow","windowCreationInterval","dispatchWindowClose","opts","providedIn","factory","maxWindowSize","dispatchWindowCreation","dispatchWindowTimeSpanOnly","WindowTimeSubscriber","numberOfNextedValues","window_2","openSubscription","WindowToggleSubscriber","context_3","context_4","inner","unsubscribeClosingNotification","closingNotification","WithLatestFromSubscriber","found","_tryProject","InjectionToken","_desc","options","ngMetadataName","ngInjectableDef","defineInjectable","toString","ANNOTATIONS","PARAMETERS","PROP_METADATA","props","parentClass","chainFn","typeFn","metaCtor","makeMetadataCtor","DecoratorFactory","__spread","annotationInstance","TypeDecorator","cls","annotationCls","propName","ParamDecoratorFactory","ParamDecorator","annotation","unusedKey","parameters","PropDecoratorFactory","decoratorInstance","target","meta","unshift","makeParamDecorator","attributeName","Query","ChangeDetectionStrategy","makePropDecorator","data","first","isViewQuery","descendants","Type","makeDecorator","changeDetection","Default","dir","pure","bindingPropertyName","hostPropertyName","eventName","Function","v","__window","__self","self","WorkerGlobalScope","__global","global","_global","Zone","current","scheduleMicroTask","token","stringify","overriddenName","res","newLineIndex","substring","DELEGATE_CTOR","INHERITED_CLASS","INHERITED_CLASS_WITH_CTOR","ReflectionCapabilities","reflect","_reflect","isReflectionEnabled","_zipTypesAndAnnotations","paramTypes","paramAnnotations","_ownParameters","type","parentCtor","typeStr","exec","tsickleCtorParams","ctorParameters","paramTypes_1","ctorParam","paramAnnotations_1","convertTsickleDecoratorIntoMetadata","decorators","getOwnMetadata","fill","isType","getParentCtor","_ownAnnotations","typeOrFunc","annotations","ownAnnotations","_ownPropMetadata","propMetadata","propDecorators","propDecorators_1","propMetadata_1","keys","prop","parentPropMetadata_1","ownPropMetadata","hasLifecycleHook","lcProperty","guards","getter","setter","method","importUri","resourceUri","resolveIdentifier","moduleUrl","members","runtime","resolveEnum","enumIdentifier","decoratorInvocations","decoratorInvocation","ctor","parentProto","getPrototypeOf","forwardRefFn","__forward_ref__","forwardRef","Inject","Optional","Self","SkipSelf","SOURCE","_THROW_IF_NOT_FOUND","INJECTOR","NullInjector","notFoundValue","Injector","StaticInjector","providers","THROW_IF_NOT_FOUND","NULL","inject","IDENT","CIRCULAR","MULTI_PROVIDER_FN","GET_PROPERTY_NAME$1","USE_VALUE$1","objWithPropertyToExtract","getClosureSafeProperty$1","provide","String","useValue","NULL_INJECTOR","NEW_LINE","NO_NEW_LINE","records","_records","deps","useNew","provider","resolveForwardRef","recursivelyProcessProviders","staticError","resolvedProvider","providerDeps","j","useExisting","computeDeps","useFactory","useClass","resolveProvider","multi","multiProvider","multiProviderMixError","record","flags","depRecords","depRecord","childRecord","tryResolveToken","resolveToken","tokenPath","formatError","tokens","text","charAt","substr","parts","JSON","replace","_currentInjector","injectableDef","types","GET_PROPERTY_NAME","USE_VALUE","getClosureSafeProperty","EMPTY_ARRAY","deps_1","reflectionCapabilities","injectArgs","valueProvider_1","existingProvider_1","factoryProvider_1","classProvider_1","deps_2","deps_3","injectableType","convertInjectableProviderToFactory","ngModule","moduleType","metadata","imports","exports","ngInjectorDef","ViewEncapsulation","ERROR_DEBUG_CONTEXT","full","major","minor","patch","ERROR_ORIGINAL_ERROR","console","ErrorHandler","_console","handleError","originalError","_findOriginalError","_findContext","errorLogger","defaultErrorLogger","getErrorLogger","getDebugContext","getOriginalError","ReflectiveKey","displayName","_globalKeyRegistry","numberOfKeys","_allKeys","KeyRegistry","newKey","size","Reflector","updateCapabilities","caps","identifier","trace","events","wtf","ApplicationInitStatus","appInits","initialized","donePromise","rej","runInitializers","asyncInitPromises","initResult","all","catch","PLATFORM_ID","APP_BOOTSTRAP_LISTENER","Console","log","warn","CompilerFactory","ComponentFactory","ComponentFactoryBoundToModule","componentType","ngContentSelectors","inputs","outputs","__extends","injector","projectableNodes","rootSelectorOrNode","NgModuleRef","wtfEnabled","wtfCreateScope","signature","createScope","noopScope","wtfLeave","scope","returnValue","leaveScope","EventEmitter","isAsync","__isAsync","generatorOrNext","schedulerFn","errorFn","completeFn","NgZone","zone","enableLongStackTrace","hasPendingMicrotasks","hasPendingMacrotasks","isStable","onUnstable","onMicrotaskEmpty","onStable","onError","assertZonePatched","_nesting","_outer","_inner","fork","properties","isAngularZone","onInvokeTask","task","applyThis","applyArgs","onEnter","invokeTask","onLeave","onInvoke","invoke","onHasTask","hasTaskState","hasTask","change","microTask","checkStable","macroTask","onHandleError","runOutsideAngular","isInAngularZone","assertInAngularZone","assertNotInAngularZone","run","runTask","scheduleEventTask","EMPTY_PAYLOAD","cancelTask","runGuarded","NoopNgZone","Testability","_ngZone","_pendingCount","_isZoneStable","_didWork","_callbacks","_watchAngularEvents","taskTrackingZone","_runCallbacksIfReady","increasePendingRequestCount","decreasePendingRequestCount","cb","clearTimeout","timeoutId","doneCb","pending_1","getPendingTasks","filter","updateCb","macroTasks","isPeriodic","creationLocation","xhr","addCallback","timeout","whenStable","getPendingRequestCount","findProviders","TestabilityRegistry","_applications","_testabilityGetter","addToWindow","registerApplication","testability","unregisterApplication","unregisterAllApplications","getTestability","elem","getAllTestabilities","from","getAllRootElements","findTestabilityInTree","findInAncestors","_NoopGetTestability","_devMode","PlatformRef","_injector","_modules","_destroyListeners","_destroyed","bootstrapModuleFactory","moduleFactory","ngZoneOption","ngZone","isDevMode","ngZoneInjector","moduleRef","exceptionHandler","onDestroy","errorHandler","initStatus","_moduleDoBootstrap","_callAndReportToErrorHandler","bootstrapModule","compilerOptions","compilerFactory","optionsReducer","createCompiler","compileModuleAsync","appRef","ApplicationRef","_bootstrapComponents","f","bootstrap","instance","ngDoBootstrap","destroy","module","listener","dst","objs","_zone","_exceptionHandler","_componentFactoryResolver","_initStatus","_bootstrapListeners","_views","_runningTick","_enforceNoNewChanges","_stable","componentTypes","components","tick","isCurrentlyStable","stableSub","unstableSub","last","mergeMap","ii","mergeAll","merge","subjectOrSubjectFactory","componentOrFactory","componentFactory","resolveComponentFactory","compRef","_unloadComponent","location","nativeElement","_loadComponent","_tickScope","view","detectChanges","checkNoChanges","attachView","viewRef","attachToAppRef","detachView","detachFromAppRef","componentRef","hostView","ngOnDestroy","list","el","Renderer2","tags","e_1","_c","__values","split","e_1_1","sets","e_2","sets_1","sets_1_1","e_2_1","VOID_ELEMENTS","tagSet","OPTIONAL_END_TAG_BLOCK_ELEMENTS","OPTIONAL_END_TAG_INLINE_ELEMENTS","OPTIONAL_END_TAG_ELEMENTS","merge$1","_tokenKeyCache","_renderCompCount","def","tView","afterContentInit","contentHooks","afterContentChecked","contentCheckHooks","afterViewInit","viewHooks","afterViewChecked","viewCheckHooks","destroyHooks","currentView","creationMode","lifecycleStage","executeHooks","initHooks","checkHooks","allHooks","hooksToCall","callHooks","arr","WeakMap","tokenKey","NG_PROJECT_AS_ATTR_NAME","renderer","domRendererFactory3","createRenderer","document","node","stopNode","currentNode","pNextOrParent","nativeNode","findFirstRNode","currentSibling","parentNode","parentType","initialNode","rootNode","nextNode","getNextLNodeWithProjection","native","childContainerData","dynamicLContainerNode","views","child","head","getNextOrParentSiblingNode","container","insertMode","beforeNode","renderParent","isProceduralRenderer","insertBefore","removeChild","rootView","cleanup","removeEventListener","removeListeners","executeOnDestroys","pipeDestroyHooks","executePipeOnDestroys","canInsertNativeNode","appendChild","tNode","nodeClassAttrVal","cssClassToMatch","nodeClassesLen","matchIndex","matchEndIdx","mode","nodeAttrs","skipToNextSelector","tagName","isPositive","attrIndexInNode","findAttrIndexInNode","selectorAttrValue","nodeAttrValue","attrs","isNodeMatchingSelector","rendererFactory","previousOrParentNode","isParent","tData","currentQueries","directives","NG_HOST_SYMBOL","_CLEAN_PROMISE","_ROOT_DIRECTIVE_INDICES","CIRCULAR$2","checkNoChangesMode","firstTemplatePass","newView","host","oldView","bindingIndex","bindingStartIndex","queries","creationOnly","enterView","executeInitHooks","dynamicViewCount","container_1","lViewNode","dynamicView","renderEmbeddedTemplate","refreshDynamicChildren","setHostBindings","hostBindings","componentRefresh","refreshChildComponents","bindings","defs","dirIndex","viewId","template","tail","isState","nodeInjector","createLNodeObject","viewNode","_isParent","_previousOrParentNode","rf","createLNode","createLView","refreshView","leaveView","valueIndex","matches","directiveCreate","throwCyclicDependencyError","changeDetectorRef","_setComponentContext","exportsMap","exportAs","pipes","ngPrivateData","createTView","directiveRegistry","pipeRegistry","currentMatches","isProc","attrName","attrVal","setAttribute","elementOrSelector","defaultRenderer","selectRootElement","querySelector","tViews","localNames","initialInputs","directive","directiveDef","baseDirectiveCreate","getOrCreateTView","directiveDefs","pipeDefs","addToViewTree","rendererType","onPush","initChangeDetectorIfExisting","addComponentLogic","onInit","doCheck","queueInitHooks","directiveIndex","initialInputData","minifiedInputName","generateInitialInputs","setInputsFromAttrs","diPublic","attributes","setUpAttributes","elementIndex","instanceOrArray","detectChangesInternal","component","hostNode","_getComponentHostLElementNode","NO_CHANGE","CLEAN_PROMISE","ROOT_DIRECTIVE_INDICES","ngComponentDef","ngDirectiveDef","ngPipeDef","_lViewNode","_view","ViewRef","markForCheck","rootContext","res_1","clean","begin","executeInitAndContentHooks","end","renderComponentOrTemplate","lView","getRootView","markViewDirty","detach","reattach","_lContainerNode","_viewRefs","ViewContainerRef","lContainer","createEmbeddedView","templateRef","insert","createComponent","adjustedIdx","_adjustIndex","setViewNext","findNextRNodeSibling","containerNextNativeNode","addRemoveViewFromContainer","insertView","move","newIndex","removeIndex","cleanUpView","viewOrContainer","getParentState","destroyViewTree","removeView","componentDefinition","pipeTypes","directiveTypes","feature","EMPTY$1","newObj","minifiedKey","HelloWorld","[object Object]","world","selectors","ctx","existingNode","prefix","v0","suffix","textNode","createElement","createTNode","registry","isNodeMatchingSelectorList","throwMultipleComponentError","findDirectiveMatches","resolveDirective","saveNameToExportMap","cacheMatchingDirectivesForNode","start","tDirectives","instantiateDirectivesDirectly","saveResolvedLocalsInData","createDirectivesAndLocals","createText","stringify$1","createTextNode","i0.ɵT","addNode","queueContentHooks","queueViewHooks","queueDestroyHooks","queueLifecycleHooks","i0.ɵe","msg","throwErrorIfNoChangesMode","bindingUpdated","setValue","textContent","invertObject","encapsulation","None","styles","resolveRendererType2","ngOnInit","ngDoCheck","ngAfterContentInit","ngAfterContentChecked","ngAfterViewInit","ngAfterViewChecked","OnPush","extractDirectiveDef","extractPipeDef","features","componentDef","componentTag","locateHostElement","requestAnimationFrame","elementNode","tag","rNode","hostElement","hostFeatures","renderComponent"],"mappings":"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"}